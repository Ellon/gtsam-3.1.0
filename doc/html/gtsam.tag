<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>cholesky.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00256</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1eb8c69f6e0b90ac2dec4287ee8fcb0a</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cholesky.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00257</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>debug.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00259</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00260</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00262</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00263</filename>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastDefaultAllocator.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00264</filename>
    <class kind="struct">gtsam::internal::FastDefaultAllocator</class>
    <class kind="struct">gtsam::internal::FastDefaultVectorAllocator</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastList.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00265</filename>
    <class kind="class">gtsam::FastList</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastMap.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00266</filename>
    <class kind="class">gtsam::FastMap</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastSet.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00267</filename>
    <class kind="struct">gtsam::FastSetTestableHelper</class>
    <class kind="class">gtsam::FastSet</class>
    <class kind="struct">gtsam::FastSetTestableHelper</class>
    <class kind="struct">gtsam::FastSetTestableHelper&lt; VALUE, typename boost::enable_if&lt; has_print&lt; VALUE &gt; &gt;::type &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastVector.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00268</filename>
    <class kind="class">gtsam::FastVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Group.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00269</filename>
    <class kind="class">gtsam::GroupConcept</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_GROUP_INST</name>
      <anchorfile>a00269.html</anchorfile>
      <anchor>aac1ea136475ea605715c809f4b3f0156</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Lie-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00270</filename>
  </compound>
  <compound kind="file">
    <name>Lie.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00271</filename>
    <class kind="class">gtsam::LieConcept</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_LIE_INST</name>
      <anchorfile>a00271.html</anchorfile>
      <anchor>aeef5af7d583d275fbc0e6e5af8bf2afc</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>between_default</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a473aea76af7b0cbec8f26e6abf1ed87e</anchor>
      <arglist>(const T &amp;l1, const T &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>logmap_default</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a75c80ae2fd169fcdd8708c37784a880a</anchor>
      <arglist>(const T &amp;l0, const T &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expmap_default</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af0170df6a1f64df845e4445bdf777742</anchor>
      <arglist>(const T &amp;t, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>BCH</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>adbd55c711e6ceee791b595558eb3ec8a</anchor>
      <arglist>(const T &amp;X, const T &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>afe28b7f8e3592fb9f5cf9ebae09497ba</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3041816208c79ef76d3ef2e0991d90b2</anchor>
      <arglist>(const Vector &amp;x, int K=7)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LieMatrix.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00272</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LieMatrix.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00273</filename>
    <class kind="struct">gtsam::LieMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>lieProxies.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00274</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LieScalar.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00276</filename>
    <class kind="struct">gtsam::LieScalar</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LieVector.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00277</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LieVector.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00278</filename>
    <class kind="struct">gtsam::LieVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Manifold.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00279</filename>
    <class kind="class">gtsam::ManifoldConcept</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_MANIFOLD_INST</name>
      <anchorfile>a00279.html</anchorfile>
      <anchor>a64b5e2e3c812d2cdea5ee294100f825f</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00280</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>zeros</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a33240affd7dc54b7a85c6f3136853f7f</anchor>
      <arglist>(size_t m, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>ones</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8da8a8496d1e82788f239de578581424</anchor>
      <arglist>(size_t m, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>eye</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a728f2e626412c19fa789a65eaba41819</anchor>
      <arglist>(size_t m, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAdd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a991da8573b30c717bf609e2ff5d0069b</anchor>
      <arglist>(double alpha, const Matrix &amp;A, const Vector &amp;x, Vector &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyAdd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad5119e8b02af1b70c1719b3b79c39769</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;x, Vector &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a376e4d2e196451babb362c6eb04a7a00</anchor>
      <arglist>(double alpha, const Matrix &amp;A, const Vector &amp;e, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa038f2f0c136a5c5ca2dcfcc425e9c28</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;e, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aebbe1dcc822b54420d461efbbebe3141</anchor>
      <arglist>(double alpha, const Matrix &amp;A, const Vector &amp;e, SubVector x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a93f7913cd214cdc66d7abb39f8264b24</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;, std::ostream &amp;stream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSub</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7b42c1bd6a8d1152ee1ef86b96526993</anchor>
      <arglist>(Matrix &amp;fullMatrix, const Matrix &amp;subMatrix, size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertColumn</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab8583da4b37aefb1697375402a265c9a</anchor>
      <arglist>(Matrix &amp;A, const Vector &amp;col, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1feaf381266c4fa007188c663aa733fa</anchor>
      <arglist>(Matrix &amp;A, Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a569422c152fe1a6d49e349cb2ec1aa5e</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a60bc5c23cdae085b88d12056c7411463</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>LLt</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a60d6f844b3fc9874c46f1a753aa03489</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>RtR</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2b05b69489f07d74d392d6abf17c644c</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Cayley</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a83d760d40eb1c3e3e214bcb853e488e0</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00281</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>eye</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae683ac9fd3c4679ddde00872d37f0975</anchor>
      <arglist>(size_t m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af31e657258505b2e5148846ebbaa3195</anchor>
      <arglist>(const Eigen::DenseBase&lt; MATRIX &gt; &amp;A, const Eigen::DenseBase&lt; MATRIX &gt; &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>afd5b3cf3f54adcbdd6d9e7403f1a792f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab235abf7505b634be2165e0db58239dd</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>MATRIX</type>
      <name>prod</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abc29e3164ed30e785a3c48dfd1aa6ca5</anchor>
      <arglist>(const MATRIX &amp;A, const MATRIX &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Block&lt; const MATRIX &gt;</type>
      <name>sub</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aed6673ca73bb7ab59f46f08e3a5cc284</anchor>
      <arglist>(const MATRIX &amp;A, size_t i1, size_t i2, size_t j1, size_t j2)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstColXpr</type>
      <name>column</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a559dba69e2854eb66e34222f60f55722</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstRowXpr</type>
      <name>row</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2754f325c8600303d627d9e8cf1f9949</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroBelowDiagonal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a57edf6ed7312f63d35f73233665c334d</anchor>
      <arglist>(MATRIX &amp;A, size_t cols=0)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>trans</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa2e36d7ab63000feddaeb61bbfcf2db1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1dc9a38f15c24872e82b504fa9761340</anchor>
      <arglist>(MATRIX &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, N, N &gt;</type>
      <name>Cayley</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a21d18623b1b79e06fb05a73e609b89c3</anchor>
      <arglist>(const Eigen::Matrix&lt; double, N, N &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numericalDerivative.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00282</filename>
    <class kind="class">gtsam::G_x1</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>LieVector</type>
      <name>makeLieVector</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7633e808bfb81359f2bef2fde0a81ce3</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>numericalGradient</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac1beb78285325fde6182c86eb18ae2eb</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative11</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a168905f3fbaf00610d4dc486bcc4365b</anchor>
      <arglist>(boost::function&lt; Y(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative11</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3b375fb6b8c69d2cfbf9f1d132464a0c</anchor>
      <arglist>(Y(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative11</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6fe4866aa69f0146c6af20f60bc69ddb</anchor>
      <arglist>(double(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative11</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a57f5c58b0716833841299b1f10def7a7</anchor>
      <arglist>(boost::function&lt; Vector(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative21</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aeaaad2ac19febd86f2afa7c6916659b9</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative21</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9714f8cdfe7a86a48d7791b80891fbb3</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative21</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a53aecd57c15f4263e261d40ebb91ce16</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative21</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a79b328b8c696bf16801ac833efbfe2d7</anchor>
      <arglist>(boost::function&lt; Vector(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative22</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad054ef564f08a62522b456cf677502a8</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative22</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a60ba223711d4313a98d5d6bf1cb3bb50</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative22</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5ac6b4100f0ceb05aabb839e43eaf801</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative22</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9aac9371e141372ece47a166850ebf8b</anchor>
      <arglist>(boost::function&lt; Vector(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative31</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af6cefcc2e690755b40d84f04beb123ea</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative31</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a49ff733799ed93622a896fea47eeef62</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative31</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1151b40cc04229cfeb05e2b226189446</anchor>
      <arglist>(boost::function&lt; Vector(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative32</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0b4fe49c0dea74639a95bfb58e21e663</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative32</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af40d267127fa96699dc26c27a11d4e87</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative32</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8cea897ac1b1b5ccbdd0825167ed057c</anchor>
      <arglist>(boost::function&lt; Vector(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative33</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5def64a08dde6bc660af18e22f69e901</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative33</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa8fc2cab4819a3df2a7730072cf37a1d</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalDerivative33</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa265046959ca82909006caa5b2eda199</anchor>
      <arglist>(boost::function&lt; Vector(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalHessian</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a11dc11c40862fe22c0ebab881edda95a</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; f, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>numericalHessian311</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa0b0105665f1374c98ee7707e3d35d97</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; f, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>serialization.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00283</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serializationTestHelpers.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00284</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00285</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00286</filename>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrixBlockExpr.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00287</filename>
    <class kind="class">gtsam::SymmetricBlockMatrixBlockExpr</class>
    <class kind="struct">Eigen::internal::traits&lt; gtsam::SymmetricBlockMatrixBlockExpr&lt; SymmetricBlockMatrixType &gt; &gt;</class>
    <class kind="class">gtsam::SymmetricBlockMatrixBlockExpr</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Testable.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00288</filename>
    <class kind="class">gtsam::TestableConcept</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_TESTABLE_INST</name>
      <anchorfile>a00288.html</anchorfile>
      <anchor>abe0a238cdd07d484ff0be56ae945b182</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a04f25326667c8e905e3a7065ece2b307</anchor>
      <arglist>(const T &amp;object, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad2dbee4a72127938c79162cc8b6d5152</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a1f3dc67ad88b799c469088e428c583b1</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a659619cca082d1c10b07c033d48c54da</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableAssertions.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00289</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a982034802415eb6e9bd02355257ed96a</anchor>
      <arglist>(const Key &amp;expected, const Key &amp;actual, double tol=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>add6d6575582314cc9b5dbdbe2a86374d</anchor>
      <arglist>(const boost::optional&lt; V &gt; &amp;expected, const boost::optional&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0931276a9406dfc1bcff6d265704ee39</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;expected, const std::vector&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a254be27d6d4b416fa2b546c77ae783fc</anchor>
      <arglist>(const std::map&lt; V1, V2 &gt; &amp;expected, const std::map&lt; V1, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2f509195ea2180d0f7dbd3a99a088ff4</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0eec17f894b358dd9f30d7af28082ba5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;expected, const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6d6b2964354593f69848f6bf5d3e0ca1</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a59ba6a7db27344c5cb021f1421905020</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa0926a5d779171bd8e1d30fb5982b5c0</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a21e760bc75888053afd86a27d56b6148</anchor>
      <arglist>(const std::string &amp;expected, const std::string &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2f19ba6625a264457805513fefcb5c32</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timing.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00291</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>timing.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00292</filename>
    <class kind="class">gtsam::internal::TimingOutline</class>
    <class kind="class">gtsam::internal::AutoTicToc</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>treeTraversal-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00293</filename>
    <namespace>gtsam</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a50e24f0a9085721425089cdce18f2475</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a3735d0cee6f4d530e75479f7b1ebaf07</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForestParallel</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>afd7410807789da9ad91d6630063be36f</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost, int problemSizeThreshold=10)</arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; boost::shared_ptr&lt; typename FOREST::Node &gt; &gt;</type>
      <name>CloneForest</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a032aacc77495f48bd885f79d3fe16427</anchor>
      <arglist>(const FOREST &amp;forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintForest</name>
      <anchorfile>a00552.html</anchorfile>
      <anchor>a7228bbaf6ad62b65be7a2084c01aae5c</anchor>
      <arglist>(const FOREST &amp;forest, std::string str, const KeyFormatter &amp;keyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00295</filename>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>assert_throw</name>
      <anchorfile>a00295.html</anchorfile>
      <anchor>a30d3af2da1ea940197addce4f3c223c8</anchor>
      <arglist>(CONDITION, EXCEPTION)</arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>Key</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa365a1bd3614e767adbd35f44ba4fec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; std::string(Key)&gt;</type>
      <name>KeyFormatter</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a29dee574fe60f586d71b2c0d957dc8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>DenseIndex</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a21006f326f57cdf7d3f35fec40f43e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ListOfOneContainer&lt; T &gt;</type>
      <name>ListOfOne</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac3ed0dcde6a0084d7f1792c396e5dbaf</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Value.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00296</filename>
    <class kind="class">gtsam::Value</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Vector.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00297</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>odprintf</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5f9a97513901635b46a3149bea00fad7</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>zero</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a33561b8886a11b2de66f9dab4c7380e3</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>repeat</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af50343afb840c2e690b5b86b69ab691a</anchor>
      <arglist>(size_t n, double value)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>delta</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac2a0ba4a7a13e0f4c781fa9de3e5689e</anchor>
      <arglist>(size_t n, size_t i, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad264e350453db2df8b12f66c670ad0e7</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;, std::ostream &amp;stream=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>ConstSubVector</type>
      <name>sub</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af694dd7a0838c24e3484068cc1657f4a</anchor>
      <arglist>(const Vector &amp;v, size_t i1, size_t i2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subInsert</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abe442f79470225ffccfc8bc5ce46a87a</anchor>
      <arglist>(Vector &amp;fullVector, const Vector &amp;subVector, size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>emul</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab08665ce2fa3fdc3f7ff6d87b26452cc</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac0d4fbafe5819f4617da45c107b3e616</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a316a9f631367da3caae876b41b345867</anchor>
      <arglist>(const Vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm_2</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aaa3ddc32a5a6b8eed2d5efe69d1cb171</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reciprocal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0853fc18973e23bb407825df52c95515</anchor>
      <arglist>(const Vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>esqrt</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6c974066d393d86d744e9d387f0d3f50</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>abs</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a5ba06101b45d9f2647608cbf4e3b35aa</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab21cbc51fd8128a843739dbe5e0b2421</anchor>
      <arglist>(const Vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00298</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector</type>
      <name>basis</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6ec32e8dafe1d25ab11de3d693c1b5a4</anchor>
      <arglist>(size_t n, size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>zero</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a067f9515f6cd64987f4604127398fb9d</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ones</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa4782bb65cdbe1fdd391080d1754a20f</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3740ee8f898205aa46c6b3f78fbb817a</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa7ed1d4fe2dd6828cfeb2d8f488b818d</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3d1cad2313f69f9fa5008fdc348d1526</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad80249acf12bbea741e755cd8fc73042</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inner_prod</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4ca41ba9ec9d6d21a2b9f5e00f9f25ed</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad371582718b5e685ace31c176f2a9abc</anchor>
      <arglist>(double alpha, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a30a89a0147943428129e2cb3683988be</anchor>
      <arglist>(double alpha, const V1 &amp;x, V2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00299</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>a00300</filename>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AlgebraicDecisionTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00301</filename>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Assignment.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00302</filename>
    <class kind="class">gtsam::Assignment</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::vector&lt; Assignment&lt; L &gt; &gt;</type>
      <name>cartesianProduct</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a35831074a7aab15d463acddc7767bfe8</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; L, size_t &gt; &gt; &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00304</filename>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>DecisionTree&lt; L, Y &gt;</type>
      <name>apply</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abf36c31dcf9f45f5bbdfd2b80f07cd1f</anchor>
      <arglist>(const DecisionTree&lt; L, Y &gt; &amp;f, const typename DecisionTree&lt; L, Y &gt;::Unary &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00305</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00306</filename>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00307</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00308</filename>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00309</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00310</filename>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00311</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00312</filename>
    <class kind="class">gtsam::DiscreteConditional</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00313</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00314</filename>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00315</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00316</filename>
    <class kind="class">gtsam::DiscreteFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00317</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00318</filename>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00319</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00320</filename>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteKey.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00322</filename>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>DiscreteKey</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>acd19e5d1e5d06c37246d4c15af38ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>operator&amp;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0be4f243161c2fd937df60aee511eb16</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteMarginals.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00323</filename>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00324</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00325</filename>
    <class kind="class">gtsam::Potentials</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Signature.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00326</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signature.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>a00327</filename>
    <class kind="class">gtsam::Signature</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00328</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00329</filename>
    <class kind="class">gtsam::Cal3_S2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2Stereo.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00330</filename>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00331</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00332</filename>
    <class kind="class">gtsam::Cal3Bundler</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00333</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00334</filename>
    <class kind="class">gtsam::Cal3DS2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00335</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00336</filename>
    <class kind="class">gtsam::Cal3Unified</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00337</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00338</filename>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00339</filename>
    <class kind="class">gtsam::PoseConcept</class>
    <class kind="class">gtsam::RangeMeasurementConcept</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a00339.html</anchorfile>
      <anchor>a1ac1dbb1c81293b35cbab7722ac657ac</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_RANGE_MEASUREMENT_INST</name>
      <anchorfile>a00339.html</anchorfile>
      <anchor>a46f79d96e1f20567627e7fda724e792d</anchor>
      <arglist>(V1, V2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PinholeCamera.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00342</filename>
    <class kind="class">gtsam::PinholeCamera</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Point2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00343</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>INSTANTIATE_LIE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab498ebc225b8ecec9c0176a7460b9da5</anchor>
      <arglist>(Point2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00344</filename>
    <class kind="class">gtsam::Point2</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a63d86e99c211c6daeac2b7b4dd9d928e</anchor>
      <arglist>(double s, const Point2 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00345</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>INSTANTIATE_LIE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0574540374ca7142a55b370d4237a1ec</anchor>
      <arglist>(Point3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00346</filename>
    <class kind="class">gtsam::Point3</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a27247b810d31840d7d3fefc2b73c99af</anchor>
      <arglist>(double s, const Point3 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00347</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>INSTANTIATE_LIE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9b449384ab2bdade1dc9fdb857011606</anchor>
      <arglist>(Pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad6efe09721c5221b12b7a3437f0a2bee</anchor>
      <arglist>(Pose2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00348</filename>
    <class kind="class">gtsam::Pose2</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Point2, Point2 &gt;</type>
      <name>Point2Pair</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af15dec8cc8bf0a43bc649709b84cf771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose2 &gt;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4b78f4db0e05f3ca838ee4da6187710e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose3.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00349</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>INSTANTIATE_LIE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>acbeda702e320c082a99bb717a69b017c</anchor>
      <arglist>(Pose3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a10a8e9793b8e0d234fb0c83b17a2f5bc</anchor>
      <arglist>(Pose3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose3.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00350</filename>
    <class kind="class">gtsam::Pose3</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Point3, Point3 &gt;</type>
      <name>Point3Pair</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ac387ee14e9f8e8dc341a6f58330241eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose3 &gt;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aefb606eb24889c0f418acf1515a2c723</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00351</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>INSTANTIATE_LIE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a53676b6c16dc20cf5f31f13251230c2f</anchor>
      <arglist>(Rot2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00352</filename>
    <class kind="class">gtsam::Rot2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00353</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a59e7b1c395b14af00409d9ca3ee4a687</anchor>
      <arglist>(const Matrix3 &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00354</filename>
    <class kind="class">gtsam::Rot3</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; double, Eigen::DontAlign &gt;</type>
      <name>Quaternion</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a59e2c1120d40da6062c03ab31e869065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3M.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00355</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3Q.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00356</filename>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00357</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>simpleCamera</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9b6a2b4b6a6423eb8c49ae4fad1ef790</anchor>
      <arglist>(const Matrix &amp;P)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00358</filename>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3_S2 &gt;</type>
      <name>SimpleCamera</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7bb03eb3dceb63b0933c94c15b83cb39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StereoCamera.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00360</filename>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoCamera</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00361</filename>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00362</filename>
    <class kind="class">gtsam::StereoPoint2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>triangulation.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>a00364</filename>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateDLT</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>afac774d6d37c142606e84487c9905c02</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;projection_matrices, const std::vector&lt; Point2 &gt; &amp;measurements, double rank_tol)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab53edb52916aae7593c671cf5a241939</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const std::vector&lt; Point2 &gt; &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7177920d6b77c685fec4178a79eeb830</anchor>
      <arglist>(const std::vector&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const std::vector&lt; Point2 &gt; &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>optimize</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4b0057879b0c5f323185452b0d1a4232</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a65edc51013011a97850fbe1684da14c9</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const std::vector&lt; Point2 &gt; &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a50a7e844788f256cb7461d2d8a42e0ae</anchor>
      <arglist>(const std::vector&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const std::vector&lt; Point2 &gt; &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a74917d865d97c3675a9358519dd28fbf</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const std::vector&lt; Point2 &gt; &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0df4caa55f658b412f9c817975cb8aca</anchor>
      <arglist>(const std::vector&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const std::vector&lt; Point2 &gt; &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>global_includes.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/</path>
    <filename>a00368</filename>
  </compound>
  <compound kind="file">
    <name>BayesNet.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00371</filename>
    <class kind="class">gtsam::BayesNet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00373</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00374</filename>
    <class kind="class">gtsam::FactorGraph</class>
    <class kind="class">gtsam::ClusterTree</class>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00375</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00376</filename>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ClusterTree-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00377</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ClusterTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00378</filename>
    <class kind="class">gtsam::ClusterTree</class>
    <class kind="struct">gtsam::ClusterTree::Cluster</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Conditional.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00380</filename>
    <class kind="class">gtsam::Conditional</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminateableFactorGraph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00382</filename>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminationTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00384</filename>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00385</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00386</filename>
    <class kind="class">gtsam::Factor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FactorGraph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00388</filename>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::FactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00390</filename>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::list&lt; KEY &gt;</type>
      <name>predecessorMap2Keys</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a18a265afdea057ea54be10262396be12</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>SDGraph&lt; KEY &gt;</type>
      <name>toBoostGraph</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6c0319a6ebcc83d4a5cf9ff51729bb80</anchor>
      <arglist>(const G &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; G, V, std::map&lt; KEY, V &gt; &gt;</type>
      <name>predecessorMap2Graph</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae67d0d86c4e55b175859967a70b36983</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>composePoses</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a62b34d6038ccdfa84d8a5bb0c15328b1</anchor>
      <arglist>(const G &amp;graph, const PredecessorMap&lt; KEY &gt; &amp;tree, const POSE &amp;rootPose)</arglist>
    </member>
    <member kind="function">
      <type>PredecessorMap&lt; KEY &gt;</type>
      <name>findMinimumSpanningTree</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7771a103b41708e88763ff67059ff01d</anchor>
      <arglist>(const G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3453247aec1d8b4642947ffd4bca426b</anchor>
      <arglist>(const G &amp;g, const PredecessorMap&lt; KEY &gt; &amp;tree, G &amp;Ab1, G &amp;Ab2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inference-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00391</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>inferenceExceptions.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00392</filename>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00394</filename>
    <class kind="class">gtsam::ISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00395</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00396</filename>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="class">gtsam::JunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Key.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00398</filename>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>FastList&lt; Key &gt;</type>
      <name>KeyList</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6fcb28bfc2908ca506aa5503f24b4c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeyList</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9d9018bf07bb2a775fa71c7644a18aea</anchor>
      <arglist>(const KeyList &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeyVector</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a74bf98926482dc49ad99ee1a5269e586</anchor>
      <arglist>(const KeyVector &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeySet</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a36a7273226ed73c077b6d6ea45b68e2e</anchor>
      <arglist>(const KeySet &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabeledSymbol.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00400</filename>
    <class kind="class">gtsam::LabeledSymbol</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>mrsymbol</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ae9a7dceb0a85c356062b55f6939b1419</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolChr</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a37995b0d0610e5fb29c6bd0715151d67</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolLabel</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4e4c133c4fd0d9d73593f601be2248a6</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>mrsymbolIndex</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a4adc1bb606fa4a14d5dbd246f95cecd3</anchor>
      <arglist>(Key key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ordering.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00401</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Ordering.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00402</filename>
    <class kind="class">gtsam::Ordering</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Symbol.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00403</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00406</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00407</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00408</filename>
    <class kind="class">gtsam::VariableIndex</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00409</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>a00410</filename>
    <class kind="class">gtsam::VariableSlots</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Errors.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00412</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af191b77091843947b9ae5c413d8caf27</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Errors.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00413</filename>
    <class kind="class">gtsam::Errors</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a939e1342568a5072310bc7995d3cf383</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00414</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00415</filename>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00416</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00417</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00418</filename>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00419</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00420</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00421</filename>
    <class kind="class">gtsam::GaussianConditional</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00422</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00423</filename>
    <class kind="class">gtsam::GaussianDensity</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00424</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00425</filename>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00426</filename>
    <class kind="class">gtsam::GaussianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00427</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00428</filename>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00431</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00432</filename>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00433</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00434</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00435</filename>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::Scatter</class>
    <class kind="class">gtsam::HessianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>iterative-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00436</filename>
    <class kind="struct">gtsam::CGState</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00437</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00438</filename>
    <class kind="class">gtsam::System</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GTSAM_EXPORT Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a37ca85391e3bc671c71b68bc324296f0</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const IterativeOptimizationParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeSolver.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00439</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00442</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00443</filename>
    <class kind="class">gtsam::JacobianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00444</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00445</filename>
    <class kind="class">gtsam::KalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearAlgorithms-inst.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00446</filename>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeData</class>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeClique</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00447</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00448</filename>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00449</filename>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00450</filename>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Base</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Null</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Fair</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Huber</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Cauchy</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Tukey</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Welsh</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
    <member kind="typedef">
      <type>noiseModel::Base::shared_ptr</type>
      <name>SharedNoiseModel</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ab6e5a4884342656e0837ef07008ec03f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sampler.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00451</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Sampler.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00452</filename>
    <class kind="class">gtsam::Sampler</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00453</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00454</filename>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VectorValues.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00457</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator*</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a131393739a049cb8d3c3d0c3c6e960d6</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorValues.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>a00458</filename>
    <class kind="class">gtsam::VectorValues</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00460</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00461</filename>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::DoglegState</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizerImpl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00463</filename>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00464</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00465</filename>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00466</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00467</filename>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GaussNewtonState</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00468</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00469</filename>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="struct">gtsam::ISAM2::PartialSolveResult</class>
    <class kind="struct">gtsam::ISAM2::ReorderingMode</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-inl.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00470</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a33509e7a55b46fe677e682d01f8fbd87</anchor>
      <arglist>(const boost::shared_ptr&lt; CLIQUE &gt; &amp;root, double threshold, const FastSet&lt; Key &gt; &amp;replaced, VectorValues &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calculate_nnz</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aca63ccfbd14352eade58fd2a2ec6b5e4</anchor>
      <arglist>(const boost::shared_ptr&lt; CLIQUE &gt; &amp;clique)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ISAM2.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00472</filename>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
    <class kind="class">gtsam::ISAM2Clique</class>
    <class kind="class">gtsam::ISAM2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00473</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00474</filename>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <class kind="class">gtsam::LevenbergMarquardtState</class>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00475</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00476</filename>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00477</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00478</filename>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::JointMarginal</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>nonlinearExceptions.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00482</filename>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00483</filename>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ADD_CLONE_NONLINEAR_FACTOR</name>
      <anchorfile>a00483.html</anchorfile>
      <anchor>acd444d887da7c7f7107e8a5caa703b22</anchor>
      <arglist>(Derived)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00484</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00485</filename>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearISAM.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00487</filename>
    <class kind="class">gtsam::NonlinearISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00488</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00489</filename>
    <class kind="class">gtsam::NonlinearOptimizerState</class>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00490</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00491</filename>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Values.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00494</filename>
    <class kind="class">gtsam::Values</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::Values::Filtered</class>
    <class kind="class">gtsam::Values::ConstFiltered</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>WhiteNoiseFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00495</filename>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <namespace>gtsam</namespace>
    <member kind="variable">
      <type>const double</type>
      <name>logSqrt2PI</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad5602eb85d05df6cba60e47eebbd3636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AntiFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00496</filename>
    <class kind="class">gtsam::AntiFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BearingRangeFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00498</filename>
    <class kind="class">gtsam::BearingRangeFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BetweenFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00499</filename>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BoundingConstraint.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00500</filename>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>dataset.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00501</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad35242897c20919be8784169179b90ba</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), int maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatGRAPH,KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aaddc8a142b6518bb66870e893dfe8f20</anchor>
      <arglist>(const string &amp;filename, noiseModel::Base::shared_ptr &amp;model, int maxID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8caf13571ec334f8d789f4acc8e2ace5</anchor>
      <arglist>(const std::string &amp;g2oFile, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load3D</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a91606476a4bb8cf6b890546cae31a612</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aef96840653460872d4e7a74349f77c42</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a07b97b60419b8535ccdaa385ce6d7cc6</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>acbdf1d3cfef0058a15eca02d31037e9b</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a28d34be139e927fde97f85d83144c02a</anchor>
      <arglist>(const std::string &amp;filename, const SfM_data &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a07fada7b5119506b7f30d5ddbd1b53f7</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>abdef8c3f883714f9937097e500f3eb1d</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dataset.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00502</filename>
    <class kind="struct">gtsam::SfM_Track</class>
    <class kind="struct">gtsam::SfM_data</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; NonlinearFactorGraph::shared_ptr, Values::shared_ptr &gt;</type>
      <name>GraphAndValues</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a62b6d8d9df4bb6e0add77af1ffd41c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Point2 &gt;</type>
      <name>SfM_Measurement</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a424cd75273f459332d71dcf59d8e6157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3Bundler &gt;</type>
      <name>SfM_Camera</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a57df85ec453d878a568bc619734af335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NoiseFormat</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatG2O</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatTORO</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatCOV</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoiseFormatG2O</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoiseFormatTORO</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoiseFormatCOV</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KernelFunctionType</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KernelFunctionTypeNONE</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0a406af886b3b4b113dfe666c8ad95e38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KernelFunctionTypeHUBER</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0a37cef4c071c8c4f77f31fa617e91da53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KernelFunctionTypeTUKEY</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0aacc5d659fca66977c8fe6f341802fae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0785ab0356df59265448737d25ee937f</anchor>
      <arglist>(std::pair&lt; std::string, SharedNoiseModel &gt; dataset, int maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatGRAPH, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.cpp</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00503</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00504</filename>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GeneralSFMFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00506</filename>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitSchurFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00507</filename>
    <class kind="class">gtsam::ImplicitSchurFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>lago.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00513</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRotationPrior.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00514</filename>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseTranslationPrior.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00515</filename>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PriorFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00516</filename>
    <class kind="class">gtsam::PriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00517</filename>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularHessianFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00520</filename>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartFactorBase.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00522</filename>
    <class kind="class">gtsam::SmartFactorBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00523</filename>
    <class kind="class">gtsam::SmartProjectionFactorState</class>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionPoseFactor.h</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>a00524</filename>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="group">
    <name>LinearSolving</name>
    <title>Solving of sparse linear systems with least-squares</title>
    <filename>a00556.html</filename>
    <subgroup>Multifrontal</subgroup>
    <subgroup>Sequential</subgroup>
  </compound>
  <compound kind="group">
    <name>Multifrontal</name>
    <title>Solving by multifrontal variable elimination (QR and Cholesky)</title>
    <filename>a00557.html</filename>
  </compound>
  <compound kind="group">
    <name>Sequential</name>
    <title>Solving by sequential variable elimination (QR and Cholesky)</title>
    <filename>a00558.html</filename>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>Base</title>
    <filename>a00559.html</filename>
  </compound>
  <compound kind="group">
    <name>geometry</name>
    <title>Geometry</title>
    <filename>a00560.html</filename>
  </compound>
  <compound kind="group">
    <name>SLAM</name>
    <title>SLAM</title>
    <filename>a00561.html</filename>
  </compound>
  <compound kind="group">
    <name>ISAM2</name>
    <title>ISAM2</title>
    <filename>a00562.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; gtsam::SymmetricBlockMatrixBlockExpr&lt; SymmetricBlockMatrixType &gt; &gt;</name>
    <filename>a00235.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>gtsam</name>
    <filename>a00290.html</filename>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <class kind="class">gtsam::ConcurrentMap</class>
    <class kind="class">gtsam::DerivedValue</class>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFVector</class>
    <class kind="class">gtsam::FastList</class>
    <class kind="class">gtsam::FastMap</class>
    <class kind="struct">gtsam::FastSetTestableHelper</class>
    <class kind="class">gtsam::FastSet</class>
    <class kind="struct">gtsam::FastSetTestableHelper&lt; VALUE, typename boost::enable_if&lt; has_print&lt; VALUE &gt; &gt;::type &gt;</class>
    <class kind="class">gtsam::FastVector</class>
    <class kind="class">gtsam::GroupConcept</class>
    <class kind="class">gtsam::LieConcept</class>
    <class kind="struct">gtsam::LieMatrix</class>
    <class kind="struct">gtsam::LieScalar</class>
    <class kind="struct">gtsam::LieVector</class>
    <class kind="class">gtsam::ManifoldConcept</class>
    <class kind="class">gtsam::G_x1</class>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <class kind="class">gtsam::SymmetricBlockMatrixBlockExpr</class>
    <class kind="class">gtsam::TestableConcept</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <class kind="class">gtsam::Value</class>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <class kind="class">gtsam::Cal3_S2</class>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <class kind="class">gtsam::Cal3Bundler</class>
    <class kind="class">gtsam::Cal3DS2</class>
    <class kind="class">gtsam::Cal3Unified</class>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <class kind="class">gtsam::PoseConcept</class>
    <class kind="class">gtsam::RangeMeasurementConcept</class>
    <class kind="class">gtsam::EssentialMatrix</class>
    <class kind="class">gtsam::PinholeCamera</class>
    <class kind="class">gtsam::Point2</class>
    <class kind="class">gtsam::Point3</class>
    <class kind="class">gtsam::Pose2</class>
    <class kind="class">gtsam::Pose3</class>
    <class kind="class">gtsam::Rot2</class>
    <class kind="class">gtsam::Rot3</class>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoCamera</class>
    <class kind="class">gtsam::StereoPoint2</class>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <class kind="class">gtsam::TriangulationFactor</class>
    <class kind="class">gtsam::Unit3</class>
    <class kind="class">gtsam::BayesNet</class>
    <class kind="class">gtsam::FactorGraph</class>
    <class kind="class">gtsam::ClusterTree</class>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <class kind="class">gtsam::Conditional</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="class">gtsam::Factor</class>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::ordering_key_visitor</class>
    <class kind="class">gtsam::compose_key_visitor</class>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <class kind="class">gtsam::ISAM</class>
    <class kind="class">gtsam::JunctionTree</class>
    <class kind="class">gtsam::LabeledSymbol</class>
    <class kind="class">gtsam::Ordering</class>
    <class kind="class">gtsam::Symbol</class>
    <class kind="class">gtsam::VariableIndex</class>
    <class kind="class">gtsam::VariableSlots</class>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="class">gtsam::Assignment</class>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <class kind="class">gtsam::DiscreteConditional</class>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <class kind="class">gtsam::DiscreteFactor</class>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <class kind="class">gtsam::Potentials</class>
    <class kind="class">gtsam::Signature</class>
    <class kind="class">gtsam::ConjugateGradientParameters</class>
    <class kind="class">gtsam::Errors</class>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <class kind="class">gtsam::GaussianConditional</class>
    <class kind="class">gtsam::GaussianDensity</class>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <class kind="class">gtsam::GaussianFactor</class>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <class kind="class">gtsam::GaussianISAM</class>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::Scatter</class>
    <class kind="class">gtsam::HessianFactor</class>
    <class kind="struct">gtsam::CGState</class>
    <class kind="class">gtsam::System</class>
    <class kind="class">gtsam::IterativeOptimizationParameters</class>
    <class kind="class">gtsam::IterativeSolver</class>
    <class kind="class">gtsam::JacobianFactor</class>
    <class kind="class">gtsam::KalmanFilter</class>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <class kind="class">gtsam::Sampler</class>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <class kind="class">gtsam::SubgraphSolverParameters</class>
    <class kind="class">gtsam::SubgraphSolver</class>
    <class kind="class">gtsam::VectorValues</class>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::DoglegState</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GaussNewtonState</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="class">gtsam::ISAM2Clique</class>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <class kind="class">gtsam::LevenbergMarquardtState</class>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::JointMarginal</class>
    <class kind="class">gtsam::NonlinearConjugateGradientState</class>
    <class kind="class">gtsam::NonlinearConjugateGradientOptimizer</class>
    <class kind="class">gtsam::NonlinearEquality</class>
    <class kind="class">gtsam::NonlinearEquality1</class>
    <class kind="class">gtsam::NonlinearEquality2</class>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <class kind="class">gtsam::NonlinearISAM</class>
    <class kind="class">gtsam::NonlinearOptimizerState</class>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <class kind="class">gtsam::ValueCloneAllocator</class>
    <class kind="struct">gtsam::_ValuesKeyValuePair</class>
    <class kind="struct">gtsam::_ValuesConstKeyValuePair</class>
    <class kind="class">gtsam::Values</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <class kind="class">gtsam::AntiFactor</class>
    <class kind="class">gtsam::BearingFactor</class>
    <class kind="class">gtsam::BearingRangeFactor</class>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <class kind="struct">gtsam::SfM_Track</class>
    <class kind="struct">gtsam::SfM_data</class>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <class kind="class">gtsam::EssentialMatrixFactor</class>
    <class kind="class">gtsam::EssentialMatrixFactor2</class>
    <class kind="class">gtsam::EssentialMatrixFactor3</class>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <class kind="class">gtsam::ImplicitSchurFactor</class>
    <class kind="class">gtsam::JacobianFactorQ</class>
    <class kind="class">gtsam::JacobianFactorQR</class>
    <class kind="class">gtsam::JacobianFactorSVD</class>
    <class kind="class">gtsam::JacobianSchurFactor</class>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <class kind="class">gtsam::PriorFactor</class>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <class kind="class">gtsam::RangeFactor</class>
    <class kind="class">gtsam::ReferenceFrameFactor</class>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <class kind="class">gtsam::RotateFactor</class>
    <class kind="class">gtsam::RotateDirectionsFactor</class>
    <class kind="class">gtsam::SmartFactorBase</class>
    <class kind="class">gtsam::SmartProjectionFactorState</class>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <class kind="class">gtsam::GenericStereoFactor</class>
    <member kind="function">
      <type>Key</type>
      <name>symbol</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a7cd266db68d8146af3b9b1630d4b700b</anchor>
      <arglist>(unsigned char c, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>symbolChr</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a9ca9499e881d22361b4833c2854d941f</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>symbolIndex</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a901c06d89d5c4ba46d926a86b307f271</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lineSearch</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a0ceb9e5a5e864b96c529db67f55a873b</anchor>
      <arglist>(const S &amp;system, const V currentValues, const W &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; V, int &gt;</type>
      <name>nonlinearConjugateGradient</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>aab113d562c7adc22b450c056b8155f3c</anchor>
      <arglist>(const S &amp;system, const V &amp;initial, const NonlinearOptimizerParams &amp;params, const bool singleIteration, const bool gradientDescent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compare</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a544e7c98a6f6224e5cbcd71f4646c52b</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>transform_point</name>
      <anchorfile>a00290.html</anchorfile>
      <anchor>a80d640f59e5d39a1165069a3841cc5d1</anchor>
      <arglist>(const T &amp;trans, const P &amp;global, boost::optional&lt; Matrix &amp; &gt; Dtrans, boost::optional&lt; Matrix &amp; &gt; Dglobal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentMap</name>
    <filename>a00035.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab8ff3bd589931dfcf0270d4d34087253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a00df2b0e065bb753f3f58328b3a32355</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a32688fb734dda9eb9b437f9c63c84893</anchor>
      <arglist>(const ConcurrentMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a7480e044beeb4638fe108d77ff2a0e0e</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>af74e136510c505caad8dd7f05d51c871</anchor>
      <arglist>(const KEY &amp;e) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DerivedValue</name>
    <filename>a00048.html</filename>
    <templarg>DERIVED</templarg>
    <base>gtsam::Value</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const DERIVED &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator DERIVED &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac338307bb9f00cd29a70a48058069458</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a21e0a839ddaabd4c56559684ff887efe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a616a94e2ce8e99e732d5ceb9af00632c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; DERIVED &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; DERIVED &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFBase</name>
    <filename>a00065.html</filename>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af0274a9e27844450d42dd02ebc3ff34f</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a7ad36282110651ed9939c8bf8e890425</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>find</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aa8cf5cc8ee48bddec32e7a5eea409a16</anchor>
      <arglist>(size_t key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a721b4f56885d28096e1ca598abbd7c9c</anchor>
      <arglist>(const size_t &amp;i1, const size_t &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>findSet</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae4875cce69ea9fa02f0ca600c4db9bf3</anchor>
      <arglist>(size_t key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeUnionInPlace</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>af250dcad43fe46fd6b1b92ccabcda182</anchor>
      <arglist>(const size_t &amp;i1, const size_t &amp;i2)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; size_t &gt;</type>
      <name>V</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>aeecd94c025c092012570bb2f82f9d2c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFVector</name>
    <filename>a00066.html</filename>
    <base>gtsam::DSFBase</base>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>abd90fd03747876b5fb43df6432ac5ad5</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>af88896d4b3454f8fdb10b60b4fa8d5ff</anchor>
      <arglist>(const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ac37c745fe9ba94201ca653d155d085d0</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in, const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleton</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a52680e6029360fad95af14eb49b0e197</anchor>
      <arglist>(const size_t &amp;label) const </arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; size_t &gt;</type>
      <name>set</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aa28dbc5e16ce90c00e625a307b89d52f</anchor>
      <arglist>(const size_t &amp;label) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::set&lt; size_t &gt; &gt;</type>
      <name>sets</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>add08caebc62b3edcbf5e7521385d04d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::vector&lt; size_t &gt; &gt;</type>
      <name>arrays</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a8aaa0b8d2c8ca466acb602226f8d971e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastList</name>
    <filename>a00087.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4ddfad84c21aa8e028650085d28e64e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4b392c0cdea93c6af52956ccf6282f44</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a64ede4dd260eb040bf895828796af872</anchor>
      <arglist>(const FastList&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad71cc6bc403f46960f54c75bc956093f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; VALUE &gt;</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2601b4ee832bd26d8fc74630a4f55d7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastMap</name>
    <filename>a00088.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; KEY, VALUE &gt;</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8df951acad6f080ce8f19422f6df6ce4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a897d43dde7fcaa7a83bd26c9883fa841</anchor>
      <arglist>(const KEY &amp;e) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FastSetTestableHelper</name>
    <filename>a00090.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FastSet</name>
    <filename>a00089.html</filename>
    <templarg>VALUE</templarg>
    <templarg>ENABLE</templarg>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac1da3034bde1cdffe23e3b75f16bd7f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0d58e4ec36474633ba28c3f6088bd48c</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a11137f0ca264b22890896f964cccffa4</anchor>
      <arglist>(const INPUTCONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac04529e1f22ae96d9d3b13aa1f7c8c82</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2bac867c14c4a0a23c53e4024bb8204f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; VALUE &gt;</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2ba1e3fd1ef8041b1456933f83bcf96b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a40ed1f2d12526b3bd8e6f386ebfb5400</anchor>
      <arglist>(const VALUE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ade4a347c0b0ddf442aa5a0ba9e54d9e3</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ab42dedc6cbf2ed3125d772d7cb3dc400</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a86b9f6ad55964168aefd58d47f43e62e</anchor>
      <arglist>(const FastSet &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FastSetTestableHelper&lt; VALUE, typename boost::enable_if&lt; has_print&lt; VALUE &gt; &gt;::type &gt;</name>
    <filename>a00091.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FastVector</name>
    <filename>a00092.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a6d46ba697dd4b689e51e01cf8f6049df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac77cf2ace565dd43f055863ee2b47a6d</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a222bbe24a51a49dc0137c6a7675da7b0</anchor>
      <arglist>(size_t size, const VALUE &amp;initial)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>acbd72f6b8c6fdeb64851b99e6fab270d</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a54101525d9dc8e55a94421b8f6a383f4</anchor>
      <arglist>(const FastList&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a0d7caa9ea228333e8d0f6c2d994dec64</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a896e4c27af1b747db7e89036c4fbdd97</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastVector</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a15ad3bbd0e9d53d9a591b0164f9d6b11</anchor>
      <arglist>(const std::vector&lt; VALUE, ALLOCATOR &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; VALUE &gt;</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a23f8151b63fea4235ac4e5de8a91e505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GroupConcept</name>
    <filename>a00114.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::LieConcept</name>
    <filename>a00149.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::LieMatrix</name>
    <filename>a00150.html</filename>
    <base>DerivedValue&lt; LieMatrix &gt;</base>
    <member kind="function">
      <type>LieMatrix</type>
      <name>compose</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>afc3e300f25e59fea3ebcf04f2eecb05e</anchor>
      <arglist>(const LieMatrix &amp;p, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieMatrix</type>
      <name>between</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>afd0956e44fe53d3baf2f33cd325cf437</anchor>
      <arglist>(const LieMatrix &amp;l2, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieMatrix</type>
      <name>inverse</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ad402dfbd6f0ec72588a8da076e91bb8c</anchor>
      <arglist>(boost::optional&lt; gtsam::Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieMatrix</type>
      <name>identity</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>afe8b9dbe01281d0bbe09ea00c827fd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>af2f0438c9561cc2de279c72f79846b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a1d59a21a79dd2473a191b783ea9b9a6e</anchor>
      <arglist>(const Matrix &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ae81a690ac94cd2de39d61560f36b7d6a</anchor>
      <arglist>(const Eigen::Matrix&lt; double, M, N &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieMatrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a77eaf4f6821e5a7591c2dad643a9bbf0</anchor>
      <arglist>(size_t m, size_t n, const double *const data)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a962769a6e169ed16af3aedeede5b3a3d</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a43fa42d8a1dc36a32826020c1e37033a</anchor>
      <arglist>(const LieMatrix &amp;expected, double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a9e1e51c74f1407a274d7bf2afe3d6239</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a5bf3b551d5af0cf3161f8369d35d863a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LieMatrix</type>
      <name>retract</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a3f6a96c64fc153d405bfe34a3cec55d1</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ad3c2ea4c7d4fb7cd72abc321cd09e7e5</anchor>
      <arglist>(const LieMatrix &amp;t2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const LieMatrix &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator LieMatrix &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieMatrix</type>
      <name>Expmap</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aa20b4cb1766ee351930db4057bc74108</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>abae020fdf642cf2699d2f67b89faf087</anchor>
      <arglist>(const LieMatrix &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; LieMatrix &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; LieMatrix &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::LieScalar</name>
    <filename>a00151.html</filename>
    <base>DerivedValue&lt; LieScalar &gt;</base>
    <member kind="function">
      <type></type>
      <name>LieScalar</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aacc0e2ffe68a67faa299a761c045d919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieScalar</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad9ca66507aa7ef0c2a0178f437657608</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aa6d79eb035b1d28d98f3a3a57333bef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a63afe1a06c6eb428751c484da70aea2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a9db748a024893462fa4b5201568bc889</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a3697548fa8f1477a42b0ebad72a62297</anchor>
      <arglist>(const LieScalar &amp;expected, double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a81bd59ca3fd476a0814abe772979c1de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LieScalar</type>
      <name>retract</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aad28bc92cb3e9b66a87655ee83db910f</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>abcab1e33c0eff4cb712c555465989740</anchor>
      <arglist>(const LieScalar &amp;t2) const </arglist>
    </member>
    <member kind="function">
      <type>LieScalar</type>
      <name>compose</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a56094b57ea2d38372a3d3e45bfd69694</anchor>
      <arglist>(const LieScalar &amp;p, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieScalar</type>
      <name>between</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a7f7a063ba5c3c1a8af3496782c9ecf40</anchor>
      <arglist>(const LieScalar &amp;l2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieScalar</type>
      <name>inverse</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a9c6ee3d5565e7e64a4d2541352c8f44d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const LieScalar &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator LieScalar &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieScalar</type>
      <name>identity</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ae80aa456fe6b59bcbbafeac484ebab8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieScalar</type>
      <name>Expmap</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a731f8273a9e9415657711ceafaa2efa9</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aaf9017afd54bf405926d1d50855b68ec</anchor>
      <arglist>(const LieScalar &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>dexpL</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a940d3d0807edb89b77504137bd36d51a</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>dexpInvL</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad3636b3c7e86e02fb3e12a638c91051f</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; LieScalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; LieScalar &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::LieVector</name>
    <filename>a00152.html</filename>
    <base>DerivedValue&lt; LieVector &gt;</base>
    <member kind="function">
      <type></type>
      <name>LieVector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a9b254b5ccc3e3a67922422614d2bf3fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieVector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aaaf4cefb75a72e6f4e618c9f2c6ef299</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieVector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a121bf6bb66374392f90f718de57aea45</anchor>
      <arglist>(const Eigen::Matrix&lt; double, N, 1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LieVector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a966ecac1bbf1ea607382ee701370e46f</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>LieVector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ad905eb1520021a78a1ffd8a8cd28062b</anchor>
      <arglist>(size_t m, const double *const data)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a0755e61c0171a3af86faf2a541128729</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a1199119e0c1aad2f1506ea829fcd7767</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a0278cba36a266b58536e1a843329d369</anchor>
      <arglist>(const LieVector &amp;expected, double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a9945a1bc42b2c26dd4ba2b6bbcd5a365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LieVector</type>
      <name>retract</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ac492f1317025face57c1d8a0508db997</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>ae6ca72e447d3a8b7ee76bc60c3a6f1ab</anchor>
      <arglist>(const LieVector &amp;t2) const </arglist>
    </member>
    <member kind="function">
      <type>LieVector</type>
      <name>compose</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a9246cec9267b751f83e704eec97b8c65</anchor>
      <arglist>(const LieVector &amp;p, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieVector</type>
      <name>between</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a8d89868162cb025025913421db38e23e</anchor>
      <arglist>(const LieVector &amp;l2, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>LieVector</type>
      <name>inverse</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a0ba7b63915df4ea671038553a193122e</anchor>
      <arglist>(boost::optional&lt; gtsam::Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const LieVector &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator LieVector &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieVector</type>
      <name>identity</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a8c2dcb273f85db5764e195ad59791479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LieVector</type>
      <name>Expmap</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aa46c2f0081d7e06ddf9dfaa05f07fcc0</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a2aff1fa2eb0602c99d1d8963e87f7876</anchor>
      <arglist>(const LieVector &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; LieVector &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; LieVector &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ManifoldConcept</name>
    <filename>a00155.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::G_x1</name>
    <filename>a00094.html</filename>
    <templarg>X1</templarg>
    <templarg>X2</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::SymmetricBlockMatrix</name>
    <filename>a00228.html</filename>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aba9a0daa86b53c16e36653a816328672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aa4cfb90a88b42bfab8c7f2c1a73d6f32</anchor>
      <arglist>(const CONTAINER &amp;dimensions, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ab8db4e43a8c4ab7a16a7131b2546ea3f</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a90f73296bb635ad9bc431949446a33f2</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Matrix &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a870ccb14397b0ceb019cc0556c9fc9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a05e8dbbaa3e5c1b577b05304f0fde7ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a7255f6104a48232957a5032f7b2ddd2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>operator()</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a8d266b28e34b77ba34a5d6fabecedd57</anchor>
      <arglist>(DenseIndex i_block, DenseIndex j_block)</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>operator()</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>acfcde59f30cd3d8464cc4fdbdc067ef6</anchor>
      <arglist>(DenseIndex i_block, DenseIndex j_block) const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>range</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a26709d12a0499b8457811909f8ee6341</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock)</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>range</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a48187a97d0a3e247fbba6034f4e16a34</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock) const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a03e5eba7102a7206182589369819a52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>full</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aab23e8d233ccd73a589f2a9a7436c3ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; const Matrix, Eigen::Upper &gt;</type>
      <name>matrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a69a057c136cda6ced710753e6b2da6da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Matrix, Eigen::Upper &gt;</type>
      <name>matrix</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a02ed3492508215334d059b2401e7ad0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>offset</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>acf37322a699aa328aa134bbe789f8a75</anchor>
      <arglist>(DenseIndex block) const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>blockStart</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a0f64f9587604cc79af5880a47d4301a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>blockStart</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a410396af890196580b48fb91fb8c7476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix</type>
      <name>choleskyPartial</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a29dd5a31e5324ea8a30a330fb9ee5801</anchor>
      <arglist>(DenseIndex nFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ad28c4699e481a4b6db09067f420b925a</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a6d9d6334c117ed8800872198172986ec</anchor>
      <arglist>(const VerticalBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a1df0e505b1794511838609da2d5ea712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ae2d97054785689660b75c3a1f6d5a552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a060d00933c1f670fa1d4ac50592b79a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CholeskyFailed</name>
    <filename>a00031.html</filename>
    <base>ThreadsafeException&lt; CholeskyFailed &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymmetricBlockMatrixBlockExpr</name>
    <filename>a00229.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrixBlockExpr</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a2e5661df040e7af16bf10920935805e5</anchor>
      <arglist>(SymmetricBlockMatrixType &amp;blockMatrix, Index iBlock, Index jBlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrixBlockExpr</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8ff95d8f69725415c9f4129e0d1c78de</anchor>
      <arglist>(SymmetricBlockMatrixType &amp;blockMatrix, Index firstRowBlock, Index firstColBlock, Index rowBlocks, Index colBlocks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrixBlockExpr</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab88d357a9e44fc7c9e4b0bd3d6ba962c</anchor>
      <arglist>(SymmetricBlockMatrixType &amp;blockMatrix, Index firstBlock, Index blocks, char dummy)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrixType &amp;</type>
      <name>xpr_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a949b1f918b6de192ccac12b21f93b59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>densei_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a16d70c704ddff56c166b26aa6054b67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>densej_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab98ac8c101e304974dc09521240450ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>denseRows_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ae7567810b6a6900bc6b4eaf4b0d7a99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>denseCols_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>acd01db15e65e28811ce8919100ecb72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>enum gtsam::SymmetricBlockMatrixBlockExpr::BlockType</type>
      <name>blockType_</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa5837466ff4293edc9717f12288264ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TestableConcept</name>
    <filename>a00232.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals</name>
    <filename>a00073.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals_star</name>
    <filename>a00074.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector</name>
    <filename>a00038.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a00039.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a00040.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValueWithDefault</name>
    <filename>a00248.html</filename>
    <templarg>T</templarg>
    <templarg>defaultValue</templarg>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a530bf5ddc21562989ee4427ef44e520b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a54bbbf7380c6a54aa696a8a7fe803f0e</anchor>
      <arglist>(const T &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a5a901ea7687199af8905a6fd03bd974b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a21066a28075788cbd352775afb252b93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>aad41e89de5efa7a20eb6c29f693e23fa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ListOfOneContainer</name>
    <filename>a00154.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ThreadsafeException</name>
    <filename>a00233.html</filename>
    <templarg>DERIVED</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RuntimeErrorThreadsafe</name>
    <filename>a00208.html</filename>
    <base>ThreadsafeException&lt; RuntimeErrorThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>RuntimeErrorThreadsafe</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>aa618fffc79e001904f7d53e0f27a29fd</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OutOfRangeThreadsafe</name>
    <filename>a00183.html</filename>
    <base>ThreadsafeException&lt; OutOfRangeThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>OutOfRangeThreadsafe</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>abc191cc95d1df7bb9e9fcf7edb857162</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidArgumentThreadsafe</name>
    <filename>a00120.html</filename>
    <base>ThreadsafeException&lt; InvalidArgumentThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentThreadsafe</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a5b59c8bf5a4f3ed5ab5a3bdc4bb0dad2</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TbbOpenMPMixedScope</name>
    <filename>a00231.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Value</name>
    <filename>a00242.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a9b578b29ce7b2872ca532cdf96854920</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5a0554b9e0758f370073ea3cc5cf1c9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aa3ec8ef9fa4bc6f9590bfb2151012a3c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a74edb2709fe745b6d09087f6aacf507f</anchor>
      <arglist>(const Value &amp;other, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aca2f044f9b44143168f6ff7bcc6da56a</anchor>
      <arglist>(const Vector &amp;delta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a83429f15b4f68ed92e976649ea52da97</anchor>
      <arglist>(const Value &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac42742c00b07fe17277824c301a8df10</anchor>
      <arglist>(const Value &amp;rhs)=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VerticalBlockMatrix</name>
    <filename>a00253.html</filename>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a04d12c23c8c6a3179416ca49da794c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a20f3454d88ad93367250ea900c84c53d</anchor>
      <arglist>(const CONTAINER &amp;dimensions, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>abc0d3ebc980997bb1431888e8858b4c9</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Matrix &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a78d48e3b5eb2fc89705be918eb25652e</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aa3ed353681d04784422972f67368e769</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>af88626f8c27402f70769acc958f19d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ab47b81f5a668d522172394acd8b769ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>operator()</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a57657389622cd5e1b6e377dfecf7cbfa</anchor>
      <arglist>(DenseIndex block)</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>operator()</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a631914fa6877c2553e17fe5a864c20d0</anchor>
      <arglist>(DenseIndex block) const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>range</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a0a7317cdb1c8e0fc2d2dcb3e02dd651b</anchor>
      <arglist>(DenseIndex startBlock, DenseIndex endBlock)</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a09283eb4c95f331eae17164dd632d089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>full</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aa8b90df6a8a509856a48f6c802516ffe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowStart</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a41f491da8f2960c56e8227874e6b8775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowEnd</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a758a9979e567d6d4508d2176f3ce9f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>firstBlock</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a65aeaadcfdc0b3bbee817a0c11b998e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rowStart</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a6bacd686b4cc342661d8ca6d3e2067d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rowEnd</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae1687f38dc77f2bde667e6164f987baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>firstBlock</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ab5b0cb31574c09a370d4182939bbd00e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>abd6199b988cbcd69f2b4ea2b58f61731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae6fee4b1b2759b92da62acfc041a6a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae5ca2474a54f3212d7e73b3e904b8692</anchor>
      <arglist>(const VerticalBlockMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ad36f9b381dc3876995eb06c03e8667fd</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;rhs, DenseIndex height)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aaac69a1919d004647db02fab5b0cb0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae7ec144e787509009c3fb0f284b94a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowStart_</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac17eb9545a5eb49245a4ed598c3cfbd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowEnd_</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a30f8297f16323a7471154f7eb9f2828a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac6d96c30337e9378bcc7ac223b9d0d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2</name>
    <filename>a00021.html</filename>
    <base>DerivedValue&lt; Cal3_S2 &gt;</base>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5983d694b6fedd84ddcba0763df076ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>retract</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad10b48dffb933a6d268a871af45d49e6</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a1fc3835d94edae5990151aa47d95a5dd</anchor>
      <arglist>(const Cal3_S2 &amp;T2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a9be7a853d441efe66a254233e3137471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ac9978a1a4bdae33286f57b9277b18c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6f59c7c3f3e8782b2b4e1d71cd289d4b</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a76de30dafa79de4cea55531481e9225c</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ae7de8f587615c7b0909c06df658e96e5</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5ad69bd9898195b4ee05cf86086c02f9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a2716f7457cab5b2b91635a13de25fb32</anchor>
      <arglist>(const std::string &amp;s=&quot;Cal3_S2&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ac324b73efc0477e6b2edf75b25b1c196</anchor>
      <arglist>(const Cal3_S2 &amp;K, double tol=10e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5115648250b70c2a620efe05282d16c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6bd0bc5f84d0c0c561f329237aa3965e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a681d33fab3131d62375067e003bf5584</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a743e5809541e4f56ccf466f3d97d7720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6ccd356108932082ebe3ae507596d9a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a4d46bac3806c6a628f7ef281005f7cb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a573a36678cf8216a9152459b8f15fe0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>K</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5f50899c2bd79a64dfe740eda43e927e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a94cba6823ffa8cc7673d291e10077285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix_inverse</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad2da3a617040c0fb7f7f23492328aaae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aae8cac3b56ab6a9723515fe0d190e933</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none, boost::optional&lt; Matrix &amp; &gt; Dp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a363e8912d874c969f2aec31843c45a5a</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ade71b27906f02e7819a4c5e7aa3cf433</anchor>
      <arglist>(const Vector3 &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Cal3_S2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Cal3_S2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6748b9fdff7627d55b9874234172cee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Cal3_S2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Cal3_S2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2Stereo</name>
    <filename>a00022.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a647d635956e27a9e0a94fc74a2e904fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2ca55987f036f43be6bed31b7766ab27</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1077828f44ebbc1f92a8bea478666dc0</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a26ac3afe99c13952e15efa61924e67af</anchor>
      <arglist>(const Cal3_S2Stereo &amp;other, double tol=10e-9) const </arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2 &amp;</type>
      <name>calibration</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ae47c52136165e0df0c41cfdd77aef613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>abf7b0a825d61b8bf7b5dc81e574436b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8928b0fced2c2b075540ce52a446190b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a95cb991e40ef3665589268c31c7609b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a53da4644e3647c27571145e910fd92b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0e23e45f807db02a97987e86824505b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0236e4c78538b81da3bd5255a1aadbbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ad66303acae54a0d93ea7eb38a8c329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a33ad8acb5cdbed7072027d85ee9ee42a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cal3_S2Stereo &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aef66cac91adf5a99a61b12ec0305a028</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Bundler</name>
    <filename>a00023.html</filename>
    <base>DerivedValue&lt; Cal3Bundler &gt;</base>
    <member kind="function">
      <type>Cal3Bundler</type>
      <name>retract</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a28800f5e88326979b2f08d5ce83003d3</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abe00f46becaf763245ea9b6ddd048f9e</anchor>
      <arglist>(const Cal3Bundler &amp;T2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aa8fa4a727c88a01b03d3d18291835fac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>af5790ae1df63a0bb946553657c4b9c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7938e2594fda649315ec00539c9f5946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a5d3a2efcf7e0f0d1bff9362757036e81</anchor>
      <arglist>(double f, double k1, double k2, double u0=0, double v0=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0357b2d8ab01596fe087287f00c6c240</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a888b2f4c5407f47c3a4e8f1853d88fe8</anchor>
      <arglist>(const Cal3Bundler &amp;K, double tol=10e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>K</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae3db5f0337c8f21c47b9b6be3b897406</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>k</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a51192aea479242eff34f0dfedc283e76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3f3efadde8972ef7fd49033d3dc7ccb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae9ec5ecf637c0232649013dc48eccd15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a143fa59dc0d9305b0165ff7051ab10d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c976b1ae9b359b284a2774f8201ef5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>u0</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a5d61b99293b7c031df4fe7215a27db70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v0</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a25426a423540dc8f6f3dcda26174ce32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aee1353fc76b794b8a0bf5f4633f5108e</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none, boost::optional&lt; Matrix &amp; &gt; Dp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7d46e33e78e3059d7109d66cbd86128a</anchor>
      <arglist>(const Point2 &amp;pi, const double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>afbe94542c968e8dbeea47ac8f701703d</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>D2d_calibration</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac07683028d58c8c64c12754ae9c4a2eb</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>D2d_intrinsic_calibration</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a5cc05dd3bbabb8a9ab47e849ac591c65</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Cal3Bundler &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Cal3Bundler &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Cal3Bundler &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Cal3Bundler &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3DS2</name>
    <filename>a00024.html</filename>
    <base>DerivedValue&lt; Cal3DS2 &gt;</base>
    <member kind="function">
      <type>Cal3DS2</type>
      <name>retract</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a893674c5f6f47307832b90b72c98437e</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a98b3f24233d7c8a92ac70193b04a620f</anchor>
      <arglist>(const Cal3DS2 &amp;T2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a859b7ca40672d07760f778c05d066b3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abd94361657d8a101d46ca527940dd502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a416fd0c0b79c280d6d5336a9e0964900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a88d98ad712fd8b35efaec1caf0431605</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a55e1d8365fe77ffcd9ec35c840c2ddec</anchor>
      <arglist>(const Cal3DS2 &amp;K, double tol=10e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adb23306c880d35a1e5afaddabb6f8c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ade81cdd303ba9eba78086b812aa343eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af4b8af6fed87871735453dd499308421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9937c265ef0f8ffe7df732236a14cd55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aaa2351ce7c8a32f87ad3a2acb211d5c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad5a16a5d23c37a444f068253eeda52f8</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none, boost::optional&lt; Matrix &amp; &gt; Dp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a51455289e9f3171472e550204b3bbf19</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a823d49808d33f51cd7d6a1ae27f4a933</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>D2d_calibration</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>adc2bd5cf09177f6990467748d534ebc2</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Cal3DS2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Cal3DS2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Cal3DS2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Cal3DS2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Unified</name>
    <filename>a00025.html</filename>
    <base>gtsam::Cal3DS2</base>
    <member kind="function">
      <type>Cal3Unified</type>
      <name>retract</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a3c2bf04b435e551a82cfeaa46beac342</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>afd0a9a958b30748aa6ee9ace4fce1aeb</anchor>
      <arglist>(const Cal3Unified &amp;T2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1179fcbd4c614772df5951b60c3b3216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af74f4e76f00451bbd751ff42786df828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Unified</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aef2a791c3ba89ab087e104459fa1b20d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>afe7b2bd11a202ccf73d21e18b04ee065</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af7afdd3456f8bd0ea6d28ef0d5fa4887</anchor>
      <arglist>(const Cal3Unified &amp;K, double tol=10e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a1f6df33c322cd00e63233b8ed705fbfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa2cd00a9ba3d629d40efe614cba7a92f</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none, boost::optional&lt; Matrix &amp; &gt; Dp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a7bc7cb121bf7877cd72519f6da2a6639</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>spaceToNPlane</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4d3bfbc34df5f9ee8d542262781b7583</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>nPlaneToSpace</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aad81f5c5d28a0442c0cdbe1576ecccbb</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CheiralityException</name>
    <filename>a00029.html</filename>
    <base>ThreadsafeException&lt; CheiralityException &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CalibratedCamera</name>
    <filename>a00026.html</filename>
    <base>DerivedValue&lt; CalibratedCamera &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CalibratedCamera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab3e14367e42bcc0d48495862c48aed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a7a87a24dcd3938bbac6f3be69b0b7a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CalibratedCamera</type>
      <name>compose</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad0c22666ca703101ca2f162f19e4505d</anchor>
      <arglist>(const CalibratedCamera &amp;c, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const CalibratedCamera</type>
      <name>between</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aec44da5b8193179e1e9c5451f4c4305f</anchor>
      <arglist>(const CalibratedCamera &amp;c, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const CalibratedCamera</type>
      <name>inverse</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad658af193eb75833f2d09046a8eac73c</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H1=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Level</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a816481e5b3be92b94f1ba0371806a2d6</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function">
      <type>CalibratedCamera</type>
      <name>retract</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a28c3e675c174ef4aaed17141b5e4db5a</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af0d0805490b60de68e89c69f73621494</anchor>
      <arglist>(const CalibratedCamera &amp;T2) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>abcdf12b7562d18127af2c54ab116cea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab6bda69b20fd92ca4de15ef9eac594bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab570ea7e8816488553524b801695d847</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a71a9db288318d37178a972a806dab8bc</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aafd977f1fb0bfdb037aa6aa2367bfd31</anchor>
      <arglist>(const Pose3 &amp;pose, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ade847baf7be229b1843427138207ec63</anchor>
      <arglist>(const CalibratedCamera &amp;camera, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>project_to_camera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae405d666990330074ad4381a1ba92f20</anchor>
      <arglist>(const Point3 &amp;cameraPoint, boost::optional&lt; Matrix &amp; &gt; H1=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>backproject_from_camera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aee68c0ac4658ae9f7d97e6c14c4d2b5d</anchor>
      <arglist>(const Point2 &amp;p, const double scale)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a5b59414e39297638751de5f43b293798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae9607d9d9ef98835b38d0fb494eba191</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a88d317a781597e5243bb7995df07d9cc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af17bee12dcd1359fb6d0a818c72a9e29</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a5ebad87ab29b6f9cecf54ed82d856b31</anchor>
      <arglist>(const CalibratedCamera &amp;camera, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const CalibratedCamera &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator CalibratedCamera &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; CalibratedCamera &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; CalibratedCamera &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseConcept</name>
    <filename>a00190.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeMeasurementConcept</name>
    <filename>a00197.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrix</name>
    <filename>a00076.html</filename>
    <base>DerivedValue&lt; EssentialMatrix &gt;</base>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>FromPose3</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a714a3061f7b9b9f266d2319cc61be594</anchor>
      <arglist>(const Pose3 &amp;_1P2_, boost::optional&lt; Matrix &amp; &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>Random</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a4b3fdce1e82ffb2901e53ed9bc5a7aba</anchor>
      <arglist>(Engine &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a29e768b352dff0cec0e50199663fd18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a7ab38f00c9e4e460827a09b02c9e0f20</anchor>
      <arglist>(const Rot3 &amp;aRb, const Unit3 &amp;aTb)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa80bef5fb8e29f3f661bb2a0fe2cf6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ad22b073f0d0c70ad396ae0b33d66a792</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual EssentialMatrix</type>
      <name>retract</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a8a49aea55277f23a2f3d3328d5e49475</anchor>
      <arglist>(const Vector &amp;xi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a3c12ddba98a5ae99e625f44589f40083</anchor>
      <arglist>(const EssentialMatrix &amp;other) const </arglist>
    </member>
    <member kind="friend">
      <type>friend EssentialMatrix</type>
      <name>operator*</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a08d715b14a2db37464e532fa79430466</anchor>
      <arglist>(const Rot3 &amp;cRb, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ab635a197ecddd49166e95623258b8249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Unit3 &amp;</type>
      <name>direction</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a4d2f3b7e2eef26255ea2bc80e85f0f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>matrix</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1160a8a78e512ed394d37979e683bdae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transform_to</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aa4ed4b6424865d9ac3c9ab601bc3fbca</anchor>
      <arglist>(const Point3 &amp;p, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>EssentialMatrix</type>
      <name>rotate</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a1b8757b331f85c8782a41731f26f1603</anchor>
      <arglist>(const Rot3 &amp;cRb, boost::optional&lt; Matrix &amp; &gt; HE=boost::none, boost::optional&lt; Matrix &amp; &gt; HR=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ac309887d5725c2c54afaeba109064ea0</anchor>
      <arglist>(const Vector &amp;vA, const Vector &amp;vB, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a5af8633f20a23db3ac2d874b5eb185bb</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>af71be065a16bd56bbe7389136039771a</anchor>
      <arglist>(const EssentialMatrix &amp;other, double tol=1e-8) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const EssentialMatrix &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator EssentialMatrix &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Homogeneous</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a6ed61d03d5fdb4bcc8f7cc754eef6481</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a01687a93a35e17a5c493130db27500aa</anchor>
      <arglist>(std::ostream &amp;os, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ac8cac659ce98eebe9ff74dce493ebb7d</anchor>
      <arglist>(std::istream &amp;is, EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; EssentialMatrix &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; EssentialMatrix &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeCamera</name>
    <filename>a00185.html</filename>
    <templarg>Calibration</templarg>
    <base>DerivedValue&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
    <member kind="function">
      <type>PinholeCamera</type>
      <name>retract</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae2f4a4ded990f44354b6c4f93f556361</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae08949854fab0334bf1855f6c69750fc</anchor>
      <arglist>(const PinholeCamera &amp;T2) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aba9b34b173f04c0d733d2582def83e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a830247e12e520b09ec15897ddd7b95fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad159dbe964dfb784ee9a64404769f611</anchor>
      <arglist>(const Point3 &amp;pw) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aaf8a37869e5ddf7ffa0e5ad0253fec51</anchor>
      <arglist>(const Point3 &amp;pw, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>projectPointAtInfinity</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a261457f842cebac3521b04475f06ff87</anchor>
      <arglist>(const Point3 &amp;pw, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none, boost::optional&lt; Matrix &amp; &gt; Dcal=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>af5aef1c477ea1a81364c0e63d11c417a</anchor>
      <arglist>(const Point3 &amp;pw, boost::optional&lt; Matrix &amp; &gt; Dcamera=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>afa747c398c4404d3514cac3d6f1c54d7</anchor>
      <arglist>(const Point2 &amp;p, double depth) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backprojectPointAtInfinity</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a7fbe9c4a7a6073a1e1e8dadaa68cf9ad</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a3d39c0fde7388ae296cd0f2a12657147</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a2f75358be9ba4e88f8e608585e91fc8e</anchor>
      <arglist>(const Pose3 &amp;pose, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpose2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a770394843354eeb86c28dcef1de70cd0</anchor>
      <arglist>(const PinholeCamera&lt; CalibrationB &gt; &amp;camera, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dother=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a88abdc0ee80168852ce72528a393ecac</anchor>
      <arglist>(const CalibratedCamera &amp;camera, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dother=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>project_to_camera</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a0835f251445a9a50156a7fe2c34ee32b</anchor>
      <arglist>(const Point3 &amp;P, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>af2d439f6216b9f80e5dc38509caee6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a491f98259acec7e03e50e93c4e26a9bb</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a4c5c98302819a067de838de6b17adaf0</anchor>
      <arglist>(const Pose3 &amp;pose, const Calibration &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a5e3e1933497f6d1e08735760db6e9b1f</anchor>
      <arglist>(const PinholeCamera &amp;camera, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>acbba6b80673e36c4a208d0bdab03c9fd</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeCamera&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a06590e72ffaf6952ef421fef216978f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aca74024cc05cf2fa726e49650c215226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>aa18eaf6446f19bb21bfbb8b03c0b3dc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a2507a92647c13bc5c40841a9e3e52ba7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PinholeCamera</type>
      <name>compose</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ab3e27553f93e73a709c10100d6cc40b8</anchor>
      <arglist>(const PinholeCamera &amp;c, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const PinholeCamera</type>
      <name>between</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ad508f98a0abefe30d77e931594d3471b</anchor>
      <arglist>(const PinholeCamera &amp;c, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const PinholeCamera</type>
      <name>inverse</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a2eb1ed8b4dd8e2a2b9f4b17b472c6247</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H1=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const PinholeCamera</type>
      <name>compose</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a7768a9f8b8f6308ebd2297413d67e3a2</anchor>
      <arglist>(const Pose3 &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const PinholeCamera&lt; Calibration &gt; &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PinholeCamera&lt; Calibration &gt; &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a4fd70e98dd6aeb348052060a70253192</anchor>
      <arglist>(const Calibration &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a4bd8045e10a47a2d036d83185bddae7a</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Lookat</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>abb3ee13749b14276c08002c4e668e3dd</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Calibration &amp;K=Calibration())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; PinholeCamera&lt; Calibration &gt; &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; PinholeCamera&lt; Calibration &gt; &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Point2</name>
    <filename>a00186.html</filename>
    <base>DerivedValue&lt; Point2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a69bec69eb57b7498c6a467c5806327f7</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::list&lt; Point2 &gt;</type>
      <name>CircleCircleIntersection</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a38288857f493a636ef4f7e7ed8bee741</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>inverse</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a0c4c5c4053afe7b92a9c8e228f06f9bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator-</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>af241e1e63fe142dea8bbc80db3078009</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>compose</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac10cf5fe0b58a9e3ddc68bb0ae6611a8</anchor>
      <arglist>(const Point2 &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator+</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a185e580b92eee7cc8d925475e9d2f791</anchor>
      <arglist>(const Point2 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>between</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a6c3d5fb21ba9ff9ce1b86ccfb1c641f0</anchor>
      <arglist>(const Point2 &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator-</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae39aa028a409c357d58fe5f9e0794db5</anchor>
      <arglist>(const Point2 &amp;q) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>identity</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae97f6facf15d612b879e02b1c5c86caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a8e9c4f72469b501f8cf39586f69e83a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>retract</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aa54a3d8657bea8c9140af9069955c87e</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aeb0d44dccd7c72ac0b60e5e0fdf10f87</anchor>
      <arglist>(const Point2 &amp;t2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a1911ab126cf75622d8ac7f5a72a50512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a23e1dc981729cfa354af8be2a7c4e6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a3b6a830ec16b87f95b354a0d001f2dc3</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a55d73e16a079e8ab8ada8c7a326de296</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a55aa480c13cdb59302ff49cd2f67059b</anchor>
      <arglist>(const Point2 &amp;q, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a42acbbb75bc38536a75c2f8b33e79f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a29b886635ab166f93a7e7b9afe1407ce</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ae476732b763460fa57771885d90bdd86</anchor>
      <arglist>(const Point2 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dist</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a3c5f03cde9f2ac6c8549a23d1f523ecc</anchor>
      <arglist>(const Point2 &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a5126760aebe26d5e078fb594b031e93e</anchor>
      <arglist>(double s) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator/</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ab3c99a764fe164be03f9b5f9db50edda</anchor>
      <arglist>(double q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a4b04ac8ff9bdcbc8b994769dd5981051</anchor>
      <arglist>(const Point2 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a825257ef2409f94714f32b59a3b7a540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a2dde3a4e47cb591857b02256bf8355e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>vector</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a690f2c05133e45dc0d93aa82d3e8c74c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Point2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Point2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>Expmap</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ad81efb9b571d6fdd2709bc48d2c2f118</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a596e8881e4897c2db79cd023ff1afe51</anchor>
      <arglist>(const Point2 &amp;dp)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>dimension</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a47391cb19624021d5c89673aaa0d0e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>abcc3001bdf3a3402179b7541e0f37c00</anchor>
      <arglist>(std::ostream &amp;os, const Point2 &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Point2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Point2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Point3</name>
    <filename>a00187.html</filename>
    <base>DerivedValue&lt; Point3 &gt;</base>
    <member kind="function">
      <type>Point3</type>
      <name>inverse</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a77705ca07a4288e4a20a8e7a91a38add</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator-</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ada7aff331becd14488242e80fc8e0f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>compose</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a54ca2d2c8f5a7a1eed5ee20d69a746f7</anchor>
      <arglist>(const Point3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator+</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ab6e2b82b6fdf3fa06e979a3ad5155397</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>between</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aacbeecb8dd72f3e6008f62e684c40673</anchor>
      <arglist>(const Point3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator-</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a8e7aa1a91da260409633ef0309cadfa7</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>identity</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ab917109e42abf9e59a1b435162a25d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac73acaf35d0709c148bbc457881e787d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>retract</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a52568749b8aa457658b49c7ad331828a</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a800a261b6d20ddfecb280bdea1f68aea</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>adace88fc442accf6d070e99887710fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a05e02b20d58a4b9a0782b9827a507f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a62aac4e184bbb9be0108c72b6c8589da</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point3</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>acc40adc5dcd975a2c8a5000818f345c6</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>af3278839f314ecbfc914902f22e50990</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a2471c86a5ea63db316d3269ffe9d33a5</anchor>
      <arglist>(const Point3 &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a24e28084aac2ade02b81f4560836b3b3</anchor>
      <arglist>(double s) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator/</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a564778259caef3b31453518067e8299f</anchor>
      <arglist>(double s) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a3d76053acb24ef690294701fc8f1a22b</anchor>
      <arglist>(const Point3 &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dist</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a48231f7b6e385588a27bfa20ea45b9a5</anchor>
      <arglist>(const Point3 &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>acf9b58b714846f8dbd91d3e9ece9eca3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a5213be0b3cb6745f53c7dfceb5a2504a</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a1742da1da74b1f7810473e33c0bc9644</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aca83f2854b525a9b985bec37c7c5b559</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a30524e90c38488890417494f8d701ef1</anchor>
      <arglist>(const Point3 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a8546f8db278dd918fe6ba8573b59b1e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a0493b915b5b6173759f233f2e5949610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac82a296f12ada3cc9b62f00096d906b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac7c4fd73f1ea197f079ff7503ea7e8be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>add</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ab315faf6af2322e42c41cd4bd99a051e</anchor>
      <arglist>(const Point3 &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>sub</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ad8db55964361c50d89c039a72bbe82ab</anchor>
      <arglist>(const Point3 &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Point3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Point3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>Expmap</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aa4131f217f6b65a2214f06adb560e5bf</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a5581493cb225cd6bc69cf4a976bfb382</anchor>
      <arglist>(const Point3 &amp;dp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>dexpL</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>adc952131b578ac128ad91488d8f50fc9</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>dexpInvL</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a64ba7d6283f556e1564b0459c06c7530</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>dimension</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>add1d42bfaf9d9d11e3c1a7e5da8612a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>ac4b9bae7be8e0277ee521c2a6b2fceb5</anchor>
      <arglist>(std::ostream &amp;os, const Point3 &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Point3 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Point3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose2</name>
    <filename>a00188.html</filename>
    <base>DerivedValue&lt; Pose2 &gt;</base>
    <member kind="function">
      <type>Pose2</type>
      <name>inverse</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac8f6305724fc7ae50f33d80f99600f14</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H1=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>compose</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3080aea96e339e2dbd82f3e88cb7aa84</anchor>
      <arglist>(const Pose2 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>operator*</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ada826a273c7e3f31d2a7aa8e455f4f58</anchor>
      <arglist>(const Pose2 &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>between</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a307bef0c11be26dfa31de3ef449a8787</anchor>
      <arglist>(const Pose2 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>identity</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a2466b7e884c66d680df22cc010934570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad82f639f584f0c034dc88db1aa2da50a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>retract</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a0a682987c167666f091ba5d89b9edf18</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aaff1fc46baa7e2c49f76676f714f6a16</anchor>
      <arglist>(const Pose2 &amp;p2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a44b7d8fb04d19d21af315487cb29b3fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>AdjointMap</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1a046b679a67700f542aad9d0d09aa12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>Expmap</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a3792fe18c62b5b13464e214d364acd6b</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a30f02766f2bc00decb634b52d8416a77</anchor>
      <arglist>(const Pose2 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>wedge</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad24507678d6e13a73033b53501b00ff6</anchor>
      <arglist>(double vx, double vy, double w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac69ac99fd5c85695bd54ffa66a3b2c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7c03eba2951842a3be922d26e2acdcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ab9d2ac29304985d9ccfd66ef0f9a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aeed938448e4b42c715527831c1ddf57a</anchor>
      <arglist>(const Pose2 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a5d0b6d7bfebdf3f4478407160f480a1a</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a698cbb45d2308207237e0a0ab6b27f2c</anchor>
      <arglist>(double theta, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ae857f3177acf6c8924aedeebafe10ede</anchor>
      <arglist>(const Rot2 &amp;r, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>afcd35e3178b6b949cc6d5e1009c5e844</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a7c1a8decfc2de14e194e1f744b969525</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a139470411f8e38b21f45eaa530e02d36</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aee21ff1482fa13afaee1ebad33e39d12</anchor>
      <arglist>(const Pose2 &amp;pose, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transform_to</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a50b0f8cec4793fec691927a7803361b6</anchor>
      <arglist>(const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transform_from</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a8eb5044dcd7ab8dbee5f5ce0ba65f370</anchor>
      <arglist>(const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad1f277706a6bd4e268e7c244db190366</anchor>
      <arglist>(const Point2 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ad0f7d000bdc8e7c691acbf8a82b55435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ae3938c57068b5ff000534cec58b92ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>aaf46c911c4dd9084eb331bd32f7e842e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>t</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a611c6b4e23af225d295f9b6ba9b05910</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>r</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>add368a02d5a4b263f3c33d667b3e46e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>translation</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a6cf3c33c1e7d8edcd4b71dfefec39c37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>rotation</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ac0a5a15c085b18abbef623313fb36780</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a9ce7f0321bc739d6abfe822ad796223a</anchor>
      <arglist>(const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ae977df3d33ad2927d0fe523636c32dd6</anchor>
      <arglist>(const Pose2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a6d85f80ad963917c1b5e55747d22b123</anchor>
      <arglist>(const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a6e97f700bb8acb7caf9f81a2ff9fa9a1</anchor>
      <arglist>(const Pose2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Pose2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Pose2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Rot2</type>
      <name>Rotation</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ab75a2a0b67f731473b712ffea2ed1593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Pose2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Pose2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3</name>
    <filename>a00189.html</filename>
    <base>DerivedValue&lt; Pose3 &gt;</base>
    <member kind="function">
      <type>Pose3</type>
      <name>inverse</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a826de115e19a172d3b4ae9c9137ed357</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H1=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>compose</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>aaf550a8d7977bfb354caedbb50911aac</anchor>
      <arglist>(const Pose3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>operator*</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ad44412fe6b13a161a56caee31ccc8a22</anchor>
      <arglist>(const Pose3 &amp;T) const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>between</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ad2853335d4b4a1b4f3d0d2936c6e2433</anchor>
      <arglist>(const Pose3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>identity</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab3eed17c04ba8a1b6fcabc17e13151df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac64ab5d63ae0ef424ce8af4b4727c3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac64ab5d63ae0ef424ce8af4b4727c3c2ad5ccf3854903e4f7ba2210412ed5b52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST_ORDER</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac64ab5d63ae0ef424ce8af4b4727c3c2aaee440dd85a9192def2c3678c4e8e266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXPMAP</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac64ab5d63ae0ef424ce8af4b4727c3c2ad5ccf3854903e4f7ba2210412ed5b52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FIRST_ORDER</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac64ab5d63ae0ef424ce8af4b4727c3c2aaee440dd85a9192def2c3678c4e8e266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>abc0bf9bf7e2d9e087dbb3273b59fb585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>retractFirstOrder</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a3ace93b1abbe9e0657b075c66fc04f91</anchor>
      <arglist>(const Vector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>retract</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a1e56f38eff4cddaa7757f693c087fb9f</anchor>
      <arglist>(const Vector &amp;d, Pose3::CoordinatesMode mode=POSE3_DEFAULT_COORDINATES_MODE) const </arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>aa1093e0e5d45c087232f9cd14ef07649</anchor>
      <arglist>(const Pose3 &amp;T2, Pose3::CoordinatesMode mode=POSE3_DEFAULT_COORDINATES_MODE) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a99ac9ec5d60bca5f45f0edf0fc0ee7d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>AdjointMap</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a2b676f86b6b19ee3da1dd68cb9446692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>Adjoint</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ae9a6e6c64226b8eda3b6b8b5b8a1f59f</anchor>
      <arglist>(const Vector &amp;xi_b) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Expmap</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a78007d7b8f4425e03565c113e3c1295f</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>Logmap</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a6615d6d8e54a1bda4e6ffb2212d7ce7e</anchor>
      <arglist>(const Pose3 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>adjointMap</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a67568214fa6f72ada29a6b470e8d652e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>adjoint</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a7d9206f460e448c457c1103dfc3adb88</anchor>
      <arglist>(const Vector &amp;xi, const Vector &amp;y, boost::optional&lt; Matrix &amp; &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>adjointTranspose</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ade5f6513b86a21dede64bf953480c72f</anchor>
      <arglist>(const Vector &amp;xi, const Vector &amp;y, boost::optional&lt; Matrix &amp; &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>dExpInv_exp</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a944d568e5fc164f45a8627fcfadce3a9</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>wedge</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a1eeb3016a5aefa1a986debf77c1a75ee</anchor>
      <arglist>(double wx, double wy, double wz, double vx, double vy, double vz)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a1952042b79a324cd3ad38057aa26dee3</anchor>
      <arglist>(std::ostream &amp;os, const Pose3 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a5a3485ff3b25ae0ce2676b48773e1bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a98841181519ca80742e6b2a3091c5b0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a14eb4114ff69f17c5251ff147a75bff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a14c25a44db9aa7dfaf7e3121b47f04c0</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a2cdb58c69c0afbea2bf74af9798b523a</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a05842ee58d3e5b7998cdd84932b71738</anchor>
      <arglist>(const Pose2 &amp;pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a3d7ad3e9bd3ea0954d4b74959b8dab0a</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a620255e6dfc92ecb1faada2d8798f48e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a5c62329e46943ab57a8c42ccb7aa9fc5</anchor>
      <arglist>(const Pose3 &amp;pose, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transform_from</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a9a18bef8c47634ed604ad2b2a9e7cb15</anchor>
      <arglist>(const Point3 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a196fb87ad8c00300451b7b0dced79e0d</anchor>
      <arglist>(const Point3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transform_to</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ad7bdad01c6f943648748d55511c460a6</anchor>
      <arglist>(const Point3 &amp;p, boost::optional&lt; Matrix &amp; &gt; Dpose=boost::none, boost::optional&lt; Matrix &amp; &gt; Dpoint=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab002809317f5ae87f9e69ac83f2ce24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ad655090bbb58183f33dace21ee89726a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab07bf40c6ef38ece1f5e8af8fd19a709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab92e2cd2ad9087fe2695ba9275953de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a002c6548fbf8f078be0808f2cec9af7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>matrix</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>aa755ea24d05cf93252fa8f722a32183e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transform_to</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>abb776630b64f3b0e05daa118c08a3675</anchor>
      <arglist>(const Pose3 &amp;pose) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a249ce9b29f2342ae1899bd77525a6b7c</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a5f63db10299ff6ba0c6419566fff26d9</anchor>
      <arglist>(const Pose3 &amp;pose, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Pose3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Pose3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Rot3</type>
      <name>Rotation</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ab8bad91d0d31f7fe4858738e257917ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Pose3 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Pose3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot2</name>
    <filename>a00204.html</filename>
    <base>DerivedValue&lt; Rot2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ae1383d61756e94cd2cbb837a00078ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>acda969716a9ad7e96bc817a22eefe83d</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromAngle</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>afb35e14b4b02f27820711c8bcc37367a</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromDegrees</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ad5570449789e34060ee8117a35fc6904</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromCosSin</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a720c06bc182de5f11c25688bd3859584</anchor>
      <arglist>(double c, double s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>relativeBearing</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a183638eae6359650f3856e6bebba7993</anchor>
      <arglist>(const Point2 &amp;d, boost::optional&lt; Matrix &amp; &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>atan2</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>afbd8489d8ff30a5acbc0c39d3e9c2040</anchor>
      <arglist>(double y, double x)</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>inverse</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a03d74f7868f3d4387f105d1cf8b5a1f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>compose</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ab0aed3ddc776ff4503f698ca8995cc42</anchor>
      <arglist>(const Rot2 &amp;R, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>operator*</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a34c1a8efb10cd3a3ae6e1e104436569b</anchor>
      <arglist>(const Rot2 &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>between</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6d1f7384fba7444a281ee584587d2649</anchor>
      <arglist>(const Rot2 &amp;R, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>identity</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a155d20b57edeebbd8c6dbb04b4d6ab1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a75f130b0d4c82ad3309e23ad14d5eb3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>retract</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a179241f565243ea9de5f0edbf34c67e6</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aacccd418a3f5bb9460342d40a062ae30</anchor>
      <arglist>(const Rot2 &amp;t2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6263dce9cde3887bed9b1900b7ec69f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a1a5b57b108fd5f6295fc8bf6c42c8017</anchor>
      <arglist>(const std::string &amp;s=&quot;theta&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>afee1838cc7ccad624418fd82b3dea707</anchor>
      <arglist>(const Rot2 &amp;R, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>rotate</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a1d82be8eb57ff156e6173b71767798da</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3b1d48c5451eb723fcafd27e1d28a004</anchor>
      <arglist>(const Point2 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unrotate</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a5521a3ce50251d5c549cd3b3d01117e6</anchor>
      <arglist>(const Point2 &amp;p, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a195de9535552159a3b1be8dba52554b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a19234f7d5eb2402b5f7bbf342c2410f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>degrees</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a989cc078b870873cfd807ad2cc86e38e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>c</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a81de300dabc9362d8be873c4b342561d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a5199287b765633a70eb30b594ee7dfa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a039022923109842b588d64eae9d36c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>transpose</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aba3cd39e3a9235e044ce8539f6df0ea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Rot2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Rot2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Expmap</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>aa3fddd817ad61b5bf82aef9b1a7a4d51</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>afa4f710c5cbf3e717bc15ce8cd305ed2</anchor>
      <arglist>(const Rot2 &amp;r)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>dimension</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a2017bc71d5c6b08cdc7218f35f959cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Rot2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Rot2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot3</name>
    <filename>a00205.html</filename>
    <base>DerivedValue&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a790096d9b3f1cd0d90a723915339d847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a5e063e8687e36f5dbaa3281b488a5f37</anchor>
      <arglist>(const Point3 &amp;col1, const Point3 &amp;col2, const Point3 &amp;col3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a933c42065af5ea1e1e3fdcd71451cd23</anchor>
      <arglist>(double R11, double R12, double R13, double R21, double R22, double R23, double R31, double R32, double R33)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a6b994c07306b4bd7b5e327d43826b750</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a252954f65c9ab822b91c2862ff871b13</anchor>
      <arglist>(const Matrix &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a439f4b2a000a5d1a1db1a493222ad2ec</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rot3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a2609eade1ee0d77c6e680e7d06e6fb5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Random</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1433ee24678d3e0524109436fd7c1fb7</anchor>
      <arglist>(boost::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rx</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aa575339f78d2aa7cf36f877120786541</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Ry</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a83da1dfe33a1a9c0ac2d10dda41a5de9</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rz</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ad7b10d122b2f4647d03c5339478e7eb4</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a8b4b86cb3b33c56ca65249eae6f3020e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1c46dcafa6e96c82d5c9a3472fb6d963</anchor>
      <arglist>(const Vector &amp;xyz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>yaw</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>abdb7d82260d803acd294156dd78bcb64</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>pitch</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a86a7f2d6bbc755608f328164d40e5af1</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>ypr</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a35ae8c05319cef862c2d0d2207f8c970</anchor>
      <arglist>(double y, double p, double r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>quaternion</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a270bcfc08292d467eda5585f67688080</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>rodriguez</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a06403524e8cba3eb4ff8e9e146d80d5a</anchor>
      <arglist>(const Vector &amp;w, double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>rodriguez</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ade042686ac535d0b91c4c045f0a73014</anchor>
      <arglist>(const Point3 &amp;w, double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>rodriguez</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>acebb41189b1fe6c686c0f23d9a829771</anchor>
      <arglist>(const Unit3 &amp;w, double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>rodriguez</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab6b304fe07da12d5dfe8119fa4682b86</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>rodriguez</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae9413c33f0fde9d8f868c184b24018a6</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>inverse</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3a9bed9dcd9644773416cef884fcb44d</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H1=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>compose</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1a9691d9a0fa5a8f5a4851560fddadc0</anchor>
      <arglist>(const Rot3 &amp;R2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>operator*</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a30645c953aae6900c746dd4599ff2157</anchor>
      <arglist>(const Rot3 &amp;R2) const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>conjugate</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a595384f9894e6c4a0ac288b9159e8d0c</anchor>
      <arglist>(const Rot3 &amp;cRb) const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>between</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aeb937880985caf992d0e693f89d9962a</anchor>
      <arglist>(const Rot3 &amp;R2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>identity</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aa1dba48999e8d2cd6bd39084ec87b28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAYLEY</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SLOW_CAYLEY</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da16e94f021c1cb118f4843eb1432b9eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXPMAP</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CAYLEY</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SLOW_CAYLEY</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da16e94f021c1cb118f4843eb1432b9eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>abdac18fc333b8046ad200234233d991c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retractCayley</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a24f40e7c3e91488345ccc027c20c0e72</anchor>
      <arglist>(const Vector &amp;omega) const </arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retract</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af0ae27974751d3a3a4ecb954b23fd859</anchor>
      <arglist>(const Vector &amp;omega, Rot3::CoordinatesMode mode=ROT3_DEFAULT_COORDINATES_MODE) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ac020313358743919cf58f61338d21d90</anchor>
      <arglist>(const Rot3 &amp;t2, Rot3::CoordinatesMode mode=ROT3_DEFAULT_COORDINATES_MODE) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a974c3ff075def66e57b363ce31b6a49c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a2fdec56434f204eb5d258379b104c9a8</anchor>
      <arglist>(std::ostream &amp;os, const Rot3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>toQuaternion</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a5f7b2445d7ddf5c51cb0a5d7e834a141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>quaternion</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab20273d630ec6911c51d2a22bc142386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>aa6e8143b053b8e256998d93a60e6613e</anchor>
      <arglist>(const std::string &amp;s=&quot;R&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a0321747717272a38a70fbaac9ab2d305</anchor>
      <arglist>(const Rot3 &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>rotate</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a2fcc54d07998040a102b65f93beb4a8c</anchor>
      <arglist>(const Point3 &amp;p, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab290d812e60dd4b67d44575f28219820</anchor>
      <arglist>(const Point3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>unrotate</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ae2034caacc2080497d13c0f868881a88</anchor>
      <arglist>(const Point3 &amp;p, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>rotate</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3808a46ab97d7c6869c40ba6373cc77d</anchor>
      <arglist>(const Unit3 &amp;p, boost::optional&lt; Matrix &amp; &gt; HR=boost::none, boost::optional&lt; Matrix &amp; &gt; Hp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>unrotate</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ad88be15c224ee3624f4370ef70b36ea8</anchor>
      <arglist>(const Unit3 &amp;p, boost::optional&lt; Matrix &amp; &gt; HR=boost::none, boost::optional&lt; Matrix &amp; &gt; Hp=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>operator*</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1fd12d481ff1d6eeb88a88d8dae3abdb</anchor>
      <arglist>(const Unit3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a4d5f212b638238d07eb284c589b6aa00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>transpose</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a4152c00308813770de135ebe2d3951d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>column</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ad7723576b5e1d1b7807957368658066d</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r1</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab98c715bc40dccc6666bfbac2c49b897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r2</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a262f3da834c8138a3690d6e1817a1978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1b0fcc14fcb2bad6da35077b9101e0d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>xyz</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a614c8424df4edd0fa6a76e39fa064be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>ypr</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a68b2b03d36370af975501badf8270bd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rpy</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af1c69171590146fa4c6f9d1d64ba3ea1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab4747537c8e9a2f1dd1a88388b156e5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>acd8facd56fc74423612ef94c00a7a199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a9d947c557cc946a8240604a35295382d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Rot3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Rot3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Expmap</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a887c9e5450f0036ded3c6ba41a39836c</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>ab003b924b41c2ba72cf1872823969bb3</anchor>
      <arglist>(const Rot3 &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>dexpL</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af540b592a2f8d070e45d8a51eaf18a56</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>dexpInvL</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a499e9ffd982c48a6c285f55e16c94541</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>rightJacobianExpMapSO3</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a6ff3171cd53bdcd609754ad392b5af40</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>rightJacobianExpMapSO3inverse</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af3b21760960aceb9dc1e4d0b6e8d58ba</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Rot3 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Rot3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCheiralityException</name>
    <filename>a00222.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCamera</name>
    <filename>a00221.html</filename>
    <base>DerivedValue&lt; StereoCamera &gt;</base>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a6c1412018f3a2e65e3a190496821e764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StereoCamera</type>
      <name>retract</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a4524e6112858f82b2c5c556847d69614</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a5b3b6b08506580ff645a774d688c8a38</anchor>
      <arglist>(const StereoCamera &amp;t2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a158dd137f09cfb8f041de46bd4a47851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a59e0ed652568f335b994bb6b4341a9ef</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const StereoCamera &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StereoCamera &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; StereoCamera &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; StereoCamera &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoPoint2</name>
    <filename>a00223.html</filename>
    <base>DerivedValue&lt; StereoPoint2 &gt;</base>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>inverse</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac71961260a2832002ebf2c0d41017b58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>compose</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a7225d54d385af943b6d093b07376ba94</anchor>
      <arglist>(const StereoPoint2 &amp;p1) const </arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator+</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a1348f804a3b8232e0e3961f72ab8e436</anchor>
      <arglist>(const StereoPoint2 &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator-</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac9afc92551948b41dfd0dc87fbbc881e</anchor>
      <arglist>(const StereoPoint2 &amp;b) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StereoPoint2</type>
      <name>identity</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a01e660dedfc05491b619d428b9556824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>adb67b7773c0525a1dca2a76982506313</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>retract</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a60f5032e721e062c42914bb4f321d432</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a49cd54ad5cbcc803fc527f5f403e7198</anchor>
      <arglist>(const StereoPoint2 &amp;t2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a271ebfac9002e03a69bf1184ac64d466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>between</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6deb489517a685c0a78c88d716166f2f</anchor>
      <arglist>(const StereoPoint2 &amp;p2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StereoPoint2</type>
      <name>Expmap</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a064a1765ff8e15c64cac362756cd227e</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Logmap</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a20cc73e8cde0a523bd316ec74f7059b5</anchor>
      <arglist>(const StereoPoint2 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>af91933798181ce1bb4759a7f78900ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6e78d04be7be5824277957b807f29a67</anchor>
      <arglist>(double uL, double uR, double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a9da132c02afad0f2a2b9f222f7afa9e2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a15adb2f85171388675ac98fa866aec81</anchor>
      <arglist>(const StereoPoint2 &amp;q, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uL</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>af4b0d60f222be7bc4d780feb45df1919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uR</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a9accc00cb0ffd0452b4847ecb2fced7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a3a1f13fee2bf628469210e56a8448abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a8f51ba6e1bca20d68b00794e8d451962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>point2</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>ad6c4bb33eecdd85329af97f7bde039df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>right</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a4c032abb69beab0c8a9015f7961df2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const StereoPoint2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator StereoPoint2 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; StereoPoint2 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; StereoPoint2 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationUnderconstrainedException</name>
    <filename>a00238.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationCheiralityException</name>
    <filename>a00236.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationFactor</name>
    <filename>a00237.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a8868bc0728801013dfc64835f80d4d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>acadb9c167d84ac9684514257c0320d65</anchor>
      <arglist>(const Camera &amp;camera, const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key pointKey, bool throwCheirality=false, bool verboseCheirality=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriangulationFactor</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a77ba805074a3b1e6678c900d9e5d924f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a946de326801ffe405c952d0c1bd1ac95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a76e0eee0d96c6ee9447268db0ebf7c29</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a43c8adb70bab2dfc2e6d90c45d501473</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a348fe2b25227f4d3006c72d5bf05e706</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab1aa1953dbc662faeb890a3c617b9588</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a8307000ff6d7e9ca5b2b8161eebecdfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a2528d080667c175a1ed4924cde684101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a93d81c694498761ca824f648a311bd56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a886bb13688a62b2680c10cdaf7999918</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ad6e8ef3348e042d598617d1d55f20300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoiseModelFactor</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ae1ed5e0fa6c471b57172f7ebaf552187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a02cea97db30d27b51feaf1f0444d743c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>af4f62b52fff1a0527ecdb279de023728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SharedNoiseModel</type>
      <name>get_noiseModel</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a16a8a23069ce6ae664f516edc8f36254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a1b3ea51380315bfd63f60d8d9195b0c1</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>af6147aff3a33f734435601f6dcafeaf9</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a76fe3ddab5dd11b9fdeb5405547a69d9</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a7c719ae67f222f66569ccb3b526cb9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8a7610dba7e9a6f878268c2769ea0e04</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearFactor</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ac457810c504de58732d51d61f715c2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>active</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a7e1ca72312cffc5d0a140cbc7cee7ded</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a95f4d57e8646b6df634496aaabb683b5</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a6a9bdff697b2f74502d5a2b0101b29b5</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;new_keys) const </arglist>
    </member>
    <member kind="variable">
      <type>VerticalBlockMatrix</type>
      <name>Ab</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>af568c8df72a8f053d7416def74e0a05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ac9229cfdf7fd9a0c7074bd4384c45406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor1&lt; Point3 &gt;</type>
      <name>Base</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a7a3ad8cfaf675c5fc899bafe74f331ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TriangulationFactor&lt; CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a54e9baa5515be5ae9e8ee3dc286aea5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ae120df4f1e053f5541a8f5f4c2d8697b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a762f6984cfd67b1e83cc530d71093dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>affdda267829174d2c8666508edfc8000</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afc41b8e75dd292cbf22cffaf54cf8906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Camera</type>
      <name>camera_</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a8fa07c0cec27557c45ff94906477d401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Point2</type>
      <name>measured_</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>abe662bf7e7c2414ca364010baba2cdd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab10b84a71b6136b85be7ed4aab0a5649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a2a184a6d3f81e9d0cfd77ed7afab556f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a4605224417029e9dc58c5267efa9a46d</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromKeys</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5087976b9e398cd21305d33972feedad</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromIterators</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4157181261dc47002004d53c8b56f7bf</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Unit3</name>
    <filename>a00241.html</filename>
    <base>DerivedValue&lt; Unit3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a358877500acd48b9a26b1f0cba6843ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a3bb63e437f2d37647d61e96a89535da7</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a21e2638a4e3257976366623da0a06d52</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Unit3</type>
      <name>FromPoint3</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>abea4d0719a980aaff2f815173be21475</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Unit3</type>
      <name>Random</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a2bfe352c0070695fb03c5e2461ce14a6</anchor>
      <arglist>(boost::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="friend">
      <type>friend Point3</type>
      <name>operator*</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a365ae7737121f932c95515d0c6309c35</anchor>
      <arglist>(double s, const Unit3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>basis</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a2f83c770db53aea56f0c889ad9b26d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>skew</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a659c4eacfe2022173eaa0f5ff414405b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>point3</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a569045d6dc11ee21c4dbc2502dc337ca</anchor>
      <arglist>(boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>af13d35adadd13a0f9023b1f4f9be72df</anchor>
      <arglist>(const Unit3 &amp;q, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a65e11d433eafc6e6a3643fbc9add6f41</anchor>
      <arglist>(const Unit3 &amp;q, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RENORM</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXPMAP</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RENORM</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>ae451a692d2d074125a052006e29b5908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>retract</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a77f8c8d99a3cb0b41db1c74219f908db</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a8e728e5a075bd3ec48f0d2c0a38d6977</anchor>
      <arglist>(const Unit3 &amp;s) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a3c282b5d93814bebc62000ea50629ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a7b730ccc7b61a1d9a03c9f5e7d6a5054</anchor>
      <arglist>(const std::string &amp;s=std::string()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00241.html</anchorfile>
      <anchor>a9ffe7a7a08eb451cf70b321fbd6132fe</anchor>
      <arglist>(const Unit3 &amp;s, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a5fd851a5efcf2839cee22d65bb224fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a362861ae176f8a9f3489e65d61bb47fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>af50cb1a8af14ceaaa3e01267a3df2ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a812cff7b93415a523460e779ff7d088e</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6478494e0bbab1bd18b1b26d83df6004</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae5e5c213b338fc7b1c9071df109d68e6</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a59f9005ab7258499ebdcc27173e00c25</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Unit3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aff4ad606ac2bcaadfcdf55132f1e09d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Unit3 &amp;</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2bb2afbbc07b89aa8164795bd9752bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DerivedValue&lt; Unit3 &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a0df2b0e6d8b05a52a23b2b73b259361d</anchor>
      <arglist>(const DerivedValue&lt; Unit3 &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesNet</name>
    <filename>a00009.html</filename>
    <templarg></templarg>
    <base>FactorGraph&lt; CONDITIONAL &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ae6a59fca7b59061bffe9d3aad97cca69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ad1f05fb1c55edbb9c84ccb29a0b7464c</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a70dfe0f0a612664ed30aff0591a0fb1c</anchor>
      <arglist>(const std::string &amp;s=&quot;BayesNet&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CONDITIONAL &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a88103713b4df54500caaf6791f874a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CONDITIONAL</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CONDITIONAL &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FactorGraph</name>
    <filename>a00083.html</filename>
    <templarg>FACTOR</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="typedef">
      <type>FACTOR</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FACTOR &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ClusterTree</name>
    <filename>a00033.html</filename>
    <templarg>BAYESTREE</templarg>
    <templarg>GRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a733460d568391cf1c6f5aef09d9a700a</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a053adfe9545314ea5f7495a6292602a5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4c37dfd58771cf749073e886643998e3</anchor>
      <arglist>(const Eliminate &amp;function) const </arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>abb265423cabb3257b6c3ee2e2d567cf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a938fb21b292b59118695d3202b5345a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af1ae1fcaeddbd572eed2a241c49a4673</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a2b76a4792f6d2d9a8fc487c00a93b48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aab3ba5027ba3df85f3a5cc8e3657df75</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3167d3ced5564a8c79194b0b4cea53f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8c71f0fa9e244d82ffe5a4fdda17b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8b149143e6d88e321eb6c36eef868d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6164aaee6d654dcd0001925247ac07a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aaf85cb39e2a6e53966785345c4203216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESTREE</type>
      <name>BayesTreeType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0085cb64f469b9dc7834ceb7151cd66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTreeType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a61ab7ab0b2583e715019dbb4d48b0c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a796c7cf91ba804b49b819cac1af75309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraphType::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3850c41e5403c3cc2a9436900da9ea83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab549fa208bc8bde445e9efb2a96b77b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cluster</type>
      <name>Node</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a445e8a0ddc2570fc8ae1b8096b365b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedCluster</type>
      <name>sharedNode</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae49eaa9234ca5f87eb29cca32499b417</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ClusterTree::Cluster</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::ClusterTree::Cluster</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac0957cb3dd255a51a9b7a19ce6fd61c1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="variable">
      <type>Keys</type>
      <name>keys</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae81fd0725d881f16a967c9e32857a1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factors</type>
      <name>factors</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5e15320cd019769971ecebb2a23b7f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a80473e34d24cf495e4e7d71ee0e28e62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueStats</name>
    <filename>a00013.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueData</name>
    <filename>a00012.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTree</name>
    <filename>a00010.html</filename>
    <templarg>CLIQUE</templarg>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69303acc37ffcd9049eadf04478093f8</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac13ff7566e5700a730f88d24b774e340</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec1117c687d59658c06a1c7407029e00</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3b9077906f134c0be1f0a552a9e2691e</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa4310d27fe63ced17dc8ef336752f832</anchor>
      <arglist>(const CONTAINER &amp;parents) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9f25b015c0a2b8b08113e566f6b707e8</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0be61ae7efa710f1ace6a44ab3b30950</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a7b8c6b21d03dec49e26854d78567f80d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a55c8dc358ca26001624a7c2d0aac6a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>acf9de5e82e622bde098326b8b3f3e7ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0b0167870865c611333c9717b2768065</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a06e2000ca60f20c4f23b44a11afcc875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4e25ad0d1cfa322ea090c89f60c163fd</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a63c41289b4e14e237266b8760e5bcd6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20895ce5c831ede1be7245ae4e3ca6e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a61d8be0ebbec2cdab2d9438299defcb3</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5636653be9f5bfd84f84ebb78fbaf8e5</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a298383acab97fe45ff0f1baf324f9a8e</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6046377593973ae0adf0c3f3e974a753</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="typedef">
      <type>CLIQUE</type>
      <name>Clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeOrphanWrapper</name>
    <filename>a00014.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits</name>
    <filename>a00069.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeCliqueBase</name>
    <filename>a00011.html</filename>
    <templarg>DERIVED</templarg>
    <templarg>FACTORGRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a570f9be57fea1e292f4637f4d429c47e</anchor>
      <arglist>(const DERIVED &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3ffd0d2bff6e8c5754cfb5d0ba21225d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aff971c9607a3ac5a7e9f740f6cb8196c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3a39c7c3d346f4faa093a7b5d434fbd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a96a5b63a340e0e6c46cafc102056e878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6696fbf69939b7bcad4f0e56a9919265</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a80fc17e3f333fcc091cc44d8884d8ac2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ada9e64fb7ad8867ef9b0505eb7c9734f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>separator_setminus_B</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aadd0edee5cc1310e601f709229cafca5</anchor>
      <arglist>(const derived_ptr &amp;B) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>shortcut_indices</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2e363015f5d7dd803476781e41c39da1</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aea1567e2834ab8d38af635b05ad36cbc</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae43854f70b9ee5b58cc0a094af4cc333</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ace8901219f7513688ce5963d797fbdd5</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Conditional</name>
    <filename>a00036.html</filename>
    <templarg>FACTOR</templarg>
    <templarg>DERIVEDCONDITIONAL</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a70e1e8bb9dff7f7af10c23470d216973</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a69adce4d503ebcc4e8898c06ae6880a0</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a208bc5e6c3dab6ff83973cfc60a446d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae16e47030e8655fa2452817cfe8bd9fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aeb7d8fb56dbbae4a2af1c03636a4673e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a35c9678adda3d7c9dc82f6bf2b381e1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac75914a4a1c1fd294061d4646d8a1a07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>afdcc4b9bc2dbd4ac6fd59f4cbb28c61c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac35eff5ca946583972079e353f3efc55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2c21e8e01398bb44b42c7482d7996f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a4c6b1969c20352b8a4132dd675975cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminateableFactorGraph</name>
    <filename>a00068.html</filename>
    <templarg>FACTORGRAPH</templarg>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad4a3b88ddf910a6405f63d763b82b253</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acf4c7b4bada301b7f92dda058f24b52d</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad6f8b4965c99bef9ae85b12068414171</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aa9e240383f54e40a3ce962eee61f812e</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8a183130d2d6c39b77733d01333b6c83</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aaf5aed4a7dce68271052b7cc7e6b4011</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3056d8664329f16ff0cd3e32aeb79f77</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4898c0c1a150bf26cc9c3fc06e00f669</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abe2c6ad164a0c1c422682a6e30b28cc7</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const </arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminationTree</name>
    <filename>a00072.html</filename>
    <templarg>BAYESNET</templarg>
    <templarg>GRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ada4a15562946bcb21a513e6550d102e0</anchor>
      <arglist>(Eliminate function) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a183adbff137e505750d06179a343f1eb</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a853254336fa80c1fe0cc142c3b36ee04</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afb07c2ca21eff3108101ae8529635552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac458262d2cc708736dad5b341d422101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESNET</type>
      <name>BayesNetType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; BAYESNET, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTree::Node</name>
    <filename>a00158.html</filename>
    <member kind="variable">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a725807c0f6a2b62cea3626dec4d12d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factors</type>
      <name>factors</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ae4ed45ec77035fd0c0cc91696276ea8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ad6730594a7070d7cc565e0bdfcc4d699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Factor</name>
    <filename>a00082.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a322a4d391be45b5909a65895fb7b023d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa3d2ef6b21961e708a4cbe10b55be59b</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a70ff55886664229a25e29cf2a7bb1bb7</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>front</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad4d47ac4a48848c7488be3fdfb3086d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>back</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a13e2efbf5c8845a71a226b6761366356</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0f58de0dd1b5949bbd6f1a79ac9f4525</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; Key &gt; &amp;</type>
      <name>keys</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a08304273a9c61d2959e58763b0b55772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac63b9e15827c8b6d268de80efc97997c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a508e315eb555f34d16f56fb1163debf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aafbea148110555e44c4bb0340112242b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2a34316dc91eb9f185e71a5b520ed443</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad51bd2d1f5fb5c8e5ca4b8d8ea037768</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeys</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acaa3d5a9c8ae806543d17e9eb1152bd8</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; Key &gt; &amp;</type>
      <name>keys</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5595bd63a88a226e8169489fc3522262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5596dcbc299a2e8eec813b78fbcfe933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a33597c74ba8db7396722165424fe5ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>keys_</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae096db7996d5b4e88b88ca1c66eb01f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallPushBack</name>
    <filename>a00045.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::RefCallPushBack</name>
    <filename>a00198.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallAddCopy</name>
    <filename>a00044.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ordering_key_visitor</name>
    <filename>a00182.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::compose_key_visitor</name>
    <filename>a00034.html</filename>
    <templarg>V</templarg>
    <templarg>POSE</templarg>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::SDGraph</name>
    <filename>a00211.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::SGraph</name>
    <filename>a00214.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::PredecessorMap</name>
    <filename>a00194.html</filename>
    <templarg>KEY</templarg>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a682e34c430a538cf5792a49b2d4697e9</anchor>
      <arglist>(const KEY &amp;key, const KEY &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InconsistentEliminationRequested</name>
    <filename>a00118.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM</name>
    <filename>a00124.html</filename>
    <templarg>BAYESTREE</templarg>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JunctionTree</name>
    <filename>a00141.html</filename>
    <templarg>BAYESTREE</templarg>
    <templarg>GRAPH</templarg>
    <base>gtsam::ClusterTree</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>Base</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a1529a6dd032125b6d5f5cb43edbfd35e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LabeledSymbol</name>
    <filename>a00144.html</filename>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a26423032387e3e0615c2f168a3ad0389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aa3fb596d35048a62db4081d6805a2788</anchor>
      <arglist>(const LabeledSymbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a9ad03169a4496232527fadf06843b329</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6adf25100691a1e4d85a52984d97b890</anchor>
      <arglist>(gtsam::Key key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator gtsam::Key</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a84e00fd8b44b9d9b8a81e7b27320b276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gtsam::Key</type>
      <name>key</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4589ffe3decf95158a6e6cb0036479bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>label</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a6aa33b6912f29f94446b51fe874c1284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab19e0fdb1b603d80e20d6a6fc5c68c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a157f70b1554b4d60f077f63c364ec3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ab33d3f842bdae155d0b7f22fccf65e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a1816881a2106ddfb33da01184ccf7586</anchor>
      <arglist>(const LabeledSymbol &amp;comp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::function&lt; bool(gtsam::Key)&gt;</type>
      <name>TypeTest</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af9b0ed1dc2f238a2e2fbf848c2ffb115</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Ordering</name>
    <filename>a00181.html</filename>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Ordering</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aa7f3dd0f38b06fa10b7fe9dc1ee1c378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a0fdb342e68a74e19c25a1d3364233cde</anchor>
      <arglist>(const KEYS &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8e58b2de0eaa0f54f0a8790009abf39e</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; boost::assign_detail::call_push_back&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aad3752a69f4a70d2ffce00a57402479c</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>FastMap&lt; Key, size_t &gt;</type>
      <name>invert</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ae916a0335b4dee3af97f4ab56c43cc95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>COLAMD</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ab77b8d7d4ff42bb1fe4505df5e6a3d25</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>COLAMD</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a1b566ebb0dff5c13a7a8d24add25d1a2</anchor>
      <arglist>(const VariableIndex &amp;variableIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>COLAMDConstrainedLast</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a522d07624ac03918f6b1549cb2e82dba</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;graph, const std::vector&lt; Key &gt; &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>COLAMDConstrainedLast</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a027172226eb1f6f7ebc0f136a72990ac</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const std::vector&lt; Key &gt; &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>COLAMDConstrainedFirst</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8bcafdaaa8b28ad6d22e662d72a220cb</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;graph, const std::vector&lt; Key &gt; &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>COLAMDConstrainedFirst</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a7bc49ae8048d5b9936c76966b092f128</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const std::vector&lt; Key &gt; &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>COLAMDConstrained</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a030f594aa604f668989cf88dbc5075ba</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;graph, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>COLAMDConstrained</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a787030268e03fbed7a351a519cf7749b</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="typedef">
      <type>Ordering</type>
      <name>This</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad29de1a2966331f21b1fd88a18234091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a5389765361ecd73747234ac0a1fd9c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Symbol</name>
    <filename>a00227.html</filename>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a70b4c41b784455578c4798dd6b3b3028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6c9854ad92d889022fb2fc837efc0b36</anchor>
      <arglist>(const Symbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6f107c1b7479956ff75b0e0a76711837</anchor>
      <arglist>(unsigned char c, size_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a39830bf361caf4ed4d1ef0a613dc8179</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1fca7101f9df1388f002e112cb8fb1fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Key</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6d797f5e411d7a48de04566598f38482</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac371e0097fff688e14d7a65df1428868</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad91eb79b1b9fd33cd1abc13d79d86236</anchor>
      <arglist>(const Symbol &amp;expected, double tol=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2ab7a3c24d0c33e31046bac1e99ce59d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a6ce776d16ad6f0c8f4d2f0f8365dda73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a40f63424533fa2b01d2c6bf614b77127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4f537c0be3c74904312698dcc5bf5563</anchor>
      <arglist>(const Symbol &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac389ae2d8c5ec6162752e426301ca01d</anchor>
      <arglist>(const Symbol &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae869c41bab3b282bb8e78a1487a340e9</anchor>
      <arglist>(Key comp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ae30400de8a61ccf7dc25f2eb4e95c007</anchor>
      <arglist>(const Symbol &amp;comp) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a030c15691ec3a96cc8f123ff8bd7aa2f</anchor>
      <arglist>(Key comp) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::function&lt; bool(Key)&gt;</type>
      <name>ChrTest</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a467f10597c7d0bd091213d5991c2a976</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableIndex</name>
    <filename>a00249.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>af85147163ce24cb4db4505471440402c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a79bebdf9292c00135d5605fe38319142</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>size</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a716632b94759e1f490a90d20052770d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nFactors</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a76dd29bafc1dd72995d518809ea24ffe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a3546a27a4a5f2a735e9892ad3411737d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Factors &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a98a8eea524befa5f1ff4ace4e90d6283</anchor>
      <arglist>(Key variable) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ae9b08ce51dead17644be81e9eef8a32d</anchor>
      <arglist>(const VariableIndex &amp;other, double tol=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a3541d602e8d6e800daa2abe8e88280f8</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableIndex: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputMetisFormat</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ae1b8d3a8dcfb41a07dc95e3f23661e17</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a24afc0adf65fa067d2428654e4faea98</anchor>
      <arglist>(const FG &amp;factors, boost::optional&lt; const FastVector&lt; size_t &gt; &amp; &gt; newFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a4094920c9d0ce534ff3d8a953730f09b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor, const FG &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeUnusedVariables</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>adba150211d074457621ace80632a0267</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a14a4193791e7cfb6f932ff181c3db262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a7fad1a0c3d89bce1a4563a2d7abd8f51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a4f6113c4c569c5290577062aca104fd4</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Factors &amp;</type>
      <name>internalAt</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aea18d13965aa0ec8c524474ecc0f7380</anchor>
      <arglist>(Key variable) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Factors &amp;</type>
      <name>internalAt</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a41b6c572acc1422ccd31e1da5749af27</anchor>
      <arglist>(Key variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableSlots</name>
    <filename>a00250.html</filename>
    <base>FastMap&lt; Key, FastVector&lt; size_t &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VariableSlots</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>acd98bd86878e8c5c9596c929439c0a4c</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a977915a74a96941899bf50921b654974</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableSlots: &quot;) const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ab9e4bd331528cb218c6341185be4e7cf</anchor>
      <arglist>(const VariableSlots &amp;rhs, double tol=0.0) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, FastVector&lt; size_t &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, FastVector&lt; size_t &gt; &gt;</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8df951acad6f080ce8f19422f6df6ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const FastVector&lt; size_t &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a897d43dde7fcaa7a83bd26c9883fa841</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AlgebraicDecisionTree</name>
    <filename>a00003.html</filename>
    <templarg>L</templarg>
    <base>DecisionTree&lt; L, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4e42a5ca3fc306d2d83c88dd3532f71d</anchor>
      <arglist>(const L &amp;label, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a685a8ae8b9bdd8b65f33752b83bf0a1d</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a002710ce70616775068257c29a2e4778</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aca8f0d3a93b0e6ebeb69b673495b4192</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af0cd622a320a4a202473ebae5dd289a7</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3cd971460a346293b80eae2f125c5bbe</anchor>
      <arglist>(const AlgebraicDecisionTree&lt; M &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator+</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4b68ea27c062c1437ca054b2677daccd</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator*</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a295435c3bdfc51c4175810b1a90eefdd</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator/</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a2400c378460fc794c241127b55bd711e</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abb93713d5e1cac93c18399755a37069a</anchor>
      <arglist>(const L &amp;label, size_t cardinality) const </arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1d2c4944e3173a5840d7f06d9d8db76b</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5108056526153082ffe51d150d985905</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a67f3e2ded821285f7b7fd39add4e115d</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a304b4cc562a31695e169626d4e484059</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a38914a401108e41f0a452b1be931cdf2</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a79089d9d83da7440dca2430e27d4f316</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>acc6db4fbd183b5232db9b15b161fcf73</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a791dfb5ea690cb02c03db70fed712cd7</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a96e2c37fdbd9fc60db1cb9e61e1a6adf</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a2bb20a54947c3f16ded5b810fe03a459</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac69fc84d7c796c95bb4ed47c15028039</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; double(const double &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; L, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad4b5fc3b8c8368c98ade3369dca212e9</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5b064a7454d0c2b30cb488624f584d60</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::AlgebraicDecisionTree::Ring</name>
    <filename>a00202.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Assignment</name>
    <filename>a00005.html</filename>
    <templarg>L</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree</name>
    <filename>a00046.html</filename>
    <templarg>L</templarg>
    <templarg>Y</templarg>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const Y &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; Y &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5108056526153082ffe51d150d985905</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a67f3e2ded821285f7b7fd39add4e115d</anchor>
      <arglist>(const DecisionTree &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a304b4cc562a31695e169626d4e484059</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a38914a401108e41f0a452b1be931cdf2</anchor>
      <arglist>(const Unary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a79089d9d83da7440dca2430e27d4f316</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>acc6db4fbd183b5232db9b15b161fcf73</anchor>
      <arglist>(const L &amp;label, size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a791dfb5ea690cb02c03db70fed712cd7</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a96e2c37fdbd9fc60db1cb9e61e1a6adf</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a2bb20a54947c3f16ded5b810fe03a459</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac69fc84d7c796c95bb4ed47c15028039</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; Y(const Y &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; L, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::DecisionTree::Choice</class>
    <class kind="class">gtsam::DecisionTree::Leaf</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad4b5fc3b8c8368c98ade3369dca212e9</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5b064a7454d0c2b30cb488624f584d60</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Choice</name>
    <filename>a00030.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>add2490ac08d196f3faf201b3c1e75168</anchor>
      <arglist>(const L &amp;label, size_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a83715de1ab3f83cd2c616a39837c2eff</anchor>
      <arglist>(const Choice &amp;f, const Choice &amp;g, const Binary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a930c01116531f16ab33633b6092c1e9d</anchor>
      <arglist>(const NodePtr &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a9aacc9c437ccd5a4acf54bee3c2fd153</anchor>
      <arglist>(const std::string &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aa7bba50964f290c5274771b533042072</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a75daa2e88a932f14cc3b7871d9d39677</anchor>
      <arglist>(const Leaf &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aca8e09e9336f1899b397131fb44df66c</anchor>
      <arglist>(const Node &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a2c1108993f0cfb169ff5415207190073</anchor>
      <arglist>(const Node &amp;q, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aa5fcd04736aa0c0c5445c600463df34b</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aec83227caa2e2aef7537f4e77d8598fc</anchor>
      <arglist>(const L &amp;label, const Choice &amp;f, const Unary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aec1264295c1f5e0c4d30efc7d00b1dae</anchor>
      <arglist>(const Unary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0eb740518c984a3e1b4d0ce16b1d4fc0</anchor>
      <arglist>(const L &amp;label, size_t index) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodePtr</type>
      <name>Unique</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>af96c231636b548bb4df941e5d172e02f</anchor>
      <arglist>(const ChoicePtr &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Leaf</name>
    <filename>a00145.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Leaf</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a97c108bf62752ef8d78b231358987bed</anchor>
      <arglist>(const Y &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>constant</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a91612040acd13edf60349c0d28effe65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a5b411ab969154bcb30de44748c5357ff</anchor>
      <arglist>(const Leaf &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a9f863ecb7dfbf635685104397e2f3126</anchor>
      <arglist>(const Node &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad81e29d1e6bab2850faa2f818b781c39</anchor>
      <arglist>(const Node &amp;q, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab1a101a73861eaddb061d4efe5a434a6</anchor>
      <arglist>(const std::string &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a43e2dec197d1ea24f04e6d765a6c6465</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const </arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3047a94b3421b0fce64cd20bf94d2ebb</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1c62aa6dec6158917059812bb58e732e</anchor>
      <arglist>(const Unary &amp;op) const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>abfdaee72ba33ca251edb8ef89e135eea</anchor>
      <arglist>(const L &amp;label, size_t index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Node</name>
    <filename>a00159.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTreeFactor</name>
    <filename>a00047.html</filename>
    <base>gtsam::DiscreteFactor</base>
    <base>gtsam::Potentials</base>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ad52196341d54cfcb396eb62a52ceb7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a0276612e37428bac98fbe8f00f280cbb</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;potentials)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a143b3b93ebd73bfa38c90f48e4374cff</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5f99b1a4066ec5cf56d4d5a89cb492be</anchor>
      <arglist>(const DiscreteConditional &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8306c5397dd95337d8caa0c684224471</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a00d18b1f1302573fc398ae60b46f6c79</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a865ee08f8310b08fd0cb0d50aaca296b</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator/</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5218b2ce751f51637b5b8d28e67bc0fd</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a844fbca241f0e7efa0780ef427cf1276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a7d6ff4374b6ed9075e3744928f39394d</anchor>
      <arglist>(size_t nrFrontals) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a484d7af70352b3a52ea5920e16970d2d</anchor>
      <arglist>(const Ordering &amp;keys) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>max</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a611e829eacaeb466cbcc8ee377addc0f</anchor>
      <arglist>(size_t nrFrontals) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>apply</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a301736e66fe58df01f5f07d2c89e66b4</anchor>
      <arglist>(const DecisionTreeFactor &amp;f, ADT::Binary op) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a8dd72e90e710ff3871f8b66a10ce1ab7</anchor>
      <arglist>(size_t nrFrontals, ADT::Binary op) const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>af9f3c72d06ce5eec6bf3422d2b3f7b00</anchor>
      <arglist>(const Ordering &amp;keys, ADT::Binary op) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>afadb0ff9285b8ef4c5efe5fb98167a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af9f2d0ba3efda1bb35a2279c53c26b38</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactor</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aa6b82f4425946dfe76026c6f52f48e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aad1312ad2a2f033ef41e29e934f559a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a3086f766807fdfdc53ba6e6b55451f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a5aab8730c80a7070ac1f295b9ab66e5d</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;decisionTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>ada2ab8851536ff2373c2ec65653ef766</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4e42a5ca3fc306d2d83c88dd3532f71d</anchor>
      <arglist>(const Key &amp;label, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a685a8ae8b9bdd8b65f33752b83bf0a1d</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a002710ce70616775068257c29a2e4778</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aca8f0d3a93b0e6ebeb69b673495b4192</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af0cd622a320a4a202473ebae5dd289a7</anchor>
      <arglist>(Iterator begin, Iterator end, const Key &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3cd971460a346293b80eae2f125c5bbe</anchor>
      <arglist>(const AlgebraicDecisionTree&lt; M &gt; &amp;other, const std::map&lt; M, Key &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator+</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4b68ea27c062c1437ca054b2677daccd</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator*</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a295435c3bdfc51c4175810b1a90eefdd</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator/</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a2400c378460fc794c241127b55bd711e</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abb93713d5e1cac93c18399755a37069a</anchor>
      <arglist>(const Key &amp;label, size_t cardinality) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1d2c4944e3173a5840d7f06d9d8db76b</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const Key &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const Key &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const Key &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, Key &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a5108056526153082ffe51d150d985905</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a67f3e2ded821285f7b7fd39add4e115d</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a304b4cc562a31695e169626d4e484059</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a38914a401108e41f0a452b1be931cdf2</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a79089d9d83da7440dca2430e27d4f316</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>acc6db4fbd183b5232db9b15b161fcf73</anchor>
      <arglist>(const Key &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a791dfb5ea690cb02c03db70fed712cd7</anchor>
      <arglist>(const Key &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a96e2c37fdbd9fc60db1cb9e61e1a6adf</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a2bb20a54947c3f16ded5b810fe03a459</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac69fc84d7c796c95bb4ed47c15028039</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>Base</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a96e20fc5f4cc476df586d28dab2da00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>This</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ac3ef2648a55e80cefac3ce07b99a4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7d274a86bec4b9e5339b465bf82b2c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a1fe887e0f0c0a7506db99e662f91aa29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>abc27a873650f7676a28d2c82960b279e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; double(const double &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a9765260313d922c2b8feb976089f52ec</anchor>
      <arglist>(const ADT &amp;potentials)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities_</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>adaa8e2ca551588ed0b07aa0a20379338</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesNet</name>
    <filename>a00051.html</filename>
    <base>FactorGraph&lt; DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a7d2ca3113fe78e4f6788d120b62f9004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a1caa6732f0bf990da980f5154c499755</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a73b6d262d031217311515968c7f90f70</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a578876c094461271ac57f31f8f5212c4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8d598375576b50b44a31a89b7cef0d02</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a89bf8255b448563ce57c4f20f01ce92b</anchor>
      <arglist>(const Signature &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ace7516a9826d478ef430a3b43b1fa3c5</anchor>
      <arglist>(const DiscreteConditional::Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a6e1fa2efe5f8cda19c87cd220d37339e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>sample</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a321afc1d5cb56f804e3d8444c75cc3b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteConditional &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTreeClique</name>
    <filename>a00053.html</filename>
    <base>BayesTreeCliqueBase&lt; DiscreteBayesTreeClique, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a570f9be57fea1e292f4637f4d429c47e</anchor>
      <arglist>(const DiscreteBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3ffd0d2bff6e8c5754cfb5d0ba21225d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aff971c9607a3ac5a7e9f740f6cb8196c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3a39c7c3d346f4faa093a7b5d434fbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a96a5b63a340e0e6c46cafc102056e878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6696fbf69939b7bcad4f0e56a9919265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a80fc17e3f333fcc091cc44d8884d8ac2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ada9e64fb7ad8867ef9b0505eb7c9734f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aea1567e2834ab8d38af635b05ad36cbc</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae43854f70b9ee5b58cc0a094af4cc333</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ace8901219f7513688ce5963d797fbdd5</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>separator_setminus_B</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aadd0edee5cc1310e601f709229cafca5</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>shortcut_indices</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2e363015f5d7dd803476781e41c39da1</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTree</name>
    <filename>a00052.html</filename>
    <base>BayesTree&lt; DiscreteBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesTree</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a9ed89e4e8ddbb56919ab48642a1032c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a68d1342cf59f2809d8b1533d84a13bd1</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a7b8c6b21d03dec49e26854d78567f80d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a55c8dc358ca26001624a7c2d0aac6a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>acf9de5e82e622bde098326b8b3f3e7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0b0167870865c611333c9717b2768065</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a06e2000ca60f20c4f23b44a11afcc875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4e25ad0d1cfa322ea090c89f60c163fd</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a63c41289b4e14e237266b8760e5bcd6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20895ce5c831ede1be7245ae4e3ca6e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a61d8be0ebbec2cdab2d9438299defcb3</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5636653be9f5bfd84f84ebb78fbaf8e5</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a298383acab97fe45ff0f1baf324f9a8e</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6046377593973ae0adf0c3f3e974a753</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa4310d27fe63ced17dc8ef336752f832</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9f25b015c0a2b8b08113e566f6b707e8</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0be61ae7efa710f1ace6a44ab3b30950</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac13ff7566e5700a730f88d24b774e340</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTreeClique</type>
      <name>Clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3b9077906f134c0be1f0a552a9e2691e</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec1117c687d59658c06a1c7407029e00</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69303acc37ffcd9049eadf04478093f8</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteConditional</name>
    <filename>a00054.html</filename>
    <base>gtsam::DecisionTreeFactor</base>
    <base>Conditional&lt; DecisionTreeFactor, DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>abde5b7e78cd17f518afb2e8048e6748d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a1364e251e09ee03e49bbb21520748bbd</anchor>
      <arglist>(size_t nFrontals, const DecisionTreeFactor &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a4213103c28d8fe4b6e9f6ee28672b192</anchor>
      <arglist>(const Signature &amp;signature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a24f884d7bb2647edeaa21c6798af63ff</anchor>
      <arglist>(const DecisionTreeFactor &amp;joint, const DecisionTreeFactor &amp;marginal, const boost::optional&lt; Ordering &gt; &amp;orderedKeys=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>adb80cf8f0a16a44ff76ddacae7ac5d81</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a76607f60acb4b5594ac6274c71041b99</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a1f466ee7b7d3070220939d23b53b07dd</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa44010ec030fde55694def11311610bf</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::shared_ptr</type>
      <name>toFactor</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a7fe57ef625086495e8c50d71f1cb4da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ADT</type>
      <name>choose</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad090bd8ec5da3d130bdb0832a13259fb</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;parentsValues) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>solve</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ad0c63325d4f78caa9cd992b524e3ebd4</anchor>
      <arglist>(const Values &amp;parentsValues) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a157e27194552e64b0c20b7f5e4600b33</anchor>
      <arglist>(const Values &amp;parentsValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ae5ae66d774ba3f2775fbffb0daf938a8</anchor>
      <arglist>(Values &amp;parentsValues) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleInPlace</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa140715fb9df822614af075783a5bae1</anchor>
      <arglist>(Values &amp;parentsValues) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a208bc5e6c3dab6ff83973cfc60a446d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae16e47030e8655fa2452817cfe8bd9fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aeb7d8fb56dbbae4a2af1c03636a4673e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a35c9678adda3d7c9dc82f6bf2b381e1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac75914a4a1c1fd294061d4646d8a1a07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>afdcc4b9bc2dbd4ac6fd59f4cbb28c61c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac35eff5ca946583972079e353f3efc55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2c21e8e01398bb44b42c7482d7996f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a4c6b1969c20352b8a4132dd675975cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>This</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a87b5d53bfcabc8afdacbee26d4ef9916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a4d8b3999aa607019946cbcfd255c09dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecisionTreeFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a9ab81fc33a84e5f1d886f771e8492967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a7a8d450dab8cd70ce0e971fa92bc5982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a67b09fbd04b575685982021eab1e8544</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename DecisionTreeFactor::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename DecisionTreeFactor::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a70e1e8bb9dff7f7af10c23470d216973</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a69adce4d503ebcc4e8898c06ae6880a0</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteEliminationTree</name>
    <filename>a00055.html</filename>
    <base>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a782fad055747d26fb8e876e3cf51bd6f</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a615df00f083b043dbc3734f68bad05fc</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a4c314004c2a884b4b4fdc2c61127dbcc</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ada4a15562946bcb21a513e6550d102e0</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afb07c2ca21eff3108101ae8529635552</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac458262d2cc708736dad5b341d422101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a853254336fa80c1fe0cc142c3b36ee04</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ae4e6afc353582183f3c881a3acad57ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>This</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a2b315837d2af900fce3ee59ef54a426f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a850bd2d0f3c1a7b51aebd75582d86b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a183adbff137e505750d06179a343f1eb</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactor</name>
    <filename>a00056.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a3d747207911fdd7827850f0948bab5b5</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>add2eb0736954ecccfeaa9fddb3a98da9</anchor>
      <arglist>(const DecisionTreeFactor &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</name>
    <filename>a00070.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac651e1f38f6897e0ba5eb0ac798e1307</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>FactorType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a414bee0b0df4c0f28a479f96ac874678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a0b0039647ac9edf201136931cdaaadea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>ac69faa24b7ee947fe6fb0c86b735c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a662cce5359d9cbabb3277f88ca9f3a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>af11e1b3b45d3cdbf78d07854bbb59d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a4dea5984af7ae9bb7b45b9e5f750b8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a3105cd6512d1674d6d433034c87b4e0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactorGraph</name>
    <filename>a00057.html</filename>
    <base>FactorGraph&lt; DiscreteFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9c6155d411d5e8f4169ac14982175908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab200e82a32be55ee64c8e0450e289daa</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1cc891cc009075ea80f8d114f5ce7941</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab1687dd520685928c9effcaea5473416</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a87ce384440c43993e8f98d9fd409c001</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a685006a13427b2567162570a308993bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>product</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a10c67a5dfce8dce9fc6194433a3dd731</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1eb66e02c5179672aa15acc10bd0be37</anchor>
      <arglist>(const DiscreteFactor::Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>acb73300b91eb3aef783f93e47ee21f99</anchor>
      <arglist>(const std::string &amp;s=&quot;DiscreteFactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afed2fa3fb5a9c4bb1aef0588860a5a4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad4a3b88ddf910a6405f63d763b82b253</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acf4c7b4bada301b7f92dda058f24b52d</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad6f8b4965c99bef9ae85b12068414171</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aa9e240383f54e40a3ce962eee61f812e</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8a183130d2d6c39b77733d01333b6c83</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aaf5aed4a7dce68271052b7cc7e6b4011</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3056d8664329f16ff0cd3e32aeb79f77</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4898c0c1a150bf26cc9c3fc06e00f669</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abe2c6ad164a0c1c422682a6e30b28cc7</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>This</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a50796434e042f15199bdb6695530189a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; DiscreteFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a8014b64b6ca21e950abfd4666ff81ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aa8426d72a4ee49cdea4c01dd04bfb412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4a38a0fa8aea06ee7fa1d9dceab25387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Key &gt;</type>
      <name>Indices</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7bafd4ad52e75c9b628a6e53400071eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteJunctionTree</name>
    <filename>a00058.html</filename>
    <base>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteJunctionTree</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4555ca722f81654a9aeb9983913dd6fc</anchor>
      <arglist>(const DiscreteEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a187d382e5e43fcc23e55bbbcf8cdb75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>This</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ad6782b47cf2c877b9073da597c774d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a67b80ddc56d75698e966b76590ab6cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a1529a6dd032125b6d5f5cb43edbfd35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3167d3ced5564a8c79194b0b4cea53f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8c71f0fa9e244d82ffe5a4fdda17b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8b149143e6d88e321eb6c36eef868d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6164aaee6d654dcd0001925247ac07a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aaf85cb39e2a6e53966785345c4203216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0085cb64f469b9dc7834ceb7151cd66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTreeType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a61ab7ab0b2583e715019dbb4d48b0c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a796c7cf91ba804b49b819cac1af75309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraphType::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3850c41e5403c3cc2a9436900da9ea83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab549fa208bc8bde445e9efb2a96b77b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cluster</type>
      <name>Node</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a445e8a0ddc2570fc8ae1b8096b365b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedCluster</type>
      <name>sharedNode</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae49eaa9234ca5f87eb29cca32499b417</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a733460d568391cf1c6f5aef09d9a700a</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a2b76a4792f6d2d9a8fc487c00a93b48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af1ae1fcaeddbd572eed2a241c49a4673</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DiscreteKeys</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ac710ec1e97bfeaed0c3f88694f1c9cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aeae84568ba908e2ea4fc5e876c08ce3f</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>af2a1fa833d44e52655656826b2a18d19</anchor>
      <arglist>(const std::vector&lt; DiscreteKey &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>DiscreteKeys</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>adc6ee484dc8782489ecd65970ac29901</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::vector&lt; Key &gt;</type>
      <name>indices</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a2483a1c6e6cf739603c7e4cf549f3486</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a948a86126c28a63b2736ccb1365d8073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys &amp;</type>
      <name>operator&amp;</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a35c2382aea9c2a03189946411d3c77c4</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteMarginals</name>
    <filename>a00060.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteMarginals</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a989e365c2191c5db801307e50778a706</anchor>
      <arglist>(const DiscreteFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::shared_ptr</type>
      <name>operator()</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a010055cfb5391e26335df2f4d97ebfad</anchor>
      <arglist>(Key variable) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>marginalProbabilities</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a2b991ee4d4a53c8a07676bbaf78deea6</anchor>
      <arglist>(const DiscreteKey &amp;key) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Potentials</name>
    <filename>a00193.html</filename>
    <base>AlgebraicDecisionTree&lt; Key &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Signature</name>
    <filename>a00215.html</filename>
    <member kind="function">
      <type></type>
      <name>Signature</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a3ad921ac92454eb5397709294082ce8c</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKey &amp;</type>
      <name>key</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a18f9ec49f8e6cf72f9b0a7f79fab1334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKeys &amp;</type>
      <name>parents</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a43c4a2740b49e2b00781f94984582c81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>discreteKeysParentsFirst</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a056ccac8f781865c094578b55d95b387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Key &gt;</type>
      <name>indices</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>aedc98c66160eb74ff833b0bc9ea066ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator,</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a7c6858868dbc60a707ec686b14263a7a</anchor>
      <arglist>(const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a7f92248d9f002bbc34942db22580ed76</anchor>
      <arglist>(const std::string &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a9ec0c17cbe7f60e4497e5eace4d254cb</anchor>
      <arglist>(const Table &amp;table)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Row</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a058b129adfd1cdb887c88efedf2c8ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a0fc340cc571b6ee412af16e488ba62f5</anchor>
      <arglist>(std::ostream &amp;os, const Signature &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConjugateGradientParameters</name>
    <filename>a00037.html</filename>
    <base>gtsam::IterativeOptimizationParameters</base>
    <member kind="variable">
      <type>size_t</type>
      <name>minIterations_</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a02664c7fcb805142421484310dafc7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations_</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abe70bda38b526a112fa873a6b042502c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>reset_</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a347b5ce7b42d5eb5722eed23db93a5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_rel_</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a74161c7d0a842b59501281ccdf584590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_abs_</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad48e0d1383ab5cabb17d268244af3b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum gtsam::IterativeOptimizationParameters::Kernel</type>
      <name>kernel_</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ab02657813bec2df727e60b6fa3e29d0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Errors</name>
    <filename>a00075.html</filename>
    <base>FastList&lt; Vector &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Errors</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a06c11c056d90d6eea6e43c47f1a1e8d2</anchor>
      <arglist>(const VectorValues &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a19d6295cfc226a2564ba0575664e3a13</anchor>
      <arglist>(const std::string &amp;s=&quot;Errors&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a288693b915e4261927c861c4f9476e86</anchor>
      <arglist>(const Errors &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator+</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a028bad2d94dfb8c40419056707bf9dd9</anchor>
      <arglist>(const Errors &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3aeefdc879a30b8ea899a02c1f9f47b2</anchor>
      <arglist>(const Errors &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>aceed0696216799231577552c9b777382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4ddfad84c21aa8e028650085d28e64e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a4b392c0cdea93c6af52956ccf6282f44</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a64ede4dd260eb040bf895828796af872</anchor>
      <arglist>(const FastList&lt; Vector &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad71cc6bc403f46960f54c75bc956093f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; Vector &gt;</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2601b4ee832bd26d8fc74630a4f55d7a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesNet</name>
    <filename>a00096.html</filename>
    <base>FactorGraph&lt; GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>adecacf9eadcbced34a26cd234e34d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ae4f5f693d7582da70a64ea80024fdf12</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac863c8c8203f4cb9d099d6d1adf8fb3b</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a91b6b8d6390efc036e690dbaf5493ff4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aa171ee55bc9eba17b56acc369f56a8b9</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a3f64c34b8558caf72b459db2a9cbd0d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a0d9218ef93617e46f56a6784f2270d66</anchor>
      <arglist>(const VectorValues &amp;solutionForMissing) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aab1349abddc9ff41faca6b4c75d7b025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a1eb2c52b7a337638a878c48ec7f63f16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a5b887696b6d24f010ca51e199bc1e84e</anchor>
      <arglist>(const VectorValues &amp;x0) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a0ddc1ea92e752746fb9c67c5f33247b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ad731624909a7c44841203bd66a49a88c</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a3039ed1dc207d2cb0d6eb32a2789b344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab571ba8b6eee44a1e35431ade8315cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstitute</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a4c7d4bc001bee7e37fa56087b61a2a64</anchor>
      <arglist>(const VectorValues &amp;gx) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstituteTranspose</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a77d3d2c5a8348330b41a091299aac7b8</anchor>
      <arglist>(const VectorValues &amp;gx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTreeClique</name>
    <filename>a00098.html</filename>
    <base>BayesTreeCliqueBase&lt; GaussianBayesTreeClique, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a570f9be57fea1e292f4637f4d429c47e</anchor>
      <arglist>(const GaussianBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3ffd0d2bff6e8c5754cfb5d0ba21225d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aff971c9607a3ac5a7e9f740f6cb8196c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3a39c7c3d346f4faa093a7b5d434fbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a96a5b63a340e0e6c46cafc102056e878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6696fbf69939b7bcad4f0e56a9919265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a80fc17e3f333fcc091cc44d8884d8ac2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ada9e64fb7ad8867ef9b0505eb7c9734f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aea1567e2834ab8d38af635b05ad36cbc</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae43854f70b9ee5b58cc0a094af4cc333</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ace8901219f7513688ce5963d797fbdd5</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>separator_setminus_B</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aadd0edee5cc1310e601f709229cafca5</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>shortcut_indices</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2e363015f5d7dd803476781e41c39da1</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTree</name>
    <filename>a00097.html</filename>
    <base>BayesTree&lt; GaussianBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesTree</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a10a6eb7dac9a7fcd873d0c0a3c01ca82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad034e7c81a809edb4145d11171e773af</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a506d8ebb87e714ea972c3377f0d90712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6922e26a43d8eca549068597b5c97254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a4ec99ef8bf4d414723a7ef25318754ab</anchor>
      <arglist>(const VectorValues &amp;x0) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad8e98efd2c1bce42d7199ebd43d80692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6749b59edcaeb019f0c87f17080a9095</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>aa503924526372240f5dc48a766817f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a29d34a7c512780d65800b8c7ca85e953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ad5eade9325b76e5c54ea62623f910d0f</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a7b8c6b21d03dec49e26854d78567f80d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a55c8dc358ca26001624a7c2d0aac6a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>acf9de5e82e622bde098326b8b3f3e7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0b0167870865c611333c9717b2768065</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a06e2000ca60f20c4f23b44a11afcc875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4e25ad0d1cfa322ea090c89f60c163fd</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a63c41289b4e14e237266b8760e5bcd6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20895ce5c831ede1be7245ae4e3ca6e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a61d8be0ebbec2cdab2d9438299defcb3</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5636653be9f5bfd84f84ebb78fbaf8e5</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a298383acab97fe45ff0f1baf324f9a8e</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6046377593973ae0adf0c3f3e974a753</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa4310d27fe63ced17dc8ef336752f832</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9f25b015c0a2b8b08113e566f6b707e8</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0be61ae7efa710f1ace6a44ab3b30950</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac13ff7566e5700a730f88d24b774e340</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTreeClique</type>
      <name>Clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3b9077906f134c0be1f0a552a9e2691e</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec1117c687d59658c06a1c7407029e00</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69303acc37ffcd9049eadf04478093f8</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianConditional</name>
    <filename>a00099.html</filename>
    <base>gtsam::JacobianFactor</base>
    <base>Conditional&lt; JacobianFactor, GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a350122154dc86824df762ae59ee51f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a07e5a082e6ccb1034f4a9754bc1b64ab</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aefa44e696b330113a6de949e457a6e4d</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a961b569d232db0e156c295e2b1fcc970</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, Key name2, const Matrix &amp;T, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a59d5c29925d10765fb5b1b3760161019</anchor>
      <arglist>(const TERMS &amp;terms, size_t nrFrontals, const Vector &amp;d, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a545518d753c73b6fc5b0cf644137ca26</anchor>
      <arglist>(const KEYS &amp;keys, size_t nrFrontals, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa9c69ac1701ddb94fe1187464212509d</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianConditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a9c064d5bc1dc1979daaf17735d395a2c</anchor>
      <arglist>(const GaussianFactor &amp;cg, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>get_R</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a87d7d3fadf3f14a6214f534b4f51d1b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>get_S</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a6cd2fcad94145986bc4fc67f2650ef63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>get_S</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a990c2ea113571aeab7a237c0d16c6741</anchor>
      <arglist>(const_iterator variable) const </arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>get_d</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>ad4215cbe64dd97455a530a11cfccfd91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aebf0c4a50146cf293ad757393edb7eba</anchor>
      <arglist>(const GaussianFactor &amp;gf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a51dae31470b597cfcb125d8eea11c9f7</anchor>
      <arglist>(const JacobianFactor &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a3f6c68122081325fba60790aea4e3033</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6529a99f529d8d5e9a7d65e0aed8622b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6b7a84b699fe0ef46cedd5e523f5bec6</anchor>
      <arglist>(const Vector &amp;b_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a8242a86e1822da752487387b49ff5e30</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a19bfb262816122d0bbe6ec6b1b2c7b1f</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a10686053f59eecc6fa400436ae7524d7</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, Key i3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adc5d50005aa660bbcd38e56d036a16f1</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa3af91d18474a5833c9aa706e2faffbf</anchor>
      <arglist>(const KEYS &amp;keys, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>afb8a9a52ed4353a167a8eb431aab495a</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, boost::optional&lt; const Ordering &amp; &gt; ordering=boost::none, boost::optional&lt; const VariableSlots &amp; &gt; variableSlots=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JacobianFactor</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>afbeef8a25aebb72b466c88e5cc2f6306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adf8683858be697bf0594386642a852f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>abe8a4b5169902fa9a2d93902836773e4</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>af8e90844c316c9b5510b355cc8963dd4</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa3b382c6b049b1842017cf26d65217a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ad60ef951c65f8a6d9cbfa3917f5f7c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a2c7009f0661d0b259a3632572f97891d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a7bbf79344a726b6696e77ad6a6318723</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a46e07cf665230bca7ecfa720a684f58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>abaac2286c4a4619f522d491d0d0b6980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobianUnweighted</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a51b44c9c8fe87d5ac8cbc00477168987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a974f87bc56210a4d922813b2695afd3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobianUnweighted</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ab089e2a086b749590a162846dcc7650e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adc36ca20de15c049f4530c4098139773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a3f46732d3af7edbb56e17431504247ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a066efa960439d10785081b8a9258e29b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a688a51959d8eebc9e8870fce4997794c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstrained</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aafb5e5e02ac90282d46ba0ea57d768aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a6a9c6587c40c8b7542f050792d0314ca</anchor>
      <arglist>(const_iterator variable) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a26923feafc608691dd408743f92adf5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cols</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ae21af81de0541192799861f77e118d63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aa728c8d437aa17cfd0fd685849acb425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a027b97a36c32c2ad26631c35cc405569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>getb</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>abdf9e16bc150d5b49757b5e43ced8079</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a0f822c8516235fe6b0cd7d9ca9237949</anchor>
      <arglist>(const_iterator variable) const </arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a254d816eacf3a084311e529f1156b646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BVector</type>
      <name>getb</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a283d02687937cd199624b53d515622af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a83e85032eecb0d6deee3743bd4d21253</anchor>
      <arglist>(iterator variable)</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a9cf15287bde9bbd4eed7209140418057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a254b9af5e59808018cd058a0dab3ef94</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a08d56588e2c7aaafa8aeca4604f7a1a6</anchor>
      <arglist>(double alpha, const Vector &amp;e, VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ad6606c28ac4482c379aaf6e18b64ada2</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adec5fdc776886b94829b2d4711390300</anchor>
      <arglist>(double alpha, const double *x, double *y, std::vector&lt; size_t &gt; keys) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a70819f5ecd402a28397b5c5377bf3b3f</anchor>
      <arglist>(double alpha, const double *x, double *y) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>acfef643f5718a09b3a74b9bca08b38ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ad266dc5d5f6d384405fd7d614d01f89d</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>whiten</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ab44db6c66af205780cdff44f84513ec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; GaussianConditional &gt;, boost::shared_ptr&lt; JacobianFactor &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a63c75affe133dcffbe20fef42e4d472d</anchor>
      <arglist>(const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>aed654ae2a8c5ef5862636bd068571409</anchor>
      <arglist>(bool anyConstrained, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>splitConditional</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a25834726868b7b4e5427588ee38212aa</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ab31173c32b976a81d76af85e1d49e24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a7fc8684c852571ea09ecea36847ed7a2</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactor</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a5b1351803dd692f18042e2516ce1d42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a208bc5e6c3dab6ff83973cfc60a446d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ae16e47030e8655fa2452817cfe8bd9fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aeb7d8fb56dbbae4a2af1c03636a4673e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a35c9678adda3d7c9dc82f6bf2b381e1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac75914a4a1c1fd294061d4646d8a1a07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>afdcc4b9bc2dbd4ac6fd59f4cbb28c61c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac35eff5ca946583972079e353f3efc55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2c21e8e01398bb44b42c7482d7996f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a4c6b1969c20352b8a4132dd675975cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::iterator</type>
      <name>beginParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor::iterator</type>
      <name>endParents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a9656dae242e3f9a8293b1b5c05095911</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>This</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a0f8b1ce7a6a1414f8c24e160af2f8d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aca05dc6ca9aea64f4621a8c8d2bf3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a2fdd1b89f3665eda71256f3a57f4a4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a42acbab01dda87c1017d4f996bfb9ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>This</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a53b64a11dd54af2f37fc441d6475ed0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a9fc30c262bb0a6b6d2ea13d39086f3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>adaf03a52ed83559d6a03cbab95092698</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>This</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ac49aaf7a5ac8bbf486762e9321a3d34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a0eeee0de6e144fedc937d7272be80a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a3fe9ce76eaef7dac2a434408e960bbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename JacobianFactor::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename JacobianFactor::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillTerms</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a44d0e92d8e8e74eab3792080ed648b5e</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;noiseModel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a70e1e8bb9dff7f7af10c23470d216973</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a69adce4d503ebcc4e8898c06ae6880a0</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianDensity</name>
    <filename>a00100.html</filename>
    <base>gtsam::GaussianConditional</base>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a5e87d41948515b0ea5548aed04227acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ab87337fa52b848ce99be24006daef46c</anchor>
      <arglist>(const GaussianConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a4c8ce2cd6b2708df545c4fe7778169ee</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;noiseModel=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a246d703bd45f50683f71cf4903529caa</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianDensity&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>mean</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>af821fd81e4c50acbede3d08ea3db4364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>covariance</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a551cae6fe3920d8986e38f19a442f350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianDensity</type>
      <name>FromMeanAndStddev</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a737eb90910e9ab3cb7d4f45b5d497d18</anchor>
      <arglist>(Key key, const Vector &amp;mean, const double &amp;sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianEliminationTree</name>
    <filename>a00101.html</filename>
    <base>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>acffc7084c938407b8b047843fbd7b138</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abc03f84772075ab56747a259513f62a7</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a35c00868d56a18b98a4e819ae73dcc66</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ada4a15562946bcb21a513e6550d102e0</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>afb07c2ca21eff3108101ae8529635552</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac458262d2cc708736dad5b341d422101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a853254336fa80c1fe0cc142c3b36ee04</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a57a688c5bdfa87413e5982fb1ec61489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>This</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3d599a4ee436838e5ffba795580c2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a888dd1388dc43d47fda35ade35583279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a183adbff137e505750d06179a343f1eb</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactor</name>
    <filename>a00102.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a995962014c602d30330eedc0718a5c1b</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2704b2eba88bce36a17630cab8e7eebb</anchor>
      <arglist>(const VectorValues &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a043b7743551077755ab0a2f7ce9145a9</anchor>
      <arglist>(const_iterator variable) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aad92ba2bc352ae0e4c8e3089684f2fd2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aab34974eaaefb9f2860f485a09ec4f1b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a9d0075b3f0fd624c5ae50784e29f9dc6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a3e5307082cc4fb1f5bc1c732ab4d61ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>af767744f94063ee3e508e533f16fbd10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>abee2d32cd8408a41f9605f4d60ff818f</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a0edbb7994001f28b306de73427e28751</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a3e305eb0950fbb3a5ea6db3cc9f2032b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>adc1222b8ed44ec379c9bdfe813f6d682</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>abd7ff975956b56b356d04547250650b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a835e0d8c262a982cc165084304d21227</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a7409b12a72ea8081def9b82c6548c05b</anchor>
      <arglist>(double alpha, const double *x, double *y, std::vector&lt; size_t &gt; keys) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2b6762effc4bf9999c008722d525772f</anchor>
      <arglist>(double alpha, const double *x, double *y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a798113430deafb5db828d23a7187cac2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aff23fa0ddcc065591cd4301d86f7a96e</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</name>
    <filename>a00071.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae5330d1584fe5de52a66edc6b3f65270</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>FactorType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a44c2163f161ac7e266324bb084c81d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a84da0e567d8c07323dfe3cc962ab9b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a3cf2aefb4cd3f92327da069c3c57fd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a97ec662dcfbdf8116be7df830f288387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a847f1955c654f43fa24ff656fa3c763a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a3b0578f45d822fdb8feea31cb08fc482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac9a6d5a1e133796f4ef7957aced8c785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactorGraph</name>
    <filename>a00103.html</filename>
    <base>FactorGraph&lt; GaussianFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a6230b36e3daf60b619e20742db3b02b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae25329ab2478d0ea2054eebc7bcdde0a</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af5974ac5896b74579db7967b05f6a146</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aedece6712926154a27d3facc4899b88a</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactorGraph</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad2cf3894566f0970a9df81f28b8a0dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a733aa6a7780bb3d16fb45345a655f717</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9778ee09d534bc6b8c2a2263e14875da</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>acac67c59333e4db66b530ee09d231e3d</anchor>
      <arglist>(const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad20e5b614636e00934414baf2a9b8636</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ad34fa381109aa8c3e1653dc352b350c9</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8a98904f917816d66b36a912acb44830</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, Key key3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2eaa4c442c6a4424cb8febe3e0f4f66c</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a183f35ac9d26c1f56310d9951d41d73e</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae476ceb95b2bbdd5bc0409d1df9de331</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph</type>
      <name>clone</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abbe46a89b20a00ef97291fd9120909de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>cloneToPtr</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a370a09d42761e66b3df335a3b507cc56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>negate</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa01255456dc46f2acb5e646b234fd491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::tuple&lt; size_t, size_t, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a9f92584fb313899a62446dc432a6d16a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>sparseJacobian_</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a625566ffe5342699b36e4cd70c4fda52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac7e33c9b8596ea464fdd3cf1a06c4f55</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae415ec646d60b51de3c4ade1ee3b5af6</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa025a861dd4a778911dcba589518dfcb</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa0c0cfe59a90ce282fe098ec4f8c59e6</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab1c83a5546cfcfa9193a292182e7e8dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a02d22bc87324624be79ab5e3f8fee0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a14f37fe66a65584a2d67c6f02330adf1</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a2d5999a100b44a658763f24bd3a7fb35</anchor>
      <arglist>(const VectorValues &amp;x0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>afc6113fa55f03c8146d58878b939f156</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab3ae7fa21b08a87c1d7e88bcb9b7be0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>transposeMultiply</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a81cf041dd2e8a5ee26c212529bc7c6de</anchor>
      <arglist>(const Errors &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a767c5f5e85a9066da94f869adf913859</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>gaussianErrors</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa9765f071bf2515a44dcdbea9916860f</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator*</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a414c648b1c7697aa71a808e7ad6300ad</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>add26efc9f6942df96b14b3aa9f33010f</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af7fb3808791af03395ef07024862a19f</anchor>
      <arglist>(double alpha, const double *x, double *y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>af362b66f72934adbaae9e2ff2ba35f1b</anchor>
      <arglist>(const VectorValues &amp;x, Errors &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aae81e4f33bde7682bf088f780aebcd05</anchor>
      <arglist>(const VectorValues &amp;x, const Errors::iterator &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad4a3b88ddf910a6405f63d763b82b253</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acf4c7b4bada301b7f92dda058f24b52d</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad6f8b4965c99bef9ae85b12068414171</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aa9e240383f54e40a3ce962eee61f812e</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8a183130d2d6c39b77733d01333b6c83</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aaf5aed4a7dce68271052b7cc7e6b4011</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3056d8664329f16ff0cd3e32aeb79f77</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4898c0c1a150bf26cc9c3fc06e00f669</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const std::vector&lt; Key &gt; &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abe2c6ad164a0c1c422682a6e30b28cc7</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>This</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa5ff7a930581421abeb3b93c1347fcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; GaussianFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae9e408910e2cb068adea00486d8274e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1b58d74e4489680e0d4a866bad4b0dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a1f73f4987b9bdaac5c1414a401c0364c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastSet&lt; Key &gt;</type>
      <name>Keys</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>aa57cdf3d4ced94670d520f0c25f62754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianISAM</name>
    <filename>a00104.html</filename>
    <base>ISAM&lt; GaussianBayesTree &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a876e1826e8fdfda05ef9636a11a813d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>afa79821d0c4b3f880bd60eacb7552f15</anchor>
      <arglist>(const GaussianBayesTree &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianJunctionTree</name>
    <filename>a00105.html</filename>
    <base>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianJunctionTree</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aeff8507ed504dfffa8f28dc7466bbb40</anchor>
      <arglist>(const GaussianEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a46850a5afd2d6af758c5209792cde593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>This</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a3d2cb56f10ff0b3920a1e57af73e3371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>af18233320fb77123cdc946164743704f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a1529a6dd032125b6d5f5cb43edbfd35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3167d3ced5564a8c79194b0b4cea53f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8c71f0fa9e244d82ffe5a4fdda17b796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8b149143e6d88e321eb6c36eef868d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6164aaee6d654dcd0001925247ac07a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aaf85cb39e2a6e53966785345c4203216</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0085cb64f469b9dc7834ceb7151cd66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTreeType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a61ab7ab0b2583e715019dbb4d48b0c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a796c7cf91ba804b49b819cac1af75309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraphType::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3850c41e5403c3cc2a9436900da9ea83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab549fa208bc8bde445e9efb2a96b77b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cluster</type>
      <name>Node</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a445e8a0ddc2570fc8ae1b8096b365b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedCluster</type>
      <name>sharedNode</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae49eaa9234ca5f87eb29cca32499b417</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a733460d568391cf1c6f5aef09d9a700a</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a2b76a4792f6d2d9a8fc487c00a93b48d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af1ae1fcaeddbd572eed2a241c49a4673</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SlotEntry</name>
    <filename>a00216.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Scatter</name>
    <filename>a00210.html</filename>
    <base>FastMap&lt; Key, SlotEntry &gt;</base>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, SlotEntry &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, SlotEntry &gt;</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8df951acad6f080ce8f19422f6df6ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const SlotEntry &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a897d43dde7fcaa7a83bd26c9883fa841</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::HessianFactor</name>
    <filename>a00115.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>acdcbc6dc5ead9bfdb6010f74bee3c8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a7f637f93694de5b61c160376f5702cdd</anchor>
      <arglist>(Key j, const Matrix &amp;G, const Vector &amp;g, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aaebd96bc8dc741f8509a173814df19d2</anchor>
      <arglist>(Key j, const Vector &amp;mu, const Matrix &amp;Sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>abb07c3bd55ff688700f82f6024bdf9f0</anchor>
      <arglist>(Key j1, Key j2, const Matrix &amp;G11, const Matrix &amp;G12, const Vector &amp;g1, const Matrix &amp;G22, const Vector &amp;g2, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8dd0c87ce694143e2ad42c48559f9883</anchor>
      <arglist>(Key j1, Key j2, Key j3, const Matrix &amp;G11, const Matrix &amp;G12, const Matrix &amp;G13, const Vector &amp;g1, const Matrix &amp;G22, const Matrix &amp;G23, const Vector &amp;g2, const Matrix &amp;G33, const Vector &amp;g3, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab2ee5cec5356d2ae6ac51c8c1c44ae0c</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aea53397c9d43a943410ca33a4d8953d4</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ab4d355478837b450288cb1aac6d2d7ba</anchor>
      <arglist>(const JacobianFactor &amp;cg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ae8dd0248da60828ce386aed28b5dbd8e</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5661391df1d96556ef8b4fdbd9713fc7</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, boost::optional&lt; const Scatter &amp; &gt; scatter=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HessianFactor</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>acf121e58f658a326d90565a8df34400c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ae3e77d2f6a4e3545a7cb67fd46c4d911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a6e73bf7239eec7624057397e1c558383</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0551bca4e74181363db78e1a16d082b3</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5a3967a824eb6f0271e8fb2f873a08b5</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a44d359e30e5f92ebbe68c910a9ce54c4</anchor>
      <arglist>(const_iterator variable) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aaef87a2a013921565416cde2fb14ddca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a7e7be81c3b7932abf701461c513c44c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a42ac976286cbed87fb8e7e161cdb0523</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>info</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aeeab111c957465b213649037e5807b6b</anchor>
      <arglist>(const_iterator j1, const_iterator j2) const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>info</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a158e1eaa0d08a468d1ecbdce41389918</anchor>
      <arglist>(iterator j1, iterator j2)</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>info</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8f07ab7fa0dcce3cec238f55312ea029</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::Block</type>
      <name>info</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ad6410138ac8dfd8bc3baa7307004b08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constantTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a91355ab0e99ba09b5ffd2ffc6ce36c2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>constantTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a08e4787abc98623af37e92babae465b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constBlock::OffDiagonal::ColXpr</type>
      <name>linearTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a6b72e1058874317982b8fa875ce9ac67</anchor>
      <arglist>(const_iterator j) const </arglist>
    </member>
    <member kind="function">
      <type>Block::OffDiagonal::ColXpr</type>
      <name>linearTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a4b3be553c6e2e3775b2d826524792bd0</anchor>
      <arglist>(iterator j)</arglist>
    </member>
    <member kind="function">
      <type>constBlock::OffDiagonal::ColXpr</type>
      <name>linearTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8f840dc28a102b3d6f1dafe074126566</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Block::OffDiagonal::ColXpr</type>
      <name>linearTerm</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5284a06630e7e21c9f478903f932aaf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aeeb0c54e17715de19e32a915aa62c1de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a69e5667425aca84874a2ae088ab724cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a2dfe6f007df9ad90df84e680a2587c48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a94a409339e4760fdff0e0464716fd96a</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8d95c8ce0ab4fcc115020223fbf2a236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ad9728a52f1cd1bb03ca615d78e0c1f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aad1ae597cac49addb44c8230bf445c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SymmetricBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aa16db31ef8cd9bfda78a60eefa374d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateATA</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>af5460c5eddf4ba8f640b507c15a356b5</anchor>
      <arglist>(const JacobianFactor &amp;update, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateATA</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac5f0b259a83cf8c271c62f105eb75b16</anchor>
      <arglist>(const HessianFactor &amp;update, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aa9e2d2401b846a39923d644e81c93501</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a8c9e7ae3b457d77ce645451872e73014</anchor>
      <arglist>(double alpha, const double *x, double *y, std::vector&lt; size_t &gt; keys) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a1d11716c73ff79dba1f03ad942c2d568</anchor>
      <arglist>(double alpha, const double *x, double *y) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a604488bcbf5ef1b0dec0cdbacfd8d643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0ea8fbdf94023909951ab02d906b3823</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>aa789851c9863ba4440fba3f3a0a93fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFactor</type>
      <name>This</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a0300131de1073bdca240aa56a41b5e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a10c151a4d4beb9d9af4249f4a02791ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block</type>
      <name>Block</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>af327feedf9d9e897e81fd0fb7254f3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>constBlock</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ad46fcd8ecbfad2f75caa390ac491fa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrix</type>
      <name>info_</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a9de862db7722018e839c909d6ff9236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::CGState</name>
    <filename>a00028.html</filename>
    <templarg>S</templarg>
    <templarg>V</templarg>
    <templarg>E</templarg>
    <member kind="variable">
      <type>int</type>
      <name>k</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a57ba7e407a63bdc77e53e8ff76985ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>steepest</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a0ec86902a54fdd09f879a398b60fb585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>d</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>af7b2174dd081a48416a7f4b3bdbeda66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a377969b240efda1b91aec68ac0fd1273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::System</name>
    <filename>a00230.html</filename>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>A</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a6c65ba9c94c3b9441092f359648357a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>b</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a6b44338a50d5b25f4d03d341f0f5d01b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a55937e1df7679b06a0ec471b989bf936</anchor>
      <arglist>(const Vector &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab07bfcfa21fac9c988279ff242a6fd10</anchor>
      <arglist>(const std::string &amp;s=&quot;System&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a4d8ffc229293a44af6d8a9644513dff6</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a58f67b98e250e933f9f238daabb6a004</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aecf432cb6c15d555935d49db199af906</anchor>
      <arglist>(const Vector &amp;x, Vector &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a16ad2b653c15068ec4aae70e7edf47c7</anchor>
      <arglist>(double alpha, const Vector &amp;e, Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeOptimizationParameters</name>
    <filename>a00133.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeSolver</name>
    <filename>a00134.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactor</name>
    <filename>a00135.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ab2464e09246b068f0184568507c89ad2</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::KalmanFilter</name>
    <filename>a00142.html</filename>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>af666c2bdc6e50678626c459e33792f0a</anchor>
      <arglist>(const Vector &amp;x0, const SharedDiagonal &amp;P0) const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a66e19a7b40a49dfc09f34abee13a6ef6</anchor>
      <arglist>(const Vector &amp;x0, const Matrix &amp;P0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ae59c67de8810536724f4e700ead70b75</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a33c3d983cf18299ca4d3a6c8643d69ba</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;F, const Matrix &amp;B, const Vector &amp;u, const SharedDiagonal &amp;modelQ) const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict2</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a654bc56017694b65822dd0f2a6d38b4e</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;A0, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model) const </arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>update</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a262b124d5d925c45d0ed30e3f9ed857b</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;H, const Vector &amp;z, const SharedDiagonal &amp;model) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key</type>
      <name>step</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a511b92f76e4d965f50f88a805af12ff8</anchor>
      <arglist>(const State &amp;p)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a0e169084c003be746ef37e980b8266a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QR</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a0e169084c003be746ef37e980b8266a0afe4c962f1946d431eece3f6cc794b47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOLESKY</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a0e169084c003be746ef37e980b8266a0a3c05176249ef6588f8c86cbdb3476772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianDensity::shared_ptr</type>
      <name>State</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a943f07d46bc01eac1070cd08fc193cc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IndeterminantLinearSystemException</name>
    <filename>a00119.html</filename>
    <base>ThreadsafeException&lt; IndeterminantLinearSystemException &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidNoiseModel</name>
    <filename>a00123.html</filename>
    <base>ThreadsafeException&lt; InvalidNoiseModel &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorDims</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a725a99a84ba90f5847f283c5c63ad7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>noiseModelDims</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>af1938d77a9e6086a0ffe9352bac15467</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidMatrixBlock</name>
    <filename>a00122.html</filename>
    <base>ThreadsafeException&lt; InvalidMatrixBlock &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorRows</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a59d61b85cd1f8048f26ce0b990d2c91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>blockRows</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aa31b41ba5908fca8f458ea7d49278f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidDenseElimination</name>
    <filename>a00121.html</filename>
    <base>ThreadsafeException&lt; InvalidDenseElimination &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Sampler</name>
    <filename>a00209.html</filename>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a8897148865655341dfe5d6100921bf2d</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>abaa73809a6420c7679dd68e38d14a501</anchor>
      <arglist>(const Vector &amp;sigmas, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad9a7af7941d978a69f4e2014347acc10</anchor>
      <arglist>(int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0a0dca1663e806212816ade57e3733eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sample</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a1cf882386b14989258a1eb711f407770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sampleNewModel</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a164d26245de683401725aee0899753f8</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>sampleDiagonal</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ae3155eabe44a06b77caa7883b46810bf</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>noiseModel::Diagonal::shared_ptr</type>
      <name>model_</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a715947053d2c801444799e4ce00e6118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::minstd_rand</type>
      <name>generator_</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0ddc4fbf3c56aaac845fac5ed81fd8d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphPreconditioner</name>
    <filename>a00224.html</filename>
    <member kind="function">
      <type></type>
      <name>SubgraphPreconditioner</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ae50d8b93049b8199ade906a4cfff4bd6</anchor>
      <arglist>(const sharedFG &amp;Ab2, const sharedBayesNet &amp;Rc1, const sharedValues &amp;xbar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>afb4b792cc5e1a83f8e1f7e4c9794c1a5</anchor>
      <arglist>(const std::string &amp;s=&quot;SubgraphPreconditioner&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>const sharedFG &amp;</type>
      <name>Ab2</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a57522bd999f11412e4b502182bf5c6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const sharedBayesNet &amp;</type>
      <name>Rc1</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ad154092e32c071716dcc84f72a3781fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const sharedErrors</type>
      <name>b2bar</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a60913018b7ced3b4a06706a51f4e6737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>x</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ab03b881f769275309d69daff1f33c1a8</anchor>
      <arglist>(const VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd2</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a354ee7b816ba40eaf7e962db9b4a7cdf</anchor>
      <arglist>(double alpha, Errors::const_iterator begin, Errors::const_iterator end, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a844e08fad5aa310f33fd8110477f2a52</anchor>
      <arglist>(const VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator*</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aeeff70959309047899d768b31e402639</anchor>
      <arglist>(const VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>acdaad4203d6c7a7f6bb46b3f0ff4af1d</anchor>
      <arglist>(const VectorValues &amp;y, Errors &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator^</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a8790ba2179d905b3f084acfd4347bbec</anchor>
      <arglist>(const Errors &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a3029cc92ea1648d98beb05ad89ad6017</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphSolverParameters</name>
    <filename>a00226.html</filename>
    <base>gtsam::ConjugateGradientParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphSolver</name>
    <filename>a00225.html</filename>
    <base>gtsam::IterativeSolver</base>
    <member kind="variable" protection="protected">
      <type>SubgraphPreconditioner::shared_ptr</type>
      <name>pc_</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a1cafec20fc12aca16e8bc941a3a8f087</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorValues</name>
    <filename>a00252.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a988c508cc8d20e1939860c8aaaaa3a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0330aaf355483e6a33fdaa94e12c0e10</anchor>
      <arglist>(const VectorValues &amp;first, const VectorValues &amp;second)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a40f31513b621026fec7510392c26e724</anchor>
      <arglist>(const CONTAINER &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af8e3b85870636b1d50e7c08d1dbbbf8e</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aa3b5d6aef3889375037a3d5ef62810ba</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab1c34a94fe8c328d8457cef3f89f0aab</anchor>
      <arglist>(const Vector &amp;c, const Dims &amp;dims)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>Zero</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a885faf91eb7f07439e5451f04a4e5a06</anchor>
      <arglist>(const VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>size</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a811bed1c6b1ef50cf60a906347c272c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a89e4c55ed111aff2f058b1c32ed73cc3</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ada9072680fdead2b0c8b42f62268c979</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>at</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab03d1f12932588561be2355626f230ed</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>at</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aec12d5ecfc2dde3be8328424ca0e18eb</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad71a3d9b8298374ed9abf94d6083e048</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae2f002506a85e3e5b62bd4fb0693c061</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae4c1243d76f1afd38159ef1a2a83efac</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a20f660c72a5a9102103f4063034f6ed8</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9b449e9f27d262ae7a8643e0056452e2</anchor>
      <arglist>(const std::pair&lt; Key, Vector &gt; &amp;key_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af6c435542f491fd89b51b7ac561a5d6b</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af593167bf32f7295e207165f6c7fad90</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af1014395c6fc9e2e20bc75032a9060d2</anchor>
      <arglist>(Key var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7a6c7c7af4d7459d2927ab0e137bd1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>afe41ec06f1b4f6d7cb2a6236f9d872f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8ac683a0af0d9b17595e11cb3e8f6a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a168c3a8ee35c956ccb3b46103393919d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a27600aa8eb3b4f9d27d453d85c1b2ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a6128bde222279e86c8848887d7f75ee5</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a188317f5d32dd161492a485e2937bf1a</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a117254eb5d30d311663c972e886f7027</anchor>
      <arglist>(const std::string &amp;str=&quot;VectorValues: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aff7c2f1d52edacc21e37bd8ba112a82e</anchor>
      <arglist>(const VectorValues &amp;x, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a35e7a4870e57793426f80375da731f02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aa8cc105fc395b9b10c9d150768eced96</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae61b647bafa39c6844926948ac9f158e</anchor>
      <arglist>(const Dims &amp;dims) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9d8e415b1824a37b2af45806f82a64a8</anchor>
      <arglist>(VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSameStructure</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8e3e3785cd9ce9f98163465824bd3ad8</anchor>
      <arglist>(const VectorValues other) const </arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT VectorValues</type>
      <name>operator*</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a35e8a1e6975a4a35751e8ba0541d7ec8</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ac55b7b8870f940930e0efcfccf4a0a43</anchor>
      <arglist>(const VectorValues &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7e62ebe3342c15a83f2dc06e064ddd93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredNorm</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a014a8e652c4212cae884883caaf2f193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator+</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a44316d49761b3f451938915acf114694</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>add</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a18c99a36ce0c5df5e6a906876227ffc5</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a35cd083b28f1ac519b4d8560cd1c7c01</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a5b7e8caf95ecc54f401bb15b44b31163</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace_</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a113286dd175a65f67732cd46c0badf66</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator-</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3dc341ae413769f56560695f9867a0d9</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>subtract</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3aeee6eb8cf88486fdbef1cc8e6f4b76</anchor>
      <arglist>(const VectorValues &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>scale</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a01a3be23405100752fcaf2df74144a81</anchor>
      <arglist>(const double a) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a04b9217857c65d86c9e988d99cea5904</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>scaleInPlace</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a946bfadd17cef38dc4dc02361276ead0</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="typedef">
      <type>Values::iterator</type>
      <name>iterator</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a1fb5672c19dff9542baa9375393fb3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0e8f05ac17c5ae99687b52f2e79a5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>afb2faec1f48011bb0b6c6a3d1d8c900c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::value_type</type>
      <name>value_type</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0e85b51f4c41dfd5226ec68bd7dac767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>KeyValuePair</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0b66147bf3245ff1d0ad75acddc3e116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConcurrentMap&lt; Key, Vector &gt;</type>
      <name>Values</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a51de7f0e81eeb8f1bf2fc59a3cc6d8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>values_</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a4d03169b0c16543a56924123f33850c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegParams</name>
    <filename>a00063.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="variable">
      <type>double</type>
      <name>deltaInitial</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>afc7c92d489fcbea53a1b645185e43e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityDL</type>
      <name>verbosityDL</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae6a2936aed619333036329c343281356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a485c77a8db945a892f4588f8ba9b0811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>relativeErrorTol</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a9525e668e93fbb60ea4bffeab963629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>absoluteErrorTol</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a01f8529b9f7efdd818e0d75134f1ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>errorTol</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>aaf5a44f1a3dfd67a8027a797641cc31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Verbosity</type>
      <name>verbosity</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a21971e7b985115acab326deeedcfe220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearSolverType</type>
      <name>linearSolverType</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a4d103fcbdff857b83e748011a69490d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Ordering &gt;</type>
      <name>ordering</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>af485749d046e54e52317b96311db3697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterativeOptimizationParameters::shared_ptr</type>
      <name>iterativeParams</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a22f0350290afc3b8f3731b67a4917ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityDL</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a857a8ae8ed6eea7960231b3359dfa349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SILENT</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a857a8ae8ed6eea7960231b3359dfa349acab5ce06eecf3de4a7962ada9558c607</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VERBOSE</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a857a8ae8ed6eea7960231b3359dfa349aad9f3f864ecafb2b5743f36b3e8a39a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Verbosity</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SILENT</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694a2f01214f8f0d837ef5ddc61461802e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TERMINATION</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694ae6c168005355f75d8d62fa1d0f3de11c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694a28688cb2a2d509040b28f49584339976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALUES</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694ae0ea8560c40e030d7f87d488edd0cb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELTA</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694aaff21a08bfabfcd34d2963125ef60ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694aeeda71b239a02d5987ec680902f2764a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LinearSolverType</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIFRONTAL_CHOLESKY</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203bac278a0aecdcaf16db53a3c6c442483a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIFRONTAL_QR</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203ba9e3f9ff1160f9476fc825547a00c9dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENTIAL_CHOLESKY</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203ba087813b7e257559299bef2643c829b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEQUENTIAL_QR</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203ba4cb25a1fff492601faf2c3ab131d3187</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONJUGATE_GRADIENT</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203ba6457f715010b5f4d091ae32722bab48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOLMOD</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203ba2f610dd5b3d689c2f0036f50f371613d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegState</name>
    <filename>a00064.html</filename>
    <base>gtsam::NonlinearOptimizerState</base>
    <member kind="variable">
      <type>Values</type>
      <name>values</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>afe161806eac32e78d841f7c3f23c5679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>adb19552295e25bafbc2aafd648c21627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a15c808cd21bad5b11e0231a4f305f625</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizerState</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>af332023d95f41aa560eb84c5232d4348</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegOptimizer</name>
    <filename>a00061.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a803a7052a5817fde973bfe18578aee78</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const DoglegParams &amp;params=DoglegParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1419fd81113aa260374a94a49fe882fe</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoglegOptimizer</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a40fea6de973f2432617156554808b765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adac8ca3c0a91f4184ff6b551a6c1bb93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>afa12c6282e0877099e8e0ed3c5f5bad9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4eecd09592f8ad7850a81266d8b60b05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DoglegState &amp;</type>
      <name>state</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a5c57de1313e9e8f4c79e33b1b30af305</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DoglegState &amp;</type>
      <name>state</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>acdb3e1e11f40c0ab32bc90579a2f071a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a0f5e401442270a285cd222fb047f4fd8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a6de9dab0f18ddb8766c3c5346f2aa711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimizeSafely</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a3f5f50cd14a0b2862b886f8eb9ffaeeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ade894676f4cb99ed05d961046b231faf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a8a5d9472d016ed784988c88c3a89ba13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>values</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a9e52df0eb76e16cbf7f86ba5bad04a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizer</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a6297e3156d51ab86449f1e254286589e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>solve</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>afe3e024ac6eae41c8a9378002317200b</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Values &amp;initial, const NonlinearOptimizerParams &amp;params) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const NonlinearOptimizer &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a7f69fa0d65bb8cca6344f64b8552e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a28f1e1207de8ab45c9c0e4e16d2db77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerState &amp;</type>
      <name>_state</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aa95d63c4aca22e31c361ee52a7be642c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DoglegParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ad1ddf4e112601ee6c2b20c398c60db84</anchor>
      <arglist>(DoglegParams params, const NonlinearFactorGraph &amp;graph) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultOptimize</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>acd13b9acb0d502edafac78c63815a9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearOptimizer</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ad16c430cc5fe90bc711dee512460a260</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl</name>
    <filename>a00062.html</filename>
    <member kind="function" static="yes">
      <type>static IterationResult</type>
      <name>Iterate</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa3a4d6c9aee3fc9fba5736ab2fbec96e</anchor>
      <arglist>(double Delta, TrustRegionAdaptationMode mode, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const M &amp;Rd, const F &amp;f, const VALUES &amp;x0, const double f_error, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeDoglegPoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a629407191f8bb0af5e17e70dfee5f249</anchor>
      <arglist>(double Delta, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeBlend</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a52e2bc3c253572fc7c11442f70f0b710</anchor>
      <arglist>(double Delta, const VectorValues &amp;x_u, const VectorValues &amp;x_n, const bool verbose=false)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TrustRegionAdaptationMode</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEARCH_EACH_ITERATION</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04ad304fcfe6ee23f76107dca8e8955658d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEARCH_REDUCE_ONLY</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04a527d4aff25d211fb52120e737a7fe3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONE_STEP_PER_ITERATION</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04a348e960743bb3569e2d04075f6a2a2b6</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl::IterationResult</name>
    <filename>a00132.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ExtendedKalmanFilter</name>
    <filename>a00081.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ab565cd7845bfcb116137acc261f9986d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>predict</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a8fdebb3b8dc58ce0bf2b04658479cf48</anchor>
      <arglist>(const MotionFactor &amp;motionFactor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>update</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a7a74801dac04bfd116b6016efd11fa6e</anchor>
      <arglist>(const MeasurementFactor &amp;measurementFactor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonParams</name>
    <filename>a00107.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonState</name>
    <filename>a00108.html</filename>
    <base>gtsam::NonlinearOptimizerState</base>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonOptimizer</name>
    <filename>a00106.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac6a87de7dcab376696ede784ccb5da0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GaussNewtonParams &amp;params=GaussNewtonParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>add3883c2df337aa134c62dd34460e1e9</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussNewtonOptimizer</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a9e82014dee82a2440113c0bef574bea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af9b77c6e0d1efacc9ba0c5058f3f9354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a2ca9da4f7adb21791fa1755ee1073e9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a2702d53ca3cff3cf73e2e1eccbd23c9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonState &amp;</type>
      <name>state</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a3f1e5da5ac711897134d1f49a354f020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GaussNewtonState &amp;</type>
      <name>state</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a917ab3b48a92f674f3d67739592a0a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ae8f4c86d72055b619e8c30b2bd600904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerState &amp;</type>
      <name>_state</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7e6494c3c77033666c4faa85abe6f47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GaussNewtonParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a57b8d7cbf27131c9fe6b3428604ae1ad</anchor>
      <arglist>(GaussNewtonParams params, const NonlinearFactorGraph &amp;graph) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2</name>
    <filename>a00125.html</filename>
    <base>BayesTree&lt; ISAM2Clique &gt;</base>
    <member kind="function">
      <type>Values</type>
      <name>calculateBestEstimate</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a6286d2228ca154de6ac53578933bde0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>afd9b2b9fedb892b1ad2e693fc3ff2cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a5130380ca3abf4b4f5aa20f91adb8b0a</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a8bd50bdbe5ed43178cf9d5fb910d63a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const VariableIndex &amp;</type>
      <name>getVariableIndex</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a472652a43229bccf54cf813fca81eef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FastSet&lt; Key &gt; &amp;</type>
      <name>getFixedVariables</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae6be91a80a65b83bfef01cf3b887cc4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae70946449f80755e160324a1902b98e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a25c1092b6fcc19ceae5d2d2bbf670936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ab79162caabd11ce503c7115c4e9f9419</anchor>
      <arglist>(const ISAM2Params &amp;params)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ade4c702ba582e744962b5bd403f22206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISAM2</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a35e0e8a7a31690c623e594774879ace1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9b98527791d435d53b65eb612a3ec2fd</anchor>
      <arglist>(const ISAM2 &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ISAM2Result</type>
      <name>update</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a0a851db28445c09951153f455acaf97d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const std::vector&lt; size_t &gt; &amp;removeFactorIndices=std::vector&lt; size_t &gt;(), const boost::optional&lt; FastMap&lt; Key, int &gt; &gt; &amp;constrainedKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;noRelinKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;extraReelimKeys=boost::none, bool force_relinearize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>marginalizeLeaves</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a12ce553da4c7c3ec09eeddcd3c322f63</anchor>
      <arglist>(const FastList&lt; Key &gt; &amp;leafKeys, boost::optional&lt; std::vector&lt; size_t &gt; &amp; &gt; marginalFactorsIndices=boost::none, boost::optional&lt; std::vector&lt; size_t &gt; &amp; &gt; deletedFactorsIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>acf80346fb85a3087eb8593cf06c53d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>adbae58b2829bff793d5722532f49c7fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a664136c5fc07560a6f724f6fe1f62501</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>calculateEstimate</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a449185d1435ad6d3b7f200cdeafb1a03</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a2e12466399ed8af08681f050ef8e2c3e</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a7b8c6b21d03dec49e26854d78567f80d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a55c8dc358ca26001624a7c2d0aac6a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>acf9de5e82e622bde098326b8b3f3e7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0b0167870865c611333c9717b2768065</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a06e2000ca60f20c4f23b44a11afcc875</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4e25ad0d1cfa322ea090c89f60c163fd</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a63c41289b4e14e237266b8760e5bcd6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20895ce5c831ede1be7245ae4e3ca6e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a61d8be0ebbec2cdab2d9438299defcb3</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5636653be9f5bfd84f84ebb78fbaf8e5</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a298383acab97fe45ff0f1baf324f9a8e</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6046377593973ae0adf0c3f3e974a753</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa4310d27fe63ced17dc8ef336752f832</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9f25b015c0a2b8b08113e566f6b707e8</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a0be61ae7efa710f1ace6a44ab3b30950</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac13ff7566e5700a730f88d24b774e340</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddVariables</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a5316a870bfdf1030d10352dbd51e0750</anchor>
      <arglist>(const Values &amp;newTheta, Values &amp;theta, VectorValues &amp;delta, VectorValues &amp;deltaNewton, VectorValues &amp;RgProd, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddFactorsStep1</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a6a5d2018ac4fc118a17bdfb63c68c9c0</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, bool useUnusedSlots, NonlinearFactorGraph &amp;nonlinearFactors, FastVector&lt; size_t &gt; &amp;newFactorIndices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>RemoveVariables</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa276ca41158724c833109858b3445abf</anchor>
      <arglist>(const FastSet&lt; Key &gt; &amp;unusedKeys, const FastVector&lt; ISAM2::sharedClique &gt; &amp;roots, Values &amp;theta, VariableIndex &amp;variableIndex, VectorValues &amp;delta, VectorValues &amp;deltaNewton, VectorValues &amp;RgProd, FastSet&lt; Key &gt; &amp;replacedKeys, Base::Nodes &amp;nodes, FastSet&lt; Key &gt; &amp;fixedVariables)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FastSet&lt; Key &gt;</type>
      <name>CheckRelinearizationFull</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a0761b9de06a4c8ab9ebeb5a1828d3fb9</anchor>
      <arglist>(const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FastSet&lt; Key &gt;</type>
      <name>CheckRelinearizationPartial</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>af0a4d62e5fc4b0a234afdaee6a74767d</anchor>
      <arglist>(const FastVector&lt; ISAM2::sharedClique &gt; &amp;roots, const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FindAll</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>afeedf56ea14f291d5824a5a66e9b250e</anchor>
      <arglist>(ISAM2Clique::shared_ptr clique, FastSet&lt; Key &gt; &amp;keys, const FastSet&lt; Key &gt; &amp;markedMask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ExpmapMasked</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a8e85e7c518f5419ada7e9f15b6706c9d</anchor>
      <arglist>(Values &amp;values, const VectorValues &amp;delta, const FastSet&lt; Key &gt; &amp;mask, boost::optional&lt; VectorValues &amp; &gt; invalidateIfDebug=boost::none, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateGaussNewtonDelta</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a347dac09a4a9251f4333e88edadf1113</anchor>
      <arglist>(const FastVector&lt; ISAM2::sharedClique &gt; &amp;roots, const FastSet&lt; Key &gt; &amp;replacedKeys, VectorValues &amp;delta, double wildfireThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateRgProd</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a60b0c4b3e3fbdbd3053c25e5a65919b0</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const FastSet&lt; Key &gt; &amp;replacedKeys, const VectorValues &amp;gradAtZero, VectorValues &amp;RgProd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeGradientSearch</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>abbcaf0d184a7084789d682d9aba888de</anchor>
      <arglist>(const VectorValues &amp;gradAtZero, const VectorValues &amp;RgProd)</arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2</type>
      <name>This</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7c4c4137185f8dcca2fd136936462919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTree&lt; ISAM2Clique &gt;</type>
      <name>Base</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>adfc37e7c222718cc8b3e76afec7e5f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Clique</type>
      <name>Clique</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a90a8a46839620cb74f9a965b425bf7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::sharedClique</type>
      <name>sharedClique</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a5fd7e27e3c0336ed65461ad36ec85618</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Cliques</type>
      <name>Cliques</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9b0db92a44543ba7ddf0b7f96c49a370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2Clique</type>
      <name>Clique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2::PartialSolveResult</class>
    <class kind="struct">gtsam::ISAM2::ReorderingMode</class>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3b9077906f134c0be1f0a552a9e2691e</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aec1117c687d59658c06a1c7407029e00</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69303acc37ffcd9049eadf04478093f8</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>abe3ea23a8d9b61097f28bf2a5c23057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>variableIndex_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ab9bd085bcf745368cb4801d04538ec18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>aa1a5f004e312d381945569e74e801941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastSet&lt; Key &gt;</type>
      <name>deltaReplacedMask_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a644b649b84015c840326b2e7b20eb15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>nonlinearFactors_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a9307a6fb614f33fb354e4e445467c258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph</type>
      <name>linearFactors_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ada63722602d709e210d4e1ab45dcc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2Params</type>
      <name>params_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>abec56652222d97d144e75a175ba3e8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; double &gt;</type>
      <name>doglegDelta_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ad460de94ada9813a2a9ca8ee8a953a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastSet&lt; Key &gt;</type>
      <name>fixedVariables_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ab430276f4d9455f957cf390e2d326310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>update_count_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a29b30773e68652011e31ee0a9a0cfa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2::PartialSolveResult</name>
    <filename>a00184.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2::ReorderingMode</name>
    <filename>a00201.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2GaussNewtonParams</name>
    <filename>a00128.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2GaussNewtonParams</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>ab1b9012a5a0d91351d13174c5208dc7e</anchor>
      <arglist>(double _wildfireThreshold=0.001)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a2d9c7345a550e3719689a75a4e203f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2DoglegParams</name>
    <filename>a00127.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2DoglegParams</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a68b79a86c44c9bec6549ecdfaf0cf536</anchor>
      <arglist>(double _initialDelta=1.0, double _wildfireThreshold=1e-5, DoglegOptimizerImpl::TrustRegionAdaptationMode _adaptationMode=DoglegOptimizerImpl::SEARCH_EACH_ITERATION, bool _verbose=false)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialDelta</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a929d62bcb7aefda2b8514a813360d272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aaf78f71297ce1a510acd290b3e7289f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DoglegOptimizerImpl::TrustRegionAdaptationMode</type>
      <name>adaptationMode</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a4011adf62546c0fca59e62c0522136b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a423adc06cbc8c72f89469d1c3eb24571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Params</name>
    <filename>a00129.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2Params</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab4737152c866e704c33d2da886a09bb5</anchor>
      <arglist>(OptimizationParams _optimizationParams=ISAM2GaussNewtonParams(), RelinearizationThreshold _relinearizeThreshold=0.1, int _relinearizeSkip=10, bool _enableRelinearization=true, bool _evaluateNonlinearError=false, Factorization _factorization=ISAM2Params::CHOLESKY, bool _cacheLinearizedFactors=true, const KeyFormatter &amp;_keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>OptimizationParams</type>
      <name>getOptimizationParams</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af3fd6ed6278c710380f66f7bc89b5a62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>OptimizationParams</type>
      <name>optimizationParams</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a228293673dafedcf900dc0927be66b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelinearizationThreshold</type>
      <name>relinearizeThreshold</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af5da340f5774c8ccbbdecfc0a5299888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>relinearizeSkip</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab914df94ba4aeff0d19293240f61838c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableRelinearization</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a39c7b95cdffb77c3f9b02c8b74d135d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>evaluateNonlinearError</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a6d72361621ace3e37e5b06eed1ef2a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factorization</type>
      <name>factorization</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ae9aeb4bedb786390f4c64e8217730cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cacheLinearizedFactors</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a63f4f566f792b1bfe55ced8c8d0f77c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyFormatter</type>
      <name>keyFormatter</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>af43c5940b56d327638b1a04bf8f85c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableDetailedResults</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a705057d0849755bb974848f57ca1482f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enablePartialRelinearizationCheck</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a086c925f9657f69bb87381f5caa35d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>findUnusedFactorSlots</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8ff00037b52caa1ac8ce81747dfd794e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; ISAM2GaussNewtonParams, ISAM2DoglegParams &gt;</type>
      <name>OptimizationParams</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a78914164d9fc6f601b2e41ed6f29d386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; double, FastMap&lt; char, Vector &gt; &gt;</type>
      <name>RelinearizationThreshold</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4aa076519e3f744b58c839caeb415dbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result</name>
    <filename>a00130.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getVariablesRelinearized</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ad6b7e5da6855beb4b942f6e82a64475b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorBefore</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a5ddf96680d6cac030d8862da98bcaba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorAfter</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ae57486e5d3d6592d0c08b4783baf2f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesRelinearized</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a0ef240bad454346811a3db6a28e2516a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesReeliminated</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>aa591562d9627adfff6641e1b7f217c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>factorsRecalculated</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a3d4494a9ce533ee7fac5acf6819f2484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>cliques</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8676d942982667bd0a77975c944c6ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FastVector&lt; size_t &gt;</type>
      <name>newFactorsIndices</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac7a12ba0399bc3af4c28f1cf13259ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; DetailedResults &gt;</type>
      <name>detail</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a7cc687e12fe3ad3a6fba651108fac6b7</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults</name>
    <filename>a00049.html</filename>
    <member kind="variable">
      <type>FastMap&lt; Key, VariableStatus &gt;</type>
      <name>variableStatus</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a2c6eacb3cc35ccb3906baf85345ee532</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults::VariableStatus</name>
    <filename>a00251.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>isReeliminated</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a67d788b600237f67b188f30e8f4fd124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAboveRelinThreshold</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a56611177d7b321070f779f35cb63cd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRelinearizeInvolved</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a32f8f901efa181cc9afd45e6b3739f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isObserved</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a3bc9383714196de8f55921f11114f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a4b92b1d5ff516b37acfbc42d619579bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inRootClique</name>
      <anchorfile>a00251.html</anchorfile>
      <anchor>a7318063c0257369484ba51e21c90b86f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2Clique</name>
    <filename>a00126.html</filename>
    <base>BayesTreeCliqueBase&lt; ISAM2Clique, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a65df62d31a1b1634ab9ebd9e2bbe32a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a19fabd19af262f6e8bda230a2efadc82</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ISAM2Clique &amp;</type>
      <name>operator=</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad8a8618f7967b50bc1b9e5329a38c98b</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ad79e1c0e71cabe328a510a571cc29206</anchor>
      <arglist>(const FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>Base::FactorType::shared_ptr &amp;</type>
      <name>cachedFactor</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a553ee8faff7f1780c26202f3ea5090fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>gradientContribution</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a258642ec073761b17ca0b151e126472d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ae2c25a6154b3725a75e9c3eb85b249b4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a570f9be57fea1e292f4637f4d429c47e</anchor>
      <arglist>(const ISAM2Clique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3ffd0d2bff6e8c5754cfb5d0ba21225d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aff971c9607a3ac5a7e9f740f6cb8196c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3a39c7c3d346f4faa093a7b5d434fbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a96a5b63a340e0e6c46cafc102056e878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6696fbf69939b7bcad4f0e56a9919265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a80fc17e3f333fcc091cc44d8884d8ac2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ada9e64fb7ad8867ef9b0505eb7c9734f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aea1567e2834ab8d38af635b05ad36cbc</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae43854f70b9ee5b58cc0a094af4cc333</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ace8901219f7513688ce5963d797fbdd5</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>separator_setminus_B</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aadd0edee5cc1310e601f709229cafca5</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FastVector&lt; Key &gt;</type>
      <name>shortcut_indices</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2e363015f5d7dd803476781e41c39da1</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtParams</name>
    <filename>a00147.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="variable">
      <type>double</type>
      <name>lambdaInitial</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a49aef82106661bcbd87299fa60209912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaFactor</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a0ff6f8698a3993eb6a2fe5720b5c45d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaUpperBound</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a465daecb791ab692aa14fe0405b64e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaLowerBound</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aad53fd303fc59476683c27e942f63ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityLM</type>
      <name>verbosityLM</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>afbde4b9a9a164eb9e3af824e0651686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minModelFidelity</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aa6ab26143bf0ebbada2c325a88ca3348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>logFile</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ae713aec0fbc945c84d7d18c966115674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>diagonalDamping</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ac5d85270de6828947a2d6e980a5c22a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reuse_diagonal_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a55235be3e1fbe69ca5282d64adf7df49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useFixedLambdaFactor_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a7a0d3cd2ac0008c1aadb7da564d77c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min_diagonal_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a5fb9ca98ffba84e5334ae19b523a2d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max_diagonal_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a822450c77c2fdd2e9170eddac967e458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityLM</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SILENT</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfdae5cf0acffe0dfd9e1509a73dd9c776ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TERMINATION</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfdac2564a115bd96a6e109e7660753dff4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAMBDA</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfda0b17ec3c1bc22460a1238c62842362ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYLAMBDA</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfda52548501927cd7385381c33eced42eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYCONFIG</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfdaeb1c226b0cf512577736b419cf9c301a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAMPED</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfda1445d6346db1e0cb814d936d6c28c8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYDELTA</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfda7c19c68b3613359834f43b9f67fbab09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtState</name>
    <filename>a00148.html</filename>
    <base>gtsam::NonlinearOptimizerState</base>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtOptimizer</name>
    <filename>a00146.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevenbergMarquardtOptimizer</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad3a1c3e2b30fefe2922bfbf5eef8bf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a6d73bf8c41aa2d0277471cb945dffc20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac5755a57214f4194941e5a7731b199fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>added9c618bf9f57e049563515c316e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtState &amp;</type>
      <name>state</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa181e1dafd02ec38b7881a6b045309eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LevenbergMarquardtState &amp;</type>
      <name>state</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ac7088191ac9125c162fbb3ff63d2ddf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildDampedSystem</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a87a579cc36d92238eb2c3634e48773d2</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afbc0d366428f3339505587ac0848e2f3</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a60a7983652beb250ceca41a8a3ca5d50</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad99d2d29ab51c17a543854e7e158ffe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInnerIterations</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8e40b7bd35b5f5243efcc96e1038bbce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2133d1324c98e7d99b9b15129ec50d6d</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aed14d9916e4b82e0b1c99342870ed95e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerState &amp;</type>
      <name>_state</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a18af123aeb18ef6b76415273e92f829a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a07d366eec0618ce200b812a0afa73917</anchor>
      <arglist>(LevenbergMarquardtParams params, const NonlinearFactorGraph &amp;graph) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a50092254b4c46a245634684a7185075b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>params_</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a2ec04e906630d56e30f444a879e69cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtState</type>
      <name>state_</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aeeea430651ba6f2c2fadcee428b21cf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearContainerFactor</name>
    <filename>a00153.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a3df136440d82f7ee96f45f5a0bfe8d9a</anchor>
      <arglist>(const JacobianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ade7ae78a7f514eafa8f0b95b4ec8192c</anchor>
      <arglist>(const HessianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a3b9d025a1624a404f8ed8dff8fd03c19</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a8f2ada1238470b1f8ab9b327c97fd7b0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=gtsam::DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a8c47cc5307aecad8cd585ffda014514a</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a39edc9ca742cf066d47a585ef5763451</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a3009f05cea1b39734a78cadf8569c6c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::optional&lt; Values &gt; &amp;</type>
      <name>linearizationPoint</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a046d9d97a96d9c27545e69392a23fc23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ae6a4b85b5d096a51ff7145b3b883ab08</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>negateToGaussian</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ae774b0c28f5ce36be0a93f42af542865</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>negateToNonlinear</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ad69fa5b1a629e1049903ad42104388ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a25f28b94d45a7ab7fa55eaa70b214e03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJacobian</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a52207aad1d22bbbda7655fb792a14391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>toJacobian</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ae16301ceffd4043c2c36faa23d52da79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>toHessian</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>aa9d3c640fc50267a7bfba8cc499a43df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>convertLinearGraph</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a20db85d054c765f0f1417ea1b4a22187</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear_graph, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a0a29b56bbe991b4e0ee8b4205b5a1b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a513eab0403b8af02730e086fbd7a2eb5</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const boost::optional&lt; Values &gt; &amp;linearizationPoint)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Marginals</name>
    <filename>a00157.html</filename>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a01013a1a59b793d9338c498eae0107fa</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;solution, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>af1410ea5bda0fa6e88cdad798e84a80c</anchor>
      <arglist>(const std::string &amp;str=&quot;Marginals: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a0454e81144a438be066a9bd5aae0106d</anchor>
      <arglist>(Key variable) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalInformation</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a8f3613583d486782ff4535dd49b3a658</anchor>
      <arglist>(Key variable) const </arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalCovariance</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a72725b4ec9f8730618ddfbcdd0ba52d8</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables) const </arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalInformation</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aff9594cec09117bdb69214a3924f9569</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;variables) const </arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a201eb50ae0aed6ac636e32ebb5f5d833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHOLESKY</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a201eb50ae0aed6ac636e32ebb5f5d833aff49d9d7de9587aae68ac105ffdf4b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QR</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a201eb50ae0aed6ac636e32ebb5f5d833a0d54b37ff1a861adbf4d995065e07021</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JointMarginal</name>
    <filename>a00140.html</filename>
    <member kind="function">
      <type>Block</type>
      <name>operator()</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a95a0f8a369f48aabd50ba09b5909732c</anchor>
      <arglist>(Key iVariable, Key jVariable) const </arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>at</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aa4b40efc98dddeab0379a2893a355094</anchor>
      <arglist>(Key iVariable, Key jVariable) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; const Matrix, Eigen::Upper &gt;</type>
      <name>fullMatrix</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a07a02e67fdb804d3bc16cee9d07aa8ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>a95f6b21fedc3aed2937dfdae011b2bbd</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>Block</name>
      <anchorfile>a00140.html</anchorfile>
      <anchor>aaf1e43a180b3ad856ddc566462d29ae5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearConjugateGradientState</name>
    <filename>a00168.html</filename>
    <base>gtsam::NonlinearOptimizerState</base>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearConjugateGradientOptimizer</name>
    <filename>a00167.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>adcdbda12c7ef744763c23e7e7864238f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a8f845cc802ea938cd9d81cd23bbc4db7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality</name>
    <filename>a00169.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a889bc82bedc14a8900ae63325b709445</anchor>
      <arglist>(Key j, const T &amp;feasible, bool(*_compare)(const T &amp;, const T &amp;)=compare&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a1fbdbc55009c272ff77c125fccc89929</anchor>
      <arglist>(Key j, const T &amp;feasible, double error_gain, bool(*_compare)(const T &amp;, const T &amp;)=compare&lt; T &gt;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a6641562c13421c003dc60e226b79de54</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a3c42832dfb457819a39366e562e59d36</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a4ddf63b7c6c4b6b90c936040a2ae3e64</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a14d43289cab9aef77aeb7baa8cce59ad</anchor>
      <arglist>(const T &amp;xj, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a117f0295401501aa39ea2ef9ebbdab08</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a1fba323e8d1f274e1d7d4eaf4b6d3655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a925972afca1aa82cf9efc736ef7a21d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a886bb13688a62b2680c10cdaf7999918</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="variable">
      <type>bool(*</type>
      <name>compare_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a9a608c517b8f17e574b784047afff84e</anchor>
      <arglist>)(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality1</name>
    <filename>a00170.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a900084358bbc4c0a9941261f3b1aadfb</anchor>
      <arglist>(const X &amp;value, Key key1, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab18a6fc00371da0d3d4310f3054f5c47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a506149df29200050c7ec8c390812d884</anchor>
      <arglist>(const X &amp;x1, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab4f69055e267877a2b778d15fcf965a3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a616d0335db512e9c333cab83b1923399</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aa331a1cacd4c4c69f2d8386d3f8cd327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_MANIFOLD_TYPE</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a7c45b712715c9eb953d7d4c671df432e</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality2</name>
    <filename>a00171.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a048b07dd50cb3980b1f5bab45c5666af</anchor>
      <arglist>(Key key1, Key key2, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a28648f47d4402d847b670f0c2895e8b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac0536c3779c6aa1250d45edeb6b118fb</anchor>
      <arglist>(const X &amp;x1, const X &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a682e0bbaf0c9638b7d0d96148082d1d7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a4241fc68993a6345b72ab34689822922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MarginalizeNonleafException</name>
    <filename>a00156.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactor</name>
    <filename>a00172.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a758285fe17213cbf9c23b9f42fb960e6</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a38cdabb3302973815e357bd00573734a</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a8e67e58ff0e4f9d58f07e5eb227adc52</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a5f0fcf1c93ded207d4a31e8ede07d797</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3b78e8d20d94c6f6945c2465f7fe3fee</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>aa98a30a78ade8489214ce2e5b8302777</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor</name>
    <filename>a00160.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>afd61874915a8076bf83f9d8311fc0e26</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor1</name>
    <filename>a00161.html</filename>
    <templarg>VALUE</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor2</name>
    <filename>a00162.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor3</name>
    <filename>a00163.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <templarg>VALUE3</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a535f2bec61538509696513b2ab6bbf0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aab8e3316ef77cecc1bd1909a2c0eed33</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor4</name>
    <filename>a00164.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4339880be87fa2a533aa07324481f7b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a6a79ae22fc40447c8dc183a951243440</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor5</name>
    <filename>a00165.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a424c4633f6c1907d0dd3381cffbed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a01d2e8a5253a67ceac02320a719c5280</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a23886196ba086677b1e2168e17a34280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a701b7a764f18310b4eea14ee023c922b</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>af0adaca3d551e42404aaf98c3053b009</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor6</name>
    <filename>a00166.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a15bcca054e397e486fb9dda0d0436cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad3d89a85f0c70d7a424f2060d514cab9</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a587ce14373742350ff30a78c856ecaa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a945d269f9a722d585e3332be23030450</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a896a223b88b621bfe9f45bf8e2cd9960</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::GraphvizFormatting</name>
    <filename>a00113.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphvizFormatting</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a28cc4181d43026077d292c8f7bbc93a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperHorizontalAxis</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>acd47a7fd6c759b84610f2f0c8643cb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperVerticalAxis</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a2510b8d60ade59a0cb2eb20bdeabefa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureWidthInches</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a956beb8694084f8d8867b0bec6a84459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureHeightInches</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae78b1146dd869627a7e103669d96e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a7f90a6942877030cb1234c33fbc74755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mergeSimilarFactors</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a7be882956fb690537dffee6b657bee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>plotFactorPoints</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a37e8753118a817a2b736f988bfbb525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>connectKeysToFactor</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ade060391ef247c9263b2ff50ea2629f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, Point2 &gt;</type>
      <name>factorPositions</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a8a11a96fd9d6aa85116f6c8ddc886b4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactorGraph</name>
    <filename>a00173.html</filename>
    <base>FactorGraph&lt; NonlinearFactor &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a08a2bceb4013a4ffe20c27f76aae7a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ab1ca065994632164fe3986388d847604</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a955686c166a967d8fc4884d65cd4ce56</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>acd147df7d707f0486daf2b9936b08d71</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a43084725945d3a15f6c9ae642f5f803a</anchor>
      <arglist>(const std::string &amp;str=&quot;NonlinearFactorGraph: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ae3c38f64fbff53cd1610029059da0970</anchor>
      <arglist>(const NonlinearFactorGraph &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>af4fe6c4a779bbc8b985ffdb6b55c3227</anchor>
      <arglist>(std::ostream &amp;stm, const Values &amp;values=Values(), const GraphvizFormatting &amp;graphvizFormatting=GraphvizFormatting(), const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4c8efe5949a8b2bcddc165264358e4b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa28a06741d0b57804ed1ee22c496b506</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a05ec0a5ca8294be8934fbf8315c1345b</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; SymbolicFactorGraph &gt;</type>
      <name>symbolic</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>accfb7f4d521006b560a364f1299f8702</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMD</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>af48e8be39fcb9eae4f70e3b60f0c74d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMDConstrained</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a21910081ed385d4c41bc01a268a7a8d0</anchor>
      <arglist>(const FastMap&lt; Key, int &gt; &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactorGraph &gt;</type>
      <name>linearize</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac46f47f647ac235db105cdb7c6359ca5</anchor>
      <arglist>(const Values &amp;linearizationPoint) const </arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>clone</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ad9fd4a6167cd53edd03661e21929dacd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>rekey</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a771a175bd35d1624ca0b633ae72291f8</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af8b13e529cd72a6818bb6ba5f0c11e3d</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a26083577412fa7b8fe662e429b9cf0d3</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe199305b22ef83f0892f9bf973bd926</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a305e4dd40d4359e96e6470c650ba7abc</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99b708bc2cdf66a45a5c82ddd2ad3588</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae91e8af4e6b26a63ce87fab01a68662e</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt; &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a462ad14c1c426d32f155ce1d399ed986</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3a2a1f0d3e8244eb018f8a5354e01f4c</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::enable_if&lt; boost::is_base_of&lt; FactorType, DERIVEDFACTOR &gt; &gt;::type</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc23379334fc72eda42452d32ddda70a</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab1463be458e078b80120491d07200d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfed7dd297f87d0ed722ac2c244aa16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6e34df4521fed17a62d44a2a5ad4809b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aee77529e1cb7a37081466b1da107a121</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acff509b2026c9b4f3109b9bf7a2111bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae934611f7df29d4b7c91c3d47bba5c91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a941dedb8c880c2872af99198e698d833</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7078387953fc7cdd1034566093bea3ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a51aa826bbac6540e47549341daa6b484</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac36569fa38d0a0c309b890239c8bdf21</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aae502eb7fcce93be910bc8ded658dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FastSet&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9a52b2c892dc9b3bde4d390de1d31b27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a727420c3b3fb5fc5b523897a23da2d8b</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad3659a6aa29bcf0a5496b6f37b2e83f1</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactor</type>
      <name>FactorType</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NonlinearFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a99243008d87c0dfc3935c946281c87f3</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearISAM</name>
    <filename>a00174.html</filename>
    <member kind="function">
      <type></type>
      <name>NonlinearISAM</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>acce79d0a1cb22a2874f3b15c3a2bf0bc</anchor>
      <arglist>(int reorderInterval=1, const GaussianFactorGraph::Eliminate &amp;eliminationFunction=GaussianFactorGraph::EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>estimate</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a47971c703bcfa4893180c796f3e498ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aab0dfdab7d58675bf953220f1369d5d6</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>const GaussianISAM &amp;</type>
      <name>bayesTree</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a34fc007f2d5d613869d217133975d901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a474d68422a20639b8926caa4eec254b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>af086a430e64feb173465e8794a876c52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderInterval</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a70c6267c25926d6ebca5d3caa1e04845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderCounter</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>abc9c9840bcb83c74912d5cceff049ae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a529d864386d1de8bf84b4389fc9a59d4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a5d0af6935fc2483ea5f612b974f78597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a837da55a98397202bfd927d2dd26a332</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a11c6752e75625cd1532a5a6503c4d7cd</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;initialValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorder_relinearize</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a8098f317cbc91772e3988ae70d775b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gtsam::GaussianISAM</type>
      <name>isam_</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>afd3d7d897197b0a60a8e25dc68c588fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>linPoint_</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>aed05de793f4fde627a4c234bbc38a8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a3abd8344c16dc519209aec578a9f56df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reorderInterval_</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ae53203f6b84dc0f29f9fb52afdc49fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph::Eliminate</type>
      <name>eliminationFunction_</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a177189467b87cc41c92f03e3d73b283e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizerState</name>
    <filename>a00177.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizer</name>
    <filename>a00175.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>iterate</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a18fccb58fc1890327f3af6424a0c05e5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizerParams</name>
    <filename>a00176.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ValueCloneAllocator</name>
    <filename>a00243.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesKeyValuePair</name>
    <filename>a00002.html</filename>
    <templarg>ValueType</templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aa928242396405483048bedd4a00e804c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae0b729df9ea00bfe21c8f127881eb7b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesConstKeyValuePair</name>
    <filename>a00001.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ad1598dd19527916716fe26a436e62a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>aef604e97b3cf7d6d4036d11e341f89dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values</name>
    <filename>a00244.html</filename>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac89ea920394cd12d23ef576745351ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a42d680607104698e3ec00c50bdb2021e</anchor>
      <arglist>(const Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>adb659e595951677d69b6f2f4f88b6b57</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac698795ad2e3bd3d5acfd92bfea20ae7</anchor>
      <arglist>(const ConstFiltered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>at</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a8f1fbf8f756e4a77248e28a06b688aac</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>at</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a249c519801ed73b37cc4cda1df3d2ae3</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a5bddb9b60eaa9d2533027fd8af982a71</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; const ValueType &amp; &gt;</type>
      <name>exists</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a3201af03e5b9bb6d068bee64bf2abfce</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a981545f725c25709db8f2cb394b190a6</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a5b1c36ae828657eac6ae5a464ce85f99</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>adc3ab6193944103355a4e71b6b2a9a63</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a7b5a1bbe20e68da9a229a80ea615ff4a</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a106a1809a5e32684aaf1ea7b6cdfe6d3</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>upper_bound</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>abcce5d305be9330d377629a807da54ab</anchor>
      <arglist>(Key j) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a45397c2172fd42438696d23a5e349735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a47a3bff6cfd2c033da92ea9d4f473d23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a79059464a7c6ed07fc862acc9e7b57ce</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac9e64bbe570c986d3d31c43813f78df1</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a47bf2a64ee131889b02049b242640226</anchor>
      <arglist>(Key j, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ae6ebf1135353767eb2e2d93b14103a73</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a72c58892f5f8f79ee8c7e117266be625</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ad75147b6a76d80763b02150eeb6b3c67</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>KeyList</type>
      <name>keys</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>aa3fed18d9e212b9f17bf037b3efc041d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Values &amp;</type>
      <name>operator=</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a58cb43149f15172352bf89f05405609e</anchor>
      <arglist>(const Values &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a70892957dca2e0587692b6a9de5086c3</anchor>
      <arglist>(Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a5e547bfb256c5df17398d3ef9eed183e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>abfb75ee7ffaa8f8f4d90444311bcaa0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>zeroVectors</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ad8c0ba893f1e45f26303ae10a27e74ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a4e08f3caa567a068164ee2ebeed15693</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn)</arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>afd9a219865cd14126851815406684d5a</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;)</arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a8374d5d367a9c240f9f3c084c9975da0</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn) const </arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a032523c33e3114acca04059b8ec9517f</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a2ad834d79aeb112cd0cb9182e0bd9f55</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ad9020766228ed8ad5bfa9de32b73fdda</anchor>
      <arglist>(const Values &amp;other, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>retract</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>af19cacc6b1e0831e8702c235bc5ddf16</anchor>
      <arglist>(const VectorValues &amp;delta) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>localCoordinates</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac98063d4f84d363cb9ffe2b8c69cba60</anchor>
      <arglist>(const Values &amp;cp) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a5b2f07b6054d9ea06b28876a057938d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Values &gt;</type>
      <name>const_shared_ptr</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ab252aa072e35ebbbb614ebc51167f7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; KeyValuePair, const KeyValuePtrPair &amp; &gt;, KeyValueMap::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a7930d8671f25a0604e84a134380846e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; ConstKeyValuePair, const ConstKeyValuePtrPair &amp; &gt;, KeyValueMap::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>abfc9e250c5454e0063b75a9c3fe9d4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; KeyValuePair, const KeyValuePtrPair &amp; &gt;, KeyValueMap::reverse_iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a497df9fe2469204066c9dd56b28b7ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; ConstKeyValuePair, const ConstKeyValuePtrPair &amp; &gt;, KeyValueMap::const_reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>aa2ede6ab4018b3bd9e66b0b18cc1887c</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::Values::ConstFiltered</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::Values::Filtered</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::ConstFiltered</name>
    <filename>a00041.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>ConstFiltered</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a61101d5dad7e56d12e308d4c475314d8</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a60d59fde8e1944f8440813a7c691f541</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesConstKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab19780909f6d4cd5dbeee01aa88d07ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::ConstKeyValuePair</name>
    <filename>a00042.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1e4447d2022b8a70fabaa877641b63a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7fcc2317ca95dc55484dfa17dc31587d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::Filtered</name>
    <filename>a00093.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a86c9047e615682b8144644d1dd76e596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a816979e5f4619b22258fe2abd87da92a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::KeyValuePair</name>
    <filename>a00143.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ae8240622f321ec9a81a9c41679ca530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value &amp;</type>
      <name>value</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a512e61d8416f2210a0c41a0a96232b54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyAlreadyExists</name>
    <filename>a00246.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyAlreadyExists</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a6e0a29a56b47b914825e48922ffccf98</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>ae788272830cccbe8cf80d32704994f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a24ed3b196372990836f1ef7e13ff7104</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a5c2ccda4c15caefd91d0308d8b76eb53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyDoesNotExist</name>
    <filename>a00247.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyDoesNotExist</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a649684a7beaa8e3a8984bf647d2d8711</anchor>
      <arglist>(const char *operation, Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a8db849d9dfcc06c662142fb1a63411ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a114a49952540e5bba0945a40e1d88666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>operation_</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>afe3dbeaa3cc012754d8359a1e517a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a433f387db342dfb0b25c7438fa42f58c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesIncorrectType</name>
    <filename>a00245.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesIncorrectType</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a0fa552c7792b4f90fdfe36e4d73a2189</anchor>
      <arglist>(Key key, const std::type_info &amp;storedTypeId, const std::type_info &amp;requestedTypeId)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aa6b1fffa6907ba35f2f58ff5ce0af63e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>storedTypeId</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ab7fa8cefce457c10dd5fb7fafd584750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>requestedTypeId</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aec3ad1b32a9994fc72f99859f690ae29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a9998b94af735653cb1734a12bd7d2cf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a6303f8c7ce66e97c3107fd4f6cf24d28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DynamicValuesMismatched</name>
    <filename>a00067.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::WhiteNoiseFactor</name>
    <filename>a00255.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>WhiteNoiseFactor</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a92b88afb4ef2a76302f9ad7694636bce</anchor>
      <arglist>(double z, Key meanKey, Key precisionKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WhiteNoiseFactor</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a02c5c42b104e4495ebe7872667025c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a7b72884599deb93b0e4610e56b38c783</anchor>
      <arglist>(const std::string &amp;p=&quot;WhiteNoiseFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ab00b204ac37f9408be936154dcf42193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aff3d5ed6b124abebe66f3cf25be88d62</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a1d0e910487526d5faeae5b2bfb75672f</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a55d6897300f6fef9c6ec3d9fd705aee4</anchor>
      <arglist>(const Values &amp;x) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>f</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aaeee41e0aa000bcf053826fec43f2086</anchor>
      <arglist>(double z, double u, double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HessianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a66ac8a770883fec0b220cdd4c2b1446b</anchor>
      <arglist>(double z, double u, double p, Key j1, Key j2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AntiFactor</name>
    <filename>a00004.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a344e9905b3dbb09d34599cf6c59ccbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0db982b2aa42e353e2c17e0ebf379602</anchor>
      <arglist>(NonlinearFactor::shared_ptr factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a2d5776828c0b78fbacf8c27662c18581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a8026e59273a8269cbc9d7ea4b20c35a8</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae93887fc15b65eae9322aba528aa0848</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ac1302b6b18338bcdabb2c68c50463903</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae4dc87a7ecdfe5e8c4f39067925b71b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a729ae32d86229976f053f190cb685744</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a08fda4fcad4c2220ab7a81327f44978b</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BearingFactor</name>
    <filename>a00015.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, POINT &gt;</base>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a211c60c36c2bf6905a97f9fac44745b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a76e4e6614d2d878408905479856d7e20</anchor>
      <arglist>(Key poseKey, Key pointKey, const Rot &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af34e8a0930b2263a3fec11f724278870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aac449509c1225974f545495c0c0252f7</anchor>
      <arglist>(const Pose &amp;pose, const Point &amp;point, boost::optional&lt; Matrix &amp; &gt; H1, boost::optional&lt; Matrix &amp; &gt; H2) const </arglist>
    </member>
    <member kind="function">
      <type>const Rot &amp;</type>
      <name>measured</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>afd60747a3134993836fb8703635e5b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac03fbb4c7f32fe7ea81ee72a8e068e0f</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae887ef6b2f870bf2026a2df4055b5748</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BearingRangeFactor</name>
    <filename>a00016.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, POINT &gt;</base>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23e967f6327db10c9c6c0d37c9812265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae55c059517416cb2485e3cf33e2b6ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>add797efab6d85e232e0288c0aa1a5e56</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa1b49e6faf1063b8fafcb51afc7fb6e3</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac24cb242f8d7750e7374e58522c52f64</anchor>
      <arglist>(const Pose &amp;pose, const Point &amp;point, boost::optional&lt; Matrix &amp; &gt; H1, boost::optional&lt; Matrix &amp; &gt; H2) const </arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; Rot, double &gt;</type>
      <name>measured</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aeca66a0cadde408c80f6ccbdf1281e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenFactor</name>
    <filename>a00018.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a059852c5e2a89302b823baae2de62676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0ab8dd8469f463d46e237ef60695d8c3</anchor>
      <arglist>(Key key1, Key key2, const VALUE &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa07be4a5df4fb9747b70685d8837bec0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa4ba6a9fd9c8fac77a38f49fb8cdd7ea</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af7a58e12da5e1b0659f3e1ac92b32690</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a01edf574f8c0b955c20dc7f18a92b3e9</anchor>
      <arglist>(const T &amp;p1, const T &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>measured</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39bae920151a39d1330ff51069118dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>af9b1cc530d3a6ac7b2ede595fb77a92e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BetweenFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5f6d47911015651afe9139f016c04420</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenConstraint</name>
    <filename>a00017.html</filename>
    <templarg></templarg>
    <base>gtsam::BetweenFactor</base>
    <member kind="function">
      <type></type>
      <name>BetweenConstraint</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a58f473a74ca49a13084db2d076278baa</anchor>
      <arglist>(const VALUE &amp;measured, Key key1, Key key2, double mu=1000.0)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint1</name>
    <filename>a00019.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint1</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a936b8b1a987ef137f1b6d4bfbcc3db9f</anchor>
      <arglist>(Key key, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ae8d1b604f8580bfd89940d1154b66feb</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ab0719d8fc685ccdb85c82af3b6344dff</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a63486093c5fb286ad0d35b0e2112ffb4</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint2</name>
    <filename>a00020.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor2</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint2</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a80055453c5f4edd96aab215831371aa1</anchor>
      <arglist>(Key key1, Key key2, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad1415ee808cefd215e6410c6dd9f4f51</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>afbc9f828f207fe46761426754f14306a</anchor>
      <arglist>(const Values &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4cefe6c654e4c63b5e3ac2beca10b74d</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfM_Track</name>
    <filename>a00213.html</filename>
    <member kind="variable">
      <type>Point3</type>
      <name>p</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a3b0749667c1a501b3864877e48a5ae00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>b</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>aab5f19d4369af681c38fd338f8292c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Measurement &gt;</type>
      <name>measurements</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>ae34699ce69a1ecaafb014daf95616da6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfM_data</name>
    <filename>a00212.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>number_cameras</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac4aa193331011130a93f797a0d628548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_tracks</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a63b9c54d57fa98415233020e11507cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Camera &gt;</type>
      <name>cameras</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a55347b51c4b7dd02f59f171fd2dcbcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Track &gt;</type>
      <name>tracks</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a2e55cfa83dd822a61fdfd2fd4ae47ed4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixConstraint</name>
    <filename>a00077.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Pose3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac03a28866f89ad12046904c7c0cff4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad7a49abd9aa91e0671eae13becc08ca0</anchor>
      <arglist>(Key key1, Key key2, const EssentialMatrix &amp;measuredE, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a1b4dea833608119997baec3f05162955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a7a735dd1d475ae8f05a69b56a99d3ac2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a82b57f56fafbec442a34e04f7cd23f5c</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad25e8892c58f9c5395bfac251e570b70</anchor>
      <arglist>(const Pose3 &amp;p1, const Pose3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; Hp1=boost::none, boost::optional&lt; Matrix &amp; &gt; Hp2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const EssentialMatrix &amp;</type>
      <name>measured</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a6e317214ec1cbcefe67a1e62ff62317c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8fb2646db8f197c179557aed38601c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; EssentialMatrixConstraint &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa71b27df9573bff00b1a95c0fba271fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor</name>
    <filename>a00078.html</filename>
    <base>NoiseModelFactor1&lt; EssentialMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a9edbb5ac88824e6c9e87b5b979e5b5a5</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ae683f489d5cfad2f4ea6a9840820808c</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac0c66faf7d8a3ac8e16fc35f09689d9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a746727a5e43f0adf31c3dcdfb12ee49f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a74623d11b896657a1ad3454480d2ae99</anchor>
      <arglist>(const EssentialMatrix &amp;E, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a886bb13688a62b2680c10cdaf7999918</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor2</name>
    <filename>a00079.html</filename>
    <base>NoiseModelFactor2&lt; EssentialMatrix, LieScalar &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ad5fe19b4fbbf5721eaf7e3e59aa313da</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a88adb03636bff678c71f1f572b9cf5b4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ad1b92b3c6a8f8141198870f027163765</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a2c0be2f6035a0d00709398a2c20acf1e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a1c0ad85dc10d1b9c9def66ea640716d4</anchor>
      <arglist>(const EssentialMatrix &amp;E, const LieScalar &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor3</name>
    <filename>a00080.html</filename>
    <base>gtsam::EssentialMatrixFactor2</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3168c36b93a9ebda9c7c001b90936be4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a919fad59dac5dc1d750e8c8a3af53c4d</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aec071cf8112a766ae2682edb47513fc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a615f64fc964f641bd96b5145695b9892</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a4c2edf7b7be5a01533a3185f217dedab</anchor>
      <arglist>(const EssentialMatrix &amp;E, const LieScalar &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor</name>
    <filename>a00109.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a6597e39575729001daec1f975cee4bd7</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key cameraKey, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a65b2030a4a080aa03d6fa2ed183e5093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ab4a204f23fb77bacf94dabba6aa3e6f7</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>add5b5e3afab2f22d30df78104bc9fd00</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralSFMFactor</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae6a452d862aa5b2f9402a78ed5ec8032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a78e1468aeb79a2046b05c7b41418f240</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a24abf2096a9dc8abb14da254f8446004</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3794b669e1cc1b31e751521e5cbcb32c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3d658dfd552ad585016904b0eb1c292d</anchor>
      <arglist>(const Cam &amp;camera, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2e6e0b1a46e097e06d7c332ed538379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>CAMERA</type>
      <name>Cam</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a75c3c25a46f4b90d0411d85be9725c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeneralSFMFactor&lt; CAMERA, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a666ae4717c664ab751511226b5135d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a98fbb3f015804b390e4a6ce485fac27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a0bd75dc2d11cd3dc944bf46e12b5043d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ad207a707318ad32b2bdcaf6f8400c8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor2</name>
    <filename>a00110.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a9edba229f8eb9818477c7cc2a4a49b38</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, Key calibKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a35cb09493e3196e3ab58049a8923a2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralSFMFactor2</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ab3862f134ada62ef690c44594c780188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a2cea9c3a844eed5f918cd8df4b1b43ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a0fe82cbe419b2cf74326a606dd9800e1</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor2&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac3bc5d224a298534008047a177d33b6d</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a0aac35bbbdd0b1172c635f90b81b3574</anchor>
      <arglist>(const Pose3 &amp;pose3, const Point3 &amp;point, const CALIBRATION &amp;calib, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac6ee5652b2d2efcaff98db1a2f2f7c30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a535f2bec61538509696513b2ab6bbf0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aab8e3316ef77cecc1bd1909a2c0eed33</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a998a6c897312bb10c30604ab4e4176f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</type>
      <name>Base</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a5a334159f6da23d4f4ff1fd35c9b8ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a469666733d67b20042f3bea64488f19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a83ff3c06799436d67e7d841de2fdb80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ImplicitSchurFactor</name>
    <filename>a00117.html</filename>
    <templarg>D</templarg>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>ImplicitSchurFactor</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a1a1f1912b25ca3c46bb2eafb10efcfe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitSchurFactor</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a47fbe7cc0baaa19597ef800827134370</anchor>
      <arglist>(const std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initKeys</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a6056b3b1ecb27486ef4403ef5cb01e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitSchurFactor</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a066c4e36a6c4cdc90ffe6c33de231e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getPointCovariance</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a43b2dd3c1c1f75eaedd76fb0b05d35db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>af5c83d69606d67ff3b9f4f4a17a84eba</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0b9f0023dcd38a91ac93e7ee987cff47</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aa7e92f553dbddc7cbf31b47bbd4f7b20</anchor>
      <arglist>(const_iterator variable) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aaf3f1b884aab189e9aeaadb6e2f7fda7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>af0e5582b543b01ceb14054e70edecfff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a66e62214764bc3e0595d362d8a37e435</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0f02cacb201f836ce183090d1bb58975</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>afe64a1326d2dfa7c3c382203781df0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a75602fd137f352b61e256224b2a5044f</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a27b4db032481b6840a4b473e66a49a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ade60b503650184549747553f33b9a03f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a32d23948319f667a29b5341f030ced3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad9d8f806fa25b8134333841bde82584f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aa770e8da25a2e555061bfafb015fe4d3</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a7587fa0372decbe05343e8ccaa27e750</anchor>
      <arglist>(const VectorValues &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a8b1216090c93b1f14a0e4b74d5998bf1</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a84c0d98e483c530ceb815e09e4b81d1d</anchor>
      <arglist>(double alpha, const double *x, double *y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a5e5c90c0f37070abfc57253bd611d733</anchor>
      <arglist>(double alpha, const double *x, double *y, std::vector&lt; size_t &gt; keys) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a87a94c577b82298e9acd352c608bb795</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianDummy</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ac481488f692fc2c945861b9e94a160d6</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a306212dc1091674ad60ddb5f2d830a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a01104e110c6a52caed27d74fe792f666</anchor>
      <arglist>(double *d) const </arglist>
    </member>
    <member kind="variable">
      <type>Error2s</type>
      <name>e1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a51ef8ab9d606e52f8a6219d3e34129c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitSchurFactor</type>
      <name>This</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad027c2df47a5ea24a7738cfc823077bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>abae86adc10c5685bf104e9d946d09995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, D &gt;</type>
      <name>Matrix2D</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ac5302f30064e9e456153ff09931693d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, D, D &gt;</type>
      <name>MatrixDD</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a606efd18429a46a302e2118cb966db29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; Key, Matrix2D &gt;</type>
      <name>KeyMatrix2D</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad92867704c1a16759ab2a86f5af4086d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; KeyMatrix2D &gt;</type>
      <name>Fblocks_</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ad89ddd5ace1114fb9cdb12ec4f7a327c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>PointCovariance_</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a7226069c98e07ecf1318392636247712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>E_</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a14f10dbd2dbabb1cb03215f3e5f0c3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>b_</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab09de541ed0b8f11746e82858be84e09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQ</name>
    <filename>a00136.html</filename>
    <templarg>D</templarg>
    <base>gtsam::JacobianSchurFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>ab0e274e61ae0c5a0810d257135184ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a2e431f0a818e6a8a53b8bbd3f9ada4ee</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a8215a1e4f92918aac83863e878d6096b</anchor>
      <arglist>(const std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>ac5e490e6f90c4823f44f6ba0e30cfa2e</anchor>
      <arglist>(const double *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>acafe7d1d6d3d12a258d667f1efce9cb7</anchor>
      <arglist>(double alpha, const Vector &amp;e, double *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a858adda7388f600d6321b15610bcf4ba</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a451f8c48bc601cabcf333b82d28104ad</anchor>
      <arglist>(double alpha, const double *x, double *y) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQR</name>
    <filename>a00137.html</filename>
    <templarg>D</templarg>
    <base>gtsam::JacobianSchurFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQR</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a83f189230bb876cdae4a63eb21b5f730</anchor>
      <arglist>(const std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorSVD</name>
    <filename>a00138.html</filename>
    <templarg>D</templarg>
    <base>gtsam::JacobianSchurFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac4fedabfaa69c1966324ce19ff0a5381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a7c9ef566fd684faf2ad81f620fe200c3</anchor>
      <arglist>(const FastVector&lt; Key &gt; &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a88eb03d4532cbbdc3691c6cebbe814e6</anchor>
      <arglist>(const std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;Enull, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianSchurFactor</name>
    <filename>a00139.html</filename>
    <templarg>D</templarg>
    <base>gtsam::JacobianFactor</base>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseRotationPrior</name>
    <filename>a00191.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a33069d1c86da3e6c66d5feccb75c7a1b</anchor>
      <arglist>(Key key, const Rotation &amp;rot_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a400f290b75d021bd4852523fc19e0d06</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a2dd17e26b47bc9a351b026840352fc22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae75e771749431437afe8de4e253c3805</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a55d09ee5d6d99973efec3043acbbb4eb</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a89900924f94be160bbaf3dea30592923</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a886bb13688a62b2680c10cdaf7999918</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseTranslationPrior</name>
    <filename>a00192.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>adad7eab23d69d2dec6ae4ad59e0a8c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a1701c62175b4e30c8c1df8159764480c</anchor>
      <arglist>(Key key, const Translation &amp;measured, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a204e0b877e117aabfe599ca247a195f8</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a61634d9aea79781a8c47e3fef910683a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>abf3863f02ddba4ed111aed2816feaf2f</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a0dfc756124004537a93ecf92832a1b2a</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aa427ef2d5236510390e285f524c6fd5e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PriorFactor</name>
    <filename>a00195.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a17a6bb1e3cde61261a2e998d7869c74a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a7ea39916801525197c488ac71cc495be</anchor>
      <arglist>(Key key, const VALUE &amp;prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a5f2c45bf81cff61b08c921cbe97e9664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>af3b9bf81fd8a7810549612398fc4c0f5</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>af01c7c9912959bf5038723f261e489fe</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a23a3d3ad68751ed9cc55284b6956163a</anchor>
      <arglist>(const T &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PriorFactor&lt; VALUE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a99936335b31d38f22c30f1f184396278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PriorFactor&lt; VALUE &gt;</type>
      <name>This</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a08069e4df59458c6d65e91a9bd671c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericProjectionFactor</name>
    <filename>a00111.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a87fd316162e688e38079f1a304ca6c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>aebd1ec0e741d556f72ed7e8309f7b259</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ac43cf4ea5f79e0c3a64b5668505d89ad</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericProjectionFactor</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ab3e44365566c5da167780554c0aea43a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a1bd1ae778a936412152c54bd2c03b2e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a8369363a9f13aa68c728551b06134af0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a3bb4f87652dfc2d098eddd9fa53b9368</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ae3308eca92930d82d035cf0a9f12b3ee</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5031c992bf0eb3422f7637151f88e8bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a1c5745391c5872fa5db7311bc8298153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>acdcb47c0cd7db4d1895913eca8d20b8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a5b57596c206d30a74f4ff9484ce319bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ae3b88b40b4ee6e9af9eefcde77bf9768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9640bbbb433383f0b40b5c2d9439415e</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>afb272b23dd8aefdd5fc4747c948aca5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a284d1618cc30f43664b512e6236485ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ad3d894b6b0ae69d0623f6f45272acb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a255e1a0498e504c1c5ec0839a3b6c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a4dccf402a384fee6b9ad802c37ab989f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a481f97058dad682badfb45fd27c8d444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a9862177693076e80e6e0cd03ab11a94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>adaf27277e2f5b0bd1cf395ef8fda68aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeFactor</name>
    <filename>a00196.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, POINT &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ac22b9639f4cf502a8d9b955afdc99513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>abab372b34cd61b2d5c0b6f715939631e</anchor>
      <arglist>(const POSE &amp;pose, const POINT &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>measured</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a1f109876ee1f9409f230e706e5ed09f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>adf63047f34ad6c33c412244b77031162</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ac3ec60369e221c730d5bc7d51b62ff0e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ReferenceFrameFactor</name>
    <filename>a00199.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor3&lt; POINT, TRANSFORM, POINT &gt;</base>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a142d0dde9f42aa80e9b6c57d3c49cd58</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac48e1fa01565b66115b7faed7d132f89</anchor>
      <arglist>(double mu, Key globalKey, Key transKey, Key localKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>abf5b0891b95e33c718560d86bb3ffc93</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, double sigma=1e-2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a2a0db41ec4eea128760da2646ba4991e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4819d3aab0d51b2e4081d00142446099</anchor>
      <arglist>(const Point &amp;global, const Transform &amp;trans, const Point &amp;local, boost::optional&lt; Matrix &amp; &gt; Dforeign=boost::none, boost::optional&lt; Matrix &amp; &gt; Dtrans=boost::none, boost::optional&lt; Matrix &amp; &gt; Dlocal=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a16491f2ffdd6e6e0307fa7d57faa127b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a535f2bec61538509696513b2ab6bbf0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>aab8e3316ef77cecc1bd1909a2c0eed33</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ae45ff48bf3b510669dbd0105c9970c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularHessianFactor</name>
    <filename>a00200.html</filename>
    <templarg>D</templarg>
    <base>gtsam::HessianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a183efe6455c0ba5be524a98e7464116f</anchor>
      <arglist>(const std::vector&lt; Key &gt; &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>ab50690c5b18b531c590bf02777f48f97</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a080cab24139636c9e5e331652912d00f</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a769cdfdacd08a21bab9d923cd1b3ef06</anchor>
      <arglist>(double alpha, const double *x, double *yvalues) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateFactor</name>
    <filename>a00207.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateFactor</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a27b0b48d60af56c8849a51e450e45718</anchor>
      <arglist>(Key key, const Rot3 &amp;P, const Rot3 &amp;Z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ab511ccb2a615d55c3484b96560fa4af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a79e2ef41d67ef5016dbb80e0d060cf49</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a0ab9790e52d0d9d0624601dd6bd1fdc2</anchor>
      <arglist>(const Rot3 &amp;R, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a886bb13688a62b2680c10cdaf7999918</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateDirectionsFactor</name>
    <filename>a00206.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateDirectionsFactor</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a61d504ba1ea4e5319e1dcbf155b20b20</anchor>
      <arglist>(Key key, const Unit3 &amp;p, const Unit3 &amp;z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a197d822f05154899cd46aaf1f78534bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a327b63859bddb76f159166950f92f1f9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a563a7bc804bf95e9878c56f5de2b3240</anchor>
      <arglist>(const Rot3 &amp;R, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartFactorBase</name>
    <filename>a00217.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>D</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a04ff9ae3f5d3919546dcaa03d79e1858</anchor>
      <arglist>(boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartFactorBase</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ac84b368d471801f1aa2367dc75f99009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>adc2baecf3cd81e83527e388db31fa135</anchor>
      <arglist>(const Point2 &amp;measured_i, const Key &amp;poseKey_i, const SharedNoiseModel &amp;noise_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a873c2b9ebd4436ff9da0edcc772568dc</anchor>
      <arglist>(std::vector&lt; Point2 &gt; &amp;measurements, std::vector&lt; Key &gt; &amp;poseKeys, std::vector&lt; SharedNoiseModel &gt; &amp;noises)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a90d05a31badbeea6e35d7f80cc139fa6</anchor>
      <arglist>(std::vector&lt; Point2 &gt; &amp;measurements, std::vector&lt; Key &gt; &amp;poseKeys, const SharedNoiseModel &amp;noise)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a7aca44ea2072f43749dd0f3f89ba6d15</anchor>
      <arglist>(const SfM_Track &amp;trackToAdd, const SharedNoiseModel &amp;noise)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Point2 &gt; &amp;</type>
      <name>measured</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a41386e855417501c85f24ea5cc5d316d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SharedNoiseModel &gt; &amp;</type>
      <name>noise</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aca81ff7c9260d8f8706e325e6ac80be2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a9edf8173e6e1d95da0b91c89ff9d0318</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a93224498abc914e4120a022924cd904b</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ae5b16c56d5c5c90e65108e942ed6e2b6</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ac2bcb50ebe593354860d2b299fc9c7bd</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEP</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a43828027a23c884c446e00e73da03bbd</anchor>
      <arglist>(Matrix &amp;E, Matrix &amp;PointCov, const Cameras &amp;cameras, const Point3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a53843da59505eb681557bc5ea3e8513c</anchor>
      <arglist>(std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras, const Point3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>adb3ca6dd4635a362d63434e8f3c85b41</anchor>
      <arglist>(std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Matrix3 &amp;PointCov, Vector &amp;b, const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a545730b423de343303f6b607aeed2de6</anchor>
      <arglist>(std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a88919130748aae2fdacdb4ab013bfdcd</anchor>
      <arglist>(Matrix &amp;F, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const Point3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; D &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a41c49a8a0695c740054a01c495cbb6c3</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda=0.0, bool diagonalDamping=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>schurComplement</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a3d027a50051949decb4a52ea199b8ebb</anchor>
      <arglist>(const std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;E, const Matrix &amp;PointCov, const Vector &amp;b, std::vector&lt; Matrix &gt; &amp;Gs, std::vector&lt; Vector &gt; &amp;gs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSparseSchurComplement</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a7c1e53b1603264218db09a148d32ae74</anchor>
      <arglist>(const std::vector&lt; KeyMatrix2D &gt; &amp;Fblocks, const Matrix &amp;E, const Matrix &amp;P, const Vector &amp;b, const double f, const FastVector&lt; Key &gt; allKeys, SymmetricBlockMatrix &amp;augmentedHessian) const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a1aa8061ec3ab61e12bb46266c83a649b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ad72d994bd641c87ad033376b312b294b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, 2, D &gt;</type>
      <name>Matrix2D</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af2430233c5daa1a27e4ad8fb43da5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>NonlinearFactor</type>
      <name>Base</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a53fedf932a3f3edaca2aa59f182f24ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SmartFactorBase&lt; POSE, CALIBRATION, D &gt;</type>
      <name>This</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>adc3abf9f6b7b4bbd4e1753f16f8dff43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Point2 &gt;</type>
      <name>measured_</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a71bc61e6df78df63ab6e69d3e6c72019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; SharedNoiseModel &gt;</type>
      <name>noise_</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>acc124bb58e558d5bb5260319e0e8aabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>aa8ce14b3cbff5766fbdc029006050e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionFactorState</name>
    <filename>a00219.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionFactor</name>
    <filename>a00218.html</filename>
    <templarg>POSE</templarg>
    <templarg>LANDMARK</templarg>
    <templarg>CALIBRATION</templarg>
    <templarg>D</templarg>
    <base>gtsam::SmartFactorBase</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0a77f8d3ec3b2192f0665d1eaf2ac127</anchor>
      <arglist>(const double rankTol, const double linThreshold, const bool manageDegeneracy, const bool enableEPI, boost::optional&lt; POSE &gt; body_P_sensor=boost::none, double landmarkDistanceThreshold=1e10, double dynamicOutlierRejectionThreshold=-1, SmartFactorStatePtr state=SmartFactorStatePtr(new SmartProjectionFactorState()))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1ed8523e3befa7b8955479e368a6f43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a782df4af7a3f5a05360d4a056725f59d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>accd3e91ba06da65888909879a77fc550</anchor>
      <arglist>(const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfLinearize</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aae7f22cd94f0f217254c53dfdc2b3ead</anchor>
      <arglist>(const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>triangulateSafe</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7807ce7a9f20659593f5529f65e77dd7</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>triangulateSafe</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a9cc5fcfed1279211a9b2500ae4342a52</anchor>
      <arglist>(const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a3cb235a353fa8fb7d00a3d3f3b8b510b</anchor>
      <arglist>(const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; D &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1ecfe0bfcb140a0a23c661e5382c1b5f</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; D &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1d55c2fe3c64ac6c76e91be039c77a3c</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; D &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7777864e0a9e89891503184e452fcbd7</anchor>
      <arglist>(const Values &amp;values, double lambda) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8b4f7c686096aa5e8452cbfb55505444</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeCamerasAndTriangulate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac0a74db27621c144234ac28e1c3e9817</anchor>
      <arglist>(const Values &amp;values, Cameras &amp;myCameras) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeEP</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac1e2288f1efe54f098dd98a1913f9526</anchor>
      <arglist>(Matrix &amp;E, Matrix &amp;PointCov, const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEP</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a4754d758b053f3c80811d312cd056ff0</anchor>
      <arglist>(Matrix &amp;E, Matrix &amp;PointCov, const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2030d43eebfe61c632274a1b571bcc73</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Matrix &amp;PointCov, Vector &amp;b, const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad0036b696220bd365f9adb2ddabf823e</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a42c15703e429da63358f8de00e2c1d01</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Matrix &amp;PointCov, Vector &amp;b, const Cameras &amp;cameras, const double lambda=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a3dbb18b0d824d711af957f6af2b7a7a3</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a738bad779d98b08fc38e3a812f795a2b</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad9b19d300e71f4c4582e48a9c97c2e41</anchor>
      <arglist>(Matrix &amp;F, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a4728b1173dcd691a5583934e3f4baf43</anchor>
      <arglist>(Matrix &amp;F, Matrix &amp;E, Matrix3 &amp;PointCov, Vector &amp;b, const Cameras &amp;cameras, const double lambda) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6a3ee45edef05cb9208e1f62b0738d4a</anchor>
      <arglist>(const Cameras &amp;cameras) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ae631a077d6b9ce5da91cae10c314a1c3</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0b9459fecf3657f56d22c882527ae690</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Cameras</type>
      <name>cameras</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>afe726e97cdeb2768c5a9f312f5b92eef</anchor>
      <arglist>(const Values &amp;values) const =0</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Point3 &gt;</type>
      <name>point</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a896708c4fc7fb266bf53b1fd043d3a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Point3 &gt;</type>
      <name>point</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa2f45731e06c65cd167bc42c9e0f70e2</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa633a44b3033c5e16a7cb79cacbcf853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a60845403b91c2d0ac03ec564926941ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac4a9079def9aee829559a8fafc330ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a80f84f35677d11fa971e9233e961260c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1caf288ee47c75c9c7f626690a346857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a807407f9dcacdd056b6ae67c78e30bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; SmartProjectionFactorState &gt;</type>
      <name>SmartFactorStatePtr</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2218f747f0d5ae0acdc64ea19bd07455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SmartFactorBase&lt; POSE, CALIBRATION, D &gt;</type>
      <name>Base</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8c568aaa54dd12775c9ce50c6dfc9c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SmartProjectionFactor&lt; POSE, LANDMARK, CALIBRATION, D &gt;</type>
      <name>This</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a438957822861e3f58889e5368cdc1cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>rankTolerance_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac65f0d67a8c56da8ff640131342d1e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>retriangulationThreshold_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a205a9fa5b2f2da8873cf8eb753cad362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8aa13e2e295eb3510db17acd276a9a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>manageDegeneracy_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad89c495065d1c9ce2bc20c4b92261081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>enableEPI_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a68895075ab9145a9106491e853f58d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>linearizationThreshold_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ade1e512662a6e2eb2e14912efc2dfc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesLinearization_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a105f417a97c6c92cef158ba9ed4f078b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>point_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a701663c5a6cc8b50d722cec2246d7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8331d99b13eb79dd56ee879010a54303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a90190efc96ed5e0cdb8873875a8e4d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionPoseFactor</name>
    <filename>a00220.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>SmartProjectionFactor&lt; POSE, LANDMARK, CALIBRATION, 6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a35fe161ea3d700e7fd8e3cc3045d77ba</anchor>
      <arglist>(const double rankTol=1, const double linThreshold=-1, const bool manageDegeneracy=false, const bool enableEPI=false, boost::optional&lt; POSE &gt; body_P_sensor=boost::none, LinearizationMode linearizeTo=HESSIAN, double landmarkDistanceThreshold=1e10, double dynamicOutlierRejectionThreshold=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionPoseFactor</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a10ea2d6fac91cc2f5e78a7a83b7e8b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1a280542a56571d1bd46a92a6cfc3051</anchor>
      <arglist>(const Point2 measured_i, const Key poseKey_i, const SharedNoiseModel noise_i, const boost::shared_ptr&lt; CALIBRATION &gt; K_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a3db47f0aa2683ee0a691ebc3d915d027</anchor>
      <arglist>(std::vector&lt; Point2 &gt; measurements, std::vector&lt; Key &gt; poseKeys, std::vector&lt; SharedNoiseModel &gt; noises, std::vector&lt; boost::shared_ptr&lt; CALIBRATION &gt; &gt; Ks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a697f8fa010c68c47674306cf47a9b35a</anchor>
      <arglist>(std::vector&lt; Point2 &gt; measurements, std::vector&lt; Key &gt; poseKeys, const SharedNoiseModel noise, const boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a91d73c29e15ee6f98cb1834567b236d7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a7e56318a8b258355f8ca6fe8b63f41f0</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ab2ab9051fd4d93c1c1fcf4ef27f640ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>acc4608cd36555502642c8c5c0fa5f5ce</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ae7c5a60abfd0bdcee30d8070397c1ed1</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aa4d021d15345c7c4416de6f70aad0e52</anchor>
      <arglist>(const Values &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; boost::shared_ptr&lt; CALIBRATION &gt; &gt;</type>
      <name>calibration</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a2785f5f19460b33a0cbb4b6e0f2a9218</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0a77f8d3ec3b2192f0665d1eaf2ac127</anchor>
      <arglist>(const double rankTol, const double linThreshold, const bool manageDegeneracy, const bool enableEPI, boost::optional&lt; POSE &gt; body_P_sensor=boost::none, double landmarkDistanceThreshold=1e10, double dynamicOutlierRejectionThreshold=-1, SmartFactorStatePtr state=SmartFactorStatePtr(new SmartProjectionFactorState()))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1ed8523e3befa7b8955479e368a6f43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a782df4af7a3f5a05360d4a056725f59d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>accd3e91ba06da65888909879a77fc550</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfLinearize</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aae7f22cd94f0f217254c53dfdc2b3ead</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>triangulateSafe</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7807ce7a9f20659593f5529f65e77dd7</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>triangulateSafe</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a9cc5fcfed1279211a9b2500ae4342a52</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a3cb235a353fa8fb7d00a3d3f3b8b510b</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; D &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1ecfe0bfcb140a0a23c661e5382c1b5f</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; D &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1d55c2fe3c64ac6c76e91be039c77a3c</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; D &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7777864e0a9e89891503184e452fcbd7</anchor>
      <arglist>(const Values &amp;values, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8b4f7c686096aa5e8452cbfb55505444</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeCamerasAndTriangulate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac0a74db27621c144234ac28e1c3e9817</anchor>
      <arglist>(const Values &amp;values, Cameras &amp;myCameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeEP</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac1e2288f1efe54f098dd98a1913f9526</anchor>
      <arglist>(Matrix &amp;E, Matrix &amp;PointCov, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeEP</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a4754d758b053f3c80811d312cd056ff0</anchor>
      <arglist>(Matrix &amp;E, Matrix &amp;PointCov, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2030d43eebfe61c632274a1b571bcc73</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Matrix &amp;PointCov, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad0036b696220bd365f9adb2ddabf823e</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a42c15703e429da63358f8de00e2c1d01</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;E, Matrix &amp;PointCov, Vector &amp;b, const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobians</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a4728b1173dcd691a5583934e3f4baf43</anchor>
      <arglist>(Matrix &amp;F, Matrix &amp;E, Matrix3 &amp;PointCov, Vector &amp;b, const Cameras &amp;cameras, const double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a3dbb18b0d824d711af957f6af2b7a7a3</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a738bad779d98b08fc38e3a812f795a2b</anchor>
      <arglist>(std::vector&lt; typename Base::KeyMatrix2D &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad9b19d300e71f4c4582e48a9c97c2e41</anchor>
      <arglist>(Matrix &amp;F, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6a3ee45edef05cb9208e1f62b0738d4a</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ae631a077d6b9ce5da91cae10c314a1c3</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0b9459fecf3657f56d22c882527ae690</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Point3 &gt;</type>
      <name>point</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a896708c4fc7fb266bf53b1fd043d3a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; Point3 &gt;</type>
      <name>point</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa2f45731e06c65cd167bc42c9e0f70e2</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa633a44b3033c5e16a7cb79cacbcf853</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a60845403b91c2d0ac03ec564926941ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac4a9079def9aee829559a8fafc330ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a80f84f35677d11fa971e9233e961260c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SmartProjectionFactor&lt; POSE, LANDMARK, CALIBRATION, 6 &gt;</type>
      <name>Base</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a139efc5661de9a70cc49902aa8b48a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartProjectionPoseFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ae5caad24f5fc0e29cc2207acce9fc830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a2c82b8426390a1301c86d4b13d1a99c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a1caf288ee47c75c9c7f626690a346857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a807407f9dcacdd056b6ae67c78e30bf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearizationMode</type>
      <name>linearizeTo_</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a1700075568c8fb37b661077e2b4d9f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; CALIBRATION &gt; &gt;</type>
      <name>K_all_</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ac3a47a4120da7c03053b89084bc6c553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>rankTolerance_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ac65f0d67a8c56da8ff640131342d1e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>retriangulationThreshold_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a205a9fa5b2f2da8873cf8eb753cad362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8aa13e2e295eb3510db17acd276a9a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>manageDegeneracy_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ad89c495065d1c9ce2bc20c4b92261081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>enableEPI_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a68895075ab9145a9106491e853f58d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>linearizationThreshold_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>ade1e512662a6e2eb2e14912efc2dfc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesLinearization_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a105f417a97c6c92cef158ba9ed4f078b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>point_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a701663c5a6cc8b50d722cec2246d7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8331d99b13eb79dd56ee879010a54303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a90190efc96ed5e0cdb8873875a8e4d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; SmartProjectionFactorState &gt;</type>
      <name>SmartFactorStatePtr</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2218f747f0d5ae0acdc64ea19bd07455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SmartFactorBase&lt; POSE, CALIBRATION, D &gt;</type>
      <name>Base</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a8c568aaa54dd12775c9ce50c6dfc9c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SmartProjectionFactor&lt; POSE, LANDMARK, CALIBRATION, D &gt;</type>
      <name>This</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a438957822861e3f58889e5368cdc1cd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericStereoFactor</name>
    <filename>a00112.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aac8f2d1b74b72d392ae450974e8d1e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aca587c1e7ce85802898fbf398470b229</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a3e9bbe838c9f91e54e8b6f9d61d3f537</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericStereoFactor</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a811df2da6b20690b8d562cb9c1a71f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a484d99fec7c7a931359a5115753b154d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ab4d6323ad6a821893a9c673cf6ba79c4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8776adfd9dedf28466616747bda95224</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a00e52e6ad2926bb4d2ad7d4e2640dee8</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const </arglist>
    </member>
    <member kind="function">
      <type>const StereoPoint2 &amp;</type>
      <name>measured</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aed0f2ef0f6d643768e8a64d266d89113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a4b68e0e654e809f71873c206633020f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ad27a5bc25abb254a3c7f416cb42e3fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aaba3b9b6d5f97115fe1135a0f2b4ad06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>afab7f245fcbd293f400fe700913a85b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericStereoFactor&lt; POSE, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a6655f82262d0e9cfd83bf7ecea4cbea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GenericStereoFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a77ec7f1a8e17a46ad0a6e0d092b2549f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POSE</type>
      <name>CamPose</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>acf611598e4995aaba265b3b4c853e67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultAllocator</name>
    <filename>a00085.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultVectorAllocator</name>
    <filename>a00086.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::TimingOutline</name>
    <filename>a00234.html</filename>
    <member kind="function">
      <type></type>
      <name>TimingOutline</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aaf71bcd586bc33bd38e9db2a8f59614a</anchor>
      <arglist>(const std::string &amp;label, size_t myId)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>time</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a9c5df7f172b8d5eace549f1e5d5c7722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secs</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a5cecad37439348e556ca1e24ff2ee4db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>self</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aae1565a4bb1b5a6b74f0411afb4a6087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wall</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>aace9d64510d276b0f4fe22a4854013ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>abb13411fb53f1eb2db6397a451ef0990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>ac5878cabc79b1f9a6344dd9c3d746dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a203c28494f9f28be07396eb380c72a7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>t2_</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a10bc532260daa8d7372c289c1c2ecb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::weak_ptr&lt; TimingOutline &gt;</type>
      <name>parent_</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>abec6041cac884177b3345c59c4b875b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChildMap</type>
      <name>children_</name>
      <anchorfile>a00234.html</anchorfile>
      <anchor>a1cbcbaea2438a8c1f36f19c46c7ca69b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::AutoTicToc</name>
    <filename>a00006.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeData</name>
    <filename>a00180.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeClique</name>
    <filename>a00179.html</filename>
    <templarg>CLIQUE</templarg>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel</name>
    <filename>a00546.html</filename>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Base</name>
    <filename>a00007.html</filename>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af3c6026adff03fe3f98f6fa16564bdfa</anchor>
      <arglist>(size_t dim=1)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a89a408efab769bcfbd0e8394c49de35d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a24b86160149f31a2ff20bec1d99bdc40</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad80869425e9f6334f77f01da9fbed28b</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a43f4905b2f7e6349a1a71d3a46421f06</anchor>
      <arglist>(Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a9109f94ced439b88e0c6e381de9c7f36</anchor>
      <arglist>(Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac77a10a110434c8136b8d69abf932155</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a521539f601a79ff2901962b8c307ef31</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Gaussian</name>
    <filename>a00095.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af614adf2f80b9fc81df2811ed73059f0</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a306d4cb0763226d51a90d10e008a163a</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9fa6948363015d630269426cb5b08a1b</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>afc454e6b099c33a04632bba54724d7ff</anchor>
      <arglist>(const Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a342f8e63a3efc5dece3a7bc94f76157b</anchor>
      <arglist>(Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a338d24dde7213324cc4ea71f77ecf3e7</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenSystem</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a97fab79fd0a3e01072b0af4c5ae2885c</anchor>
      <arglist>(std::vector&lt; Matrix &gt; &amp;A, Vector &amp;b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Diagonal &gt;</type>
      <name>QR</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3d254e5f307f8cf15d561deca16a6022</anchor>
      <arglist>(Matrix &amp;Ab) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>R</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a08a2640ca622e3e9491de5121d1b9e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConstrained</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>add1ec5c25dcba8a3ccfd639fde9c9d40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>SqrtInformation</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8c9d3331d5b09f086c44d99553f5e15c</anchor>
      <arglist>(const Matrix &amp;R, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Information</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af7b24866cf09adbee55dad7854bfef92</anchor>
      <arglist>(const Matrix &amp;M, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Covariance</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3ed257b6e9a8016cc3c76a8962a64ba0</anchor>
      <arglist>(const Matrix &amp;covariance, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1d28af98ad86135fe53b5510f1253abc</anchor>
      <arglist>(size_t dim=1, const boost::optional&lt; Matrix &gt; &amp;sqrt_information=boost::none)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Matrix &gt;</type>
      <name>sqrt_information_</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a288d3c8bd743700bc19241361a32de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Diagonal</name>
    <filename>a00050.html</filename>
    <base>gtsam::noiseModel::Gaussian</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ae16f79ba3a0cc3021de189e2d5fb6408</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a90376aa081292847ee129a670532caa1</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a9f39781a01089e6ac450cb970215c031</anchor>
      <arglist>(const Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a1a941624163d67ffdcb598b625c418e1</anchor>
      <arglist>(Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a2887e5ada91dce2a0ed10a710cb98ccf</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>sigmas</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a74589fcdeb2aa1e0fbaf5536fa4ce569</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>invsigmas</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aeaa4d5bb80497239e6ed33a1186d54c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>precisions</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a046596932abf33c94c0ce00964e75a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>R</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a168ed6118d0b8cf0a236fcb9b8ea2f57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigmas</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8f00b543a69c756b5277f2e89c701cc5</anchor>
      <arglist>(const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variances</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8c23ce6bda772372da8814c0febbb36f</anchor>
      <arglist>(const Vector &amp;variances, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precisions</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a8d1a161668140ba54e1eb2fe9a7d50e0</anchor>
      <arglist>(const Vector &amp;precisions, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a52cdcdf2e0e6cda03100ba9d25605538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aa97d4530104dd414d2372892eb94859d</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>sigmas_</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a40cec73d5792d6ff6345de2207e571b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Constrained</name>
    <filename>a00043.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>mu</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>acbde4b4f0666db999c591eae670158a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a623b69d7d17cc22d07c907e8da12ed0e</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a1e58f1c32b911c6297af336de4db84cc</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aedd981eb03607dc0f6ca753ad6d28217</anchor>
      <arglist>(const Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>adcbada64b7aec4f3935c92a4580ed002</anchor>
      <arglist>(Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a85bc14e1912f5782e14119f1255848b7</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Diagonal::shared_ptr</type>
      <name>QR</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa7bb3b17427e9151df88b6ccf2021f92</anchor>
      <arglist>(Matrix &amp;Ab) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConstrained</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ae20aebc0715a961b2c5f92d2e4d5aea3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>unit</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aafa1b292987fca9f5effce5b1a5daef5</anchor>
      <arglist>(size_t augmentedDim=0) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a536dc8f623a70e671fee5055364c42f4</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a47f8e43392b65ddbf089a44c886e976d</anchor>
      <arglist>(const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aa6c65fa08522379a4733e2043bd8c2e1</anchor>
      <arglist>(double m, const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedVariances</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ad42a87f248c79be2cfda2934fa910c01</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;variances)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedPrecisions</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6dec800b5293cd57a0b6e38e434a5a7c</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;precisions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6530a33957f49cc78f8da3842ed685b4</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4b1918b7655f35a3ab554b55ab27a895</anchor>
      <arglist>(size_t dim, const Vector &amp;mu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a5a966c8c2281ccea35ef993b678bc4bc</anchor>
      <arglist>(size_t dim, double mu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ace556e459f2b5f8cfcb30030f48c6ff0</anchor>
      <arglist>(const Vector &amp;sigmas=zero(1))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a96cf4e02109b88d9be5a90d657ddd134</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>mu_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ad12d58b8b5c00ba93702bcccf15e6b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Isotropic</name>
    <filename>a00131.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a73d701310825d4f43843bb4eafd78ec0</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a9c306fbc7d608bf05e76328e23ef9f1d</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a227b07b8c1fcfa981e206dc61dc713cb</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a698421c4c9f4a522b0d74df9183fadfa</anchor>
      <arglist>(const Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aecd973a65becd9895dd16202f167a914</anchor>
      <arglist>(Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ab5e169a2bc7a7620fab249471f662b46</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a17f96c8010f8fbe18289df2b18f78b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigma</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a6f34496ff6924bd5552c77810e991015</anchor>
      <arglist>(size_t dim, double sigma, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variance</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>af176eeec710dc59f5e0125e52a9e8326</anchor>
      <arglist>(size_t dim, double variance, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precision</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a82d8d86deec2e1cc7185c9ccf113b724</anchor>
      <arglist>(size_t dim, double precision, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Isotropic</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ae18e287216417166319c4ea7ba046941</anchor>
      <arglist>(size_t dim, double sigma)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Unit</name>
    <filename>a00240.html</filename>
    <base>gtsam::noiseModel::Isotropic</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a86bb771335c2071c0c764d9572866933</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>af2c33ee8aea93c2602caaf6c2b5904f2</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a98ae8b646493766aec96e66ac66a7d1b</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a68a547a3474eb0666372f9334049d2ca</anchor>
      <arglist>(const Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a258d054bf8bd4ef89bd5acf0f5623191</anchor>
      <arglist>(Matrix &amp;H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a333b07e2081f5ccf2bca22569079abb0</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a183d0ba26c61be8523dc0b813d815925</anchor>
      <arglist>(Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a98ac92399318d2db7959e5ad84536e3f</anchor>
      <arglist>(Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a3b20f7f2094635a14cadaaf2cba016af</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a4f9ee2a3a0a114aa6e836526ef8f90f0</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Create</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>a61fda7a7390d3fc40f5618185e801bfe</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Robust</name>
    <filename>a00203.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1ccfaa5e2bbe890d0a2a394053c6f8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a1fe3b2482f328c7c3ae26b30bef10945</anchor>
      <arglist>(const RobustModel::shared_ptr robust, const NoiseModel::shared_ptr noise)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Robust</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a13ba0ca59782251fec4290969fe5f724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RobustModel::shared_ptr &amp;</type>
      <name>robust</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a0739a25f1c1d352f8b8a423865e242f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NoiseModel::shared_ptr &amp;</type>
      <name>noise</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a564a78322ca5ce69362f4345abf41960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8a55d95e5702b573657af439b3d9ab73</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a8d58d3a8c525d1baf9b9478efeefee6a</anchor>
      <arglist>(const Vector &amp;v) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RobustModel::shared_ptr</type>
      <name>robust_</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>adbe38b28c96ab791af4c5539ad31aa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NoiseModel::shared_ptr</type>
      <name>noise_</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a62f108dcedf22a16571a290ecad62642</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel::mEstimator</name>
    <filename>a00547.html</filename>
    <class kind="class">gtsam::noiseModel::mEstimator::Base</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Null</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Fair</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Huber</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Cauchy</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Tukey</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Welsh</class>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Base</name>
    <filename>a00008.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a08ec42bfacc535ba9cac427c5e510867</anchor>
      <arglist>(const double &amp;error) const =0</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>weight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a390ca4bb62a433854d4accba93884d22</anchor>
      <arglist>(const Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sqrtWeight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ad5800142afbb9890bd4b1babfbfcff0b</anchor>
      <arglist>(const Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a82cac8f90151cfcff6a830c1dce34920</anchor>
      <arglist>(Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8465c61c4ff53643598f97de21f5634d</anchor>
      <arglist>(std::vector&lt; Matrix &gt; &amp;A, Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9459010ec85c97a277eef9f5f478b53f</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a762895c06d5e3395bfd195e2a4a2e568</anchor>
      <arglist>(Matrix &amp;A1, Matrix &amp;A2, Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6bc37762bf8e45e02b400cb7f5fd6b20</anchor>
      <arglist>(Matrix &amp;A1, Matrix &amp;A2, Matrix &amp;A3, Vector &amp;error) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReweightScheme</type>
      <name>reweight_</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a324ead5e657531310058f768f9daf0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Null</name>
    <filename>a00178.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ae87c11795438f792ddbf4e709920ad8e</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Fair</name>
    <filename>a00084.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ad36de592d24b8bae408da96094d4040c</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Huber</name>
    <filename>a00116.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>abaf9c7bfda47531b3da0b27f9e5b00d5</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Cauchy</name>
    <filename>a00027.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ae2c690e7ca4c0990d950099fe2c09d92</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Tukey</name>
    <filename>a00239.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a4f1d7eae749825c08e280d2cf9fdb6e5</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Welsh</name>
    <filename>a00254.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ad59d2c37be2a0e07d2f0980ae97c8c5b</anchor>
      <arglist>(const double &amp;error) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::treeTraversal</name>
    <filename>a00552.html</filename>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/base</name>
    <path>/home/cbeall3/git/gtsam/gtsam/base/</path>
    <filename>dir_59d8fae67ebcec1514e0f6d4ea576047.html</filename>
    <file>cholesky.cpp</file>
    <file>cholesky.h</file>
    <file>ConcurrentMap.h</file>
    <file>debug.cpp</file>
    <file>debug.h</file>
    <file>DerivedValue.h</file>
    <file>DSFVector.cpp</file>
    <file>DSFVector.h</file>
    <file>FastDefaultAllocator.h</file>
    <file>FastList.h</file>
    <file>FastMap.h</file>
    <file>FastSet.h</file>
    <file>FastVector.h</file>
    <file>Group.h</file>
    <file>Lie-inl.h</file>
    <file>Lie.h</file>
    <file>LieMatrix.cpp</file>
    <file>LieMatrix.h</file>
    <file>lieProxies.h</file>
    <file>LieScalar.cpp</file>
    <file>LieScalar.h</file>
    <file>LieVector.cpp</file>
    <file>LieVector.h</file>
    <file>Manifold.h</file>
    <file>Matrix.cpp</file>
    <file>Matrix.h</file>
    <file>numericalDerivative.h</file>
    <file>serialization.h</file>
    <file>serializationTestHelpers.h</file>
    <file>SymmetricBlockMatrix.cpp</file>
    <file>SymmetricBlockMatrix.h</file>
    <file>SymmetricBlockMatrixBlockExpr.h</file>
    <file>Testable.h</file>
    <file>TestableAssertions.h</file>
    <file>timing.cpp</file>
    <file>timing.h</file>
    <file>treeTraversal-inst.h</file>
    <file>types.cpp</file>
    <file>types.h</file>
    <file>Value.h</file>
    <file>Vector.cpp</file>
    <file>Vector.h</file>
    <file>VerticalBlockMatrix.cpp</file>
    <file>VerticalBlockMatrix.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/discrete</name>
    <path>/home/cbeall3/git/gtsam/gtsam/discrete/</path>
    <filename>dir_20686f9fbb87ff6485e15cdc5f2b7011.html</filename>
    <file>AlgebraicDecisionTree.h</file>
    <file>Assignment.h</file>
    <file>DecisionTree-inl.h</file>
    <file>DecisionTree.h</file>
    <file>DecisionTreeFactor.cpp</file>
    <file>DecisionTreeFactor.h</file>
    <file>DiscreteBayesNet.cpp</file>
    <file>DiscreteBayesNet.h</file>
    <file>DiscreteBayesTree.cpp</file>
    <file>DiscreteBayesTree.h</file>
    <file>DiscreteConditional.cpp</file>
    <file>DiscreteConditional.h</file>
    <file>DiscreteEliminationTree.cpp</file>
    <file>DiscreteEliminationTree.h</file>
    <file>DiscreteFactor.cpp</file>
    <file>DiscreteFactor.h</file>
    <file>DiscreteFactorGraph.cpp</file>
    <file>DiscreteFactorGraph.h</file>
    <file>DiscreteJunctionTree.cpp</file>
    <file>DiscreteJunctionTree.h</file>
    <file>DiscreteKey.cpp</file>
    <file>DiscreteKey.h</file>
    <file>DiscreteMarginals.h</file>
    <file>Potentials.cpp</file>
    <file>Potentials.h</file>
    <file>Signature.cpp</file>
    <file>Signature.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/geometry</name>
    <path>/home/cbeall3/git/gtsam/gtsam/geometry/</path>
    <filename>dir_be4965403b556e5d04a57d44231dfb01.html</filename>
    <file>Cal3_S2.cpp</file>
    <file>Cal3_S2.h</file>
    <file>Cal3_S2Stereo.h</file>
    <file>Cal3Bundler.cpp</file>
    <file>Cal3Bundler.h</file>
    <file>Cal3DS2.cpp</file>
    <file>Cal3DS2.h</file>
    <file>Cal3Unified.cpp</file>
    <file>Cal3Unified.h</file>
    <file>CalibratedCamera.cpp</file>
    <file>CalibratedCamera.h</file>
    <file>concepts.h</file>
    <file>EssentialMatrix.cpp</file>
    <file>EssentialMatrix.h</file>
    <file>PinholeCamera.h</file>
    <file>Point2.cpp</file>
    <file>Point2.h</file>
    <file>Point3.cpp</file>
    <file>Point3.h</file>
    <file>Pose2.cpp</file>
    <file>Pose2.h</file>
    <file>Pose3.cpp</file>
    <file>Pose3.h</file>
    <file>Rot2.cpp</file>
    <file>Rot2.h</file>
    <file>Rot3.cpp</file>
    <file>Rot3.h</file>
    <file>Rot3M.cpp</file>
    <file>Rot3Q.cpp</file>
    <file>SimpleCamera.cpp</file>
    <file>SimpleCamera.h</file>
    <file>StereoCamera.cpp</file>
    <file>StereoCamera.h</file>
    <file>StereoPoint2.cpp</file>
    <file>StereoPoint2.h</file>
    <file>triangulation.cpp</file>
    <file>triangulation.h</file>
    <file>TriangulationFactor.h</file>
    <file>Unit3.cpp</file>
    <file>Unit3.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam</name>
    <path>/home/cbeall3/git/gtsam/gtsam/</path>
    <filename>dir_bfc28a2d5821421c95e1320e4031f515.html</filename>
    <dir>/home/cbeall3/git/gtsam/gtsam/base</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/discrete</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/geometry</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/inference</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/linear</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/nonlinear</dir>
    <dir>/home/cbeall3/git/gtsam/gtsam/slam</dir>
    <file>global_includes.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/inference</name>
    <path>/home/cbeall3/git/gtsam/gtsam/inference/</path>
    <filename>dir_169eaf73225633059c1416b195c6cb0d.html</filename>
    <file>BayesNet-inst.h</file>
    <file>BayesNet.h</file>
    <file>BayesTree-inst.h</file>
    <file>BayesTree.cpp</file>
    <file>BayesTree.h</file>
    <file>BayesTreeCliqueBase-inst.h</file>
    <file>BayesTreeCliqueBase.h</file>
    <file>ClusterTree-inst.h</file>
    <file>ClusterTree.h</file>
    <file>Conditional-inst.h</file>
    <file>Conditional.h</file>
    <file>EliminateableFactorGraph-inst.h</file>
    <file>EliminateableFactorGraph.h</file>
    <file>EliminationTree-inst.h</file>
    <file>EliminationTree.h</file>
    <file>Factor.cpp</file>
    <file>Factor.h</file>
    <file>FactorGraph-inst.h</file>
    <file>FactorGraph.h</file>
    <file>graph-inl.h</file>
    <file>graph.h</file>
    <file>inference-inst.h</file>
    <file>inferenceExceptions.h</file>
    <file>ISAM-inst.h</file>
    <file>ISAM.h</file>
    <file>JunctionTree-inst.h</file>
    <file>JunctionTree.h</file>
    <file>Key.cpp</file>
    <file>Key.h</file>
    <file>LabeledSymbol.cpp</file>
    <file>LabeledSymbol.h</file>
    <file>Ordering.cpp</file>
    <file>Ordering.h</file>
    <file>Symbol.cpp</file>
    <file>Symbol.h</file>
    <file>VariableIndex-inl.h</file>
    <file>VariableIndex.cpp</file>
    <file>VariableIndex.h</file>
    <file>VariableSlots.cpp</file>
    <file>VariableSlots.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/linear</name>
    <path>/home/cbeall3/git/gtsam/gtsam/linear/</path>
    <filename>dir_8b9ec42722111795f76d34c6471319a6.html</filename>
    <file>ConjugateGradientSolver.h</file>
    <file>Errors.cpp</file>
    <file>Errors.h</file>
    <file>GaussianBayesNet.cpp</file>
    <file>GaussianBayesNet.h</file>
    <file>GaussianBayesTree-inl.h</file>
    <file>GaussianBayesTree.cpp</file>
    <file>GaussianBayesTree.h</file>
    <file>GaussianConditional-inl.h</file>
    <file>GaussianConditional.cpp</file>
    <file>GaussianConditional.h</file>
    <file>GaussianDensity.cpp</file>
    <file>GaussianDensity.h</file>
    <file>GaussianEliminationTree.cpp</file>
    <file>GaussianEliminationTree.h</file>
    <file>GaussianFactor.h</file>
    <file>GaussianFactorGraph.cpp</file>
    <file>GaussianFactorGraph.h</file>
    <file>GaussianISAM.cpp</file>
    <file>GaussianISAM.h</file>
    <file>GaussianJunctionTree.cpp</file>
    <file>GaussianJunctionTree.h</file>
    <file>HessianFactor-inl.h</file>
    <file>HessianFactor.cpp</file>
    <file>HessianFactor.h</file>
    <file>iterative-inl.h</file>
    <file>iterative.cpp</file>
    <file>iterative.h</file>
    <file>IterativeSolver.cpp</file>
    <file>IterativeSolver.h</file>
    <file>JacobianFactor-inl.h</file>
    <file>JacobianFactor.cpp</file>
    <file>JacobianFactor.h</file>
    <file>KalmanFilter.cpp</file>
    <file>KalmanFilter.h</file>
    <file>linearAlgorithms-inst.h</file>
    <file>linearExceptions.cpp</file>
    <file>linearExceptions.h</file>
    <file>NoiseModel.cpp</file>
    <file>NoiseModel.h</file>
    <file>Sampler.cpp</file>
    <file>Sampler.h</file>
    <file>SubgraphPreconditioner.cpp</file>
    <file>SubgraphPreconditioner.h</file>
    <file>SubgraphSolver.cpp</file>
    <file>SubgraphSolver.h</file>
    <file>VectorValues.cpp</file>
    <file>VectorValues.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/nonlinear</name>
    <path>/home/cbeall3/git/gtsam/gtsam/nonlinear/</path>
    <filename>dir_88adea47575c2d5c40d4070390572b66.html</filename>
    <file>DoglegOptimizer.cpp</file>
    <file>DoglegOptimizer.h</file>
    <file>DoglegOptimizerImpl.cpp</file>
    <file>DoglegOptimizerImpl.h</file>
    <file>ExtendedKalmanFilter-inl.h</file>
    <file>ExtendedKalmanFilter.h</file>
    <file>GaussNewtonOptimizer.cpp</file>
    <file>GaussNewtonOptimizer.h</file>
    <file>ISAM2-impl.cpp</file>
    <file>ISAM2-impl.h</file>
    <file>ISAM2-inl.h</file>
    <file>ISAM2.cpp</file>
    <file>ISAM2.h</file>
    <file>LevenbergMarquardtOptimizer.cpp</file>
    <file>LevenbergMarquardtOptimizer.h</file>
    <file>LinearContainerFactor.cpp</file>
    <file>LinearContainerFactor.h</file>
    <file>Marginals.cpp</file>
    <file>Marginals.h</file>
    <file>NonlinearConjugateGradientOptimizer.cpp</file>
    <file>NonlinearConjugateGradientOptimizer.h</file>
    <file>NonlinearEquality.h</file>
    <file>nonlinearExceptions.h</file>
    <file>NonlinearFactor.h</file>
    <file>NonlinearFactorGraph.cpp</file>
    <file>NonlinearFactorGraph.h</file>
    <file>NonlinearISAM.cpp</file>
    <file>NonlinearISAM.h</file>
    <file>NonlinearOptimizer.cpp</file>
    <file>NonlinearOptimizer.h</file>
    <file>NonlinearOptimizerParams.cpp</file>
    <file>NonlinearOptimizerParams.h</file>
    <file>Symbol.h</file>
    <file>Values-inl.h</file>
    <file>Values.cpp</file>
    <file>Values.h</file>
    <file>WhiteNoiseFactor.h</file>
  </compound>
  <compound kind="dir">
    <name>/home/cbeall3/git/gtsam/gtsam/slam</name>
    <path>/home/cbeall3/git/gtsam/gtsam/slam/</path>
    <filename>dir_323e70a1eef083399c870cf8a6035771.html</filename>
    <file>AntiFactor.h</file>
    <file>BearingFactor.h</file>
    <file>BearingRangeFactor.h</file>
    <file>BetweenFactor.h</file>
    <file>BoundingConstraint.h</file>
    <file>dataset.cpp</file>
    <file>dataset.h</file>
    <file>EssentialMatrixConstraint.cpp</file>
    <file>EssentialMatrixConstraint.h</file>
    <file>EssentialMatrixFactor.h</file>
    <file>GeneralSFMFactor.h</file>
    <file>ImplicitSchurFactor.h</file>
    <file>JacobianFactorQ.h</file>
    <file>JacobianFactorQR.h</file>
    <file>JacobianFactorSVD.h</file>
    <file>JacobianSchurFactor.h</file>
    <file>lago.cpp</file>
    <file>lago.h</file>
    <file>PoseRotationPrior.h</file>
    <file>PoseTranslationPrior.h</file>
    <file>PriorFactor.h</file>
    <file>ProjectionFactor.h</file>
    <file>RangeFactor.h</file>
    <file>ReferenceFrameFactor.h</file>
    <file>RegularHessianFactor.h</file>
    <file>RotateFactor.h</file>
    <file>SmartFactorBase.h</file>
    <file>SmartProjectionFactor.h</file>
    <file>SmartProjectionPoseFactor.h</file>
    <file>StereoFactor.h</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>GTSAM</title>
    <filename>index</filename>
    <docanchor file="index" title="Creating new factor and variable types">new_factor_variable_types</docanchor>
  </compound>
</tagfile>
